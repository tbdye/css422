00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2/27/2016 11:09:23 PM

00000000                             1  *------------------------------------------------------------------------------
00000000                             2  * Title      : 68K Disassember Final Project
00000000                             3  * Written by : Thomas Dye and Ross Holzworth
00000000                             4  * Date       : 2/27/16
00000000                             5  * Description: CSS 422 Final Project - University of Washington | Bothell
00000000                             6  * Instructor : Dr. Yang Peng
00000000                             7  *------------------------------------------------------------------------------
00000000                             8  * Main
00000000                             9  *---------------Opcode--Operands------------Comments---------------------------
00001000                            10  START           ORG     $1000               ;Load at this address
00001000                            11  
00001000                            12  * Display message prompt
00001000  43F9 00001357             13                  LEA     MSG_PROMPT,A1       ; Store the console message for output.
00001006  103C 000E                 14                  MOVE.B  #14,D0              ; Will display from A1 without CR,LF.
0000100A  4E4F                      15                  TRAP    #15                 ; Display to console.
0000100C                            16  * Get User Input
0000100C  43F9 00002000             17                  LEA     INPUT_BUFFER,A1     ; Raw input will store at INPUT_BUFFER
00001012  103C 0002                 18                  MOVE.B  #2,D0               ; Read string from keyboard to A1
00001016  4E4F                      19                  TRAP    #15                 ; Get the user input from console, length in D1
00001018                            20  
00001018                            21  * Convert ascii input to hex
00001018  4280                      22                  CLR.L   D0                  ; Use D0 and D1 to process ascii to hex conversion.
0000101A  4281                      23                  CLR.L   D1                  ; Ensure both are clear of data.
0000101C                            24                  
0000101C  4EB9 0000125A             25                  JSR     SR_AtoHLoop         ; Convert raw input ascii characters to hex
00001022  23C2 00001352             26                  MOVE.L  D2,INPUT_LOC        ; Store hex value user data location
00001028                            27  
00001028                            28  * Process Instructions
00001028  41F9 00001060             29                  LEA     ROOT_JMP_TABLE,A0   ; Index into the table
0000102E  2479 00001352             30                  MOVEA.L INPUT_LOC,A2        ; Point to the location of input machine code
00001034                            31  
00001034  4EB9 000012F0             32  piLoop          JSR     SR_PrintAddr
0000103A  4287                      33                  CLR.L   D7                  ; Clear existing opcode, if any exists
0000103C  3E12                      34                  MOVE.W  (A2),D7             ; Load next opcode
0000103E  123C 000C                 35                  MOVE.B  #12,D1              ; Prepare a shift of 12 bits to use in D1 
00001042  E26F                      36                  LSR.W   D1,D7               ; Use shift to isolate bits for root branch
00001044  CEFC 0006                 37                  MULU    #6,D7               ; Form offset to travel on jump table 
00001048  4EB0 7000                 38                  JSR     0(A0,D7)            ; Jump to appropriate opcode, then return
0000104C  0C39 0001 00001356        39                  CMP.B   #1,BOOL_FINISHED    ; Check if end of input machine code has been reached
00001054  6700 0006                 40                  BEQ     TERMINATE           ; Exit the loop.
00001058  544A                      41                  ADDA    #2,A2               ; Advance to next opcode
0000105A  60D8                      42                  BRA     piLoop 
0000105C                            43  
0000105C  FFFF FFFF                 44  TERMINATE       SIMHALT                     ;Halt the simulator
00001060                            45  
00001060                            46  *------------------------------------------------------------------------------
00001060                            47  * Root Branch - bits 15-12 ----------------------------------------------------
00001060                            48  *------------------------------------------------------------------------------
00001060                            49  * Root Level Jump Table
00001060                            50  *---------------Opcode--Operands------------Comments---------------------------
00001060  4EF9 000010C0             51  ROOT_JMP_TABLE  JMP     BRANCH_0            ;$0 - Bit Manipulation/MOVEP/Immediate
00001066  4EF9 000011C6             52                  JMP     OP_MOVE_B           ;$1 - Move Byte
0000106C  4EF9 00001236             53                  JMP     OP_MOVE_L           ;$2 - Move Long
00001072  4EF9 00001236             54                  JMP     OP_MOVE_W           ;$3 - Move Word
00001078  4EF9 000010E4             55                  JMP     BRANCH_4            ;$4 - Miscellaneous
0000107E  4EF9 000011C6             56                  JMP     OP_INVALID          ;$5 - ADDQ/SUBQ/Scc/DBcc/TRAPc c
00001084  4EF9 00001106             57                  JMP     BRANCH_6            ;$6 - Bcc/BSR/BRA
0000108A  4EF9 00001236             58                  JMP     OP_MOVEQ            ;$7 - MOVEQ
00001090  4EF9 0000111C             59                  JMP     BRANCH_8            ;$8 - OR/DIV/SBCD
00001096  4EF9 0000112A             60                  JMP     BRANCH_9            ;$9 - SUB/SUBX
0000109C  4EF9 000011C6             61                  JMP     OP_INVALID          ;$A - Unassigned, Reserved
000010A2  4EF9 0000113C             62                  JMP     BRANCH_B            ;$B - CMP/EOR
000010A8  4EF9 00001152             63                  JMP     BRANCH_C            ;$C - AND/MUL/ABCD/EXG
000010AE  4EF9 00001164             64                  JMP     BRANCH_D            ;$D - ADD/ADDX
000010B4  4EF9 00001176             65                  JMP     BRANCH_E            ;$E - Shift/Rotate/Bit Field
000010BA  4EF9 00001198             66                  JMP     BRANCH_F            ;$F - Coproccessor and CPU 32 Extensions
000010C0                            67  
000010C0                            68  *------------------------------------------------------------------------------
000010C0                            69  * First Level Branches - bits 11-8 --------------------------------------------
000010C0                            70  *------------------------------------------------------------------------------
000010C0                            71  * From Root to Branch 0
000010C0                            72  *---------------Opcode--Operands------------Comments---------------------------
000010C0  4EB9 000012EE             73  BRANCH_0        JSR     SR_Eval11to8
000010C6                            74  
000010C6  6700 00FE                 75                  BEQ     OP_ANDI             ;$0
000010CA  6700 00FA                 76                  BEQ     OP_ADDI             ;$3
000010CE  6700 00F6                 77                  BEQ     OP_BCHG             ;$8
000010D2  6700 00F2                 78                  BEQ     OP_CMPI             ;$C
000010D6                            79  
000010D6  4EB9 000012E6             80                  JSR     SR_Eval7to6
000010DC  6700 00E8                 81                  BEQ     OP_BCHG             ;%01
000010E0                            82  
000010E0  6000 00E4                 83                  BRA     OP_INVALID          ;No matches found
000010E4                            84  
000010E4                            85  * From Root to Branch 4
000010E4                            86  *---------------Opcode--Operands------------Comments---------------------------
000010E4  6000 0150                 87  BRANCH_4        BRA     OP_NOP              ;Temp unconditional branch for testing
000010E8  4EB9 000012EE             88                  JSR     SR_Eval11to8
000010EE                            89                  
000010EE  6700 00D6                 90                  BEQ     OP_CLR              ;$2
000010F2  6700 00A8                 91                  BEQ     BRANCH_4E           ;$E
000010F6                            92                  
000010F6  6700 01F4                 93                  BEQ     SR_Eval11to6
000010FA  6700 013A                 94                  BEQ     OP_MOVEM            ;%1x001x
000010FE  6700 00C6                 95                  BEQ     OP_LEA              ;%xxx111
00001102                            96                  
00001102  6000 00C2                 97                  BRA     OP_INVALID          ;No matches found
00001106                            98  
00001106                            99  * From Root to Branch 6
00001106                           100  *---------------Opcode--Operands------------Comments---------------------------
00001106  4EB9 000012EE            101  BRANCH_6        JSR     SR_Eval11to8
0000110C                           102                  
0000110C  6700 00B8                103                  BEQ     OP_BCC              ;$4
00001110  6700 00B4                104                  BEQ     OP_BGT              ;$E
00001114  6700 00B0                105                  BEQ     OP_BLE              ;$F
00001118                           106                  
00001118  6000 00AC                107                  BRA     OP_INVALID          ;No matches found
0000111C                           108  
0000111C                           109  * From Root to Branch 8
0000111C                           110  *---------------Opcode--Operands------------Comments---------------------------
0000111C  4EB9 000012EA            111  BRANCH_8        JSR     SR_Eval8to6
00001122                           112                  
00001122  6700 00A2                113                  BEQ     OP_INVALID          ;%111 - Op not supported
00001126  6000 009E                114                  BRA     OP_DIVS
0000112A                           115  
0000112A                           116  * From Root to Branch 8
0000112A                           117  *---------------Opcode--Operands------------Comments---------------------------
0000112A  4EB9 000012EA            118  BRANCH_9        JSR     SR_Eval8to6
00001130                           119  
00001130  6700 0128                120                  BEQ     OP_SUBA             ;%011
00001134  6700 0124                121                  BEQ     OP_SUBA             ;%111
00001138  6000 0120                122                  BRA     OP_SUB
0000113C                           123  
0000113C                           124  * From Root to Branch B
0000113C                           125  *---------------Opcode--Operands------------Comments---------------------------
0000113C  4EB9 000012EA            126  BRANCH_B        JSR     SR_Eval8to6
00001142                           127  
00001142  6700 0082                128                  BEQ     OP_CMP              ;%000
00001146  6700 007E                129                  BEQ     OP_CMP              ;%001
0000114A  6700 007A                130                  BEQ     OP_CMP              ;%010
0000114E  6000 0076                131                  BRA     OP_INVALID          ;No matches found
00001152                           132  
00001152                           133  * From Root to Branch C
00001152                           134  *---------------Opcode--Operands------------Comments---------------------------
00001152  4EB9 000012EA            135  BRANCH_C        JSR     SR_Eval8to6
00001158                           136  
00001158  6700 006C                137                  BEQ     OP_INVALID          ;%011 - Op not supported
0000115C  6700 00D8                138                  BEQ     OP_MULS             ;%111
00001160  6000 0064                139                  BRA     OP_AND
00001164                           140  
00001164                           141  * From Root to Branch D
00001164                           142  *---------------Opcode--Operands------------Comments---------------------------
00001164  4EB9 000012EA            143  BRANCH_D        JSR     SR_Eval8to6
0000116A                           144  
0000116A  6700 005A                145                  BEQ     OP_ADDA             ;%011
0000116E  6700 0056                146                  BEQ     OP_ADDA             ;%111
00001172  6000 0052                147                  BRA     OP_ADD
00001176                           148  
00001176                           149  * From Root to Branch E
00001176                           150  *---------------Opcode--Operands------------Comments---------------------------
00001176  4EB9 000012E8            151  BRANCH_E        JSR     SR_Eval8to3
0000117C                           152  
0000117C  6700 0048                153                  BEQ     OP_ASR              ;%0xxx00
00001180  6700 0044                154                  BEQ     OP_LSR              ;%0xxx01
00001184  6700 00BE                155                  BEQ     OP_ROR              ;%0xxx11
00001188  6700 003C                156                  BEQ     OP_ASL              ;%1xxx00
0000118C  6700 0038                157                  BEQ     OP_LSL              ;%1xxx01
00001190  6700 00B2                158                  BEQ     OP_ROL              ;%1xxx11
00001194  6000 0030                159                  BRA     OP_INVALID
00001198                           160  
00001198                           161  * From Root to Branch F
00001198                           162  *---------------Opcode--Operands------------Comments---------------------------
00001198  6000 00AA                163  BRANCH_F        BRA     OP_SIMHALT
0000119C                           164  
0000119C                           165  *------------------------------------------------------------------------------
0000119C                           166  * Second Level Branches - bits 7-4 --------------------------------------------
0000119C                           167  *------------------------------------------------------------------------------
0000119C                           168  * From Branch 4 to Branch 4E
0000119C                           169  *---------------Opcode--Operands------------Comments---------------------------
0000119C  4EB9 000012E4            170  BRANCH_4E       JSR     SR_Eval7to4
000011A2                           171  
000011A2  6700 0010                172                  BEQ     BRANCH_4E7          ;$7
000011A6                           173                  
000011A6  4EB9 000012E6            174                  JSR     SR_Eval7to6
000011AC                           175                  
000011AC  6700 0018                176                  BEQ     OP_JSR              ;%10
000011B0  6000 0014                177                  BRA     OP_INVALID          ;No matches found
000011B4                           178              
000011B4                           179  *------------------------------------------------------------------------------
000011B4                           180  * Third Level Branches - bits 3-0 ---------------------------------------------
000011B4                           181  *------------------------------------------------------------------------------
000011B4                           182  * From Branch 4E to Branch 4E7
000011B4                           183  *---------------Opcode--Operands------------Comments---------------------------
000011B4  4EB9 000012E2            184  BRANCH_4E7      JSR     SR_Eval3to0
000011BA                           185  
000011BA  6700 007A                186                  BEQ     OP_NOP              ;$1
000011BE  6700 0084                187                  BEQ     OP_RTS              ;$5
000011C2  6000 0002                188                  BRA     OP_INVALID          ;No matches found
000011C6                           189  
000011C6                           190  *------------------------------------------------------------------------------
000011C6                           191  * Opcodes ---------------------------------------------------------------------
000011C6                           192  *------------------------------------------------------------------------------
000011C6                           193  * Add
000011C6                           194  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           195  OP_ADD
000011C6                           196  
000011C6                           197  * Add Address
000011C6                           198  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           199  OP_ADDA
000011C6                           200  
000011C6                           201  * Add Immediate
000011C6                           202  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           203  OP_ADDI
000011C6                           204  
000011C6                           205  * AND Logical
000011C6                           206  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           207  OP_AND
000011C6                           208  
000011C6                           209  * AND Immediate
000011C6                           210  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           211  OP_ANDI
000011C6                           212  
000011C6                           213  * Arithmetic Shift Left
000011C6                           214  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           215  OP_ASL
000011C6                           216  
000011C6                           217  * Arithmetic Shift Right
000011C6                           218  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           219  OP_ASR
000011C6                           220  
000011C6                           221  * Branch Conditionally - Carry Clear
000011C6                           222  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           223  OP_BCC
000011C6                           224  
000011C6                           225  * Test a Bit and Change
000011C6                           226  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           227  OP_BCHG
000011C6                           228  
000011C6                           229  * Branch Conditionally - Greater Than
000011C6                           230  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           231  OP_BGT
000011C6                           232  
000011C6                           233  * Branch Conditionally - Less or Equal
000011C6                           234  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           235  OP_BLE
000011C6                           236  
000011C6                           237  * Clear an Operand
000011C6                           238  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           239  OP_CLR
000011C6                           240  
000011C6                           241  * Compare
000011C6                           242  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           243  OP_CMP
000011C6                           244  
000011C6                           245  * Compare Immediate
000011C6                           246  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           247  OP_CMPI
000011C6                           248  
000011C6                           249  * Signed Divide
000011C6                           250  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           251  OP_DIVS
000011C6                           252  
000011C6                           253  * Disassembler does not support provided opcode
000011C6                           254  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           255  OP_INVALID
000011C6                           256  
000011C6                           257  * Jump to Subroutine
000011C6                           258  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           259  OP_JSR
000011C6                           260  
000011C6                           261  * Load Effective Address
000011C6                           262  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           263  OP_LEA
000011C6                           264  
000011C6                           265  * Logical Shift Left
000011C6                           266  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           267  OP_LSL
000011C6                           268  
000011C6                           269  * Logical Shift Right
000011C6                           270  *---------------Opcode--Operands------------Comments---------------------------
000011C6                           271  OP_LSR
000011C6                           272  
000011C6                           273  * Move Data from Source to Destination - Byte
000011C6                           274  *---------------Opcode--Operands------------Comments---------------------------
000011C6  43F9 00001378            275  OP_MOVE_B       LEA     DISP_MOVE,A1           ;
000011CC  103C 000E                276                  MOVE.B  #14,D0              ;
000011D0  4E4F                     277                  TRAP    #15
000011D2                           278              
000011D2  43F9 0000138B            279                  LEA     DISP_SIZE_B,A1
000011D8  103C 000E                280                  MOVE.B  #14,D0
000011DC  4E4F                     281                  TRAP    #15
000011DE                           282              
000011DE  4EB9 0000131E            283                  JSR     SR_PrintTab
000011E4                           284              
000011E4  183C 000D                285                  MOVE.B  #13,D4
000011E8                           286              
000011E8  3412                     287                  MOVE.W  (A2),D2
000011EA  1A3C 000A                288                  MOVE.B  #10,D5
000011EE  EB6A                     289                  LSL.W   D5,D2
000011F0  E86A                     290                  LSR.W   D4,D2
000011F2                           291              
000011F2  3612                     292                  MOVE.W  (A2),D3
000011F4  1A3C 000D                293                  MOVE.B  #13,D5
000011F8  EB6B                     294                  LSL.W   D5,D3
000011FA  E86B                     295                  LSR.W   D4,D3
000011FC                           296              
000011FC  4EB9 00001274            297                  JSR     SR_Decode_EA
00001202                           298  
00001202  43F9 00001389            299                  LEA     DISP_COMMA,A1
00001208  103C 000E                300                  MOVE.B  #14,D0
0000120C  4E4F                     301                  TRAP    #15
0000120E                           302              
0000120E  3412                     303                  MOVE.W  (A2),D2
00001210  1A3C 0007                304                  MOVE.B  #7,D5
00001214  EB6A                     305                  LSL.W   D5,D2
00001216  E86A                     306                  LSR.W   D4,D2
00001218                           307              
00001218  3612                     308                  MOVE.W  (A2),D3
0000121A  1A3C 0004                309                  MOVE.B  #4,D5
0000121E  EB6B                     310                  LSL.W   D5,D3
00001220  E86B                     311                  LSR.W   D4,D3
00001222                           312  
00001222  4EB9 00001274            313                  JSR     SR_Decode_EA
00001228                           314              
00001228  43F9 00001371            315                  LEA     MSG_LINEBREAK,A1
0000122E  103C 000E                316                  MOVE.B  #14,D0
00001232  4E4F                     317                  TRAP    #15
00001234                           318                         
00001234  4E75                     319                  RTS
00001236                           320  
00001236                           321  * Move Data from Source to Destination - Long
00001236                           322  *---------------Opcode--Operands------------Comments---------------------------
00001236                           323  OP_MOVE_L
00001236                           324  
00001236                           325  * Move Data from Source to Destination - Word
00001236                           326  *---------------Opcode--Operands------------Comments---------------------------
00001236                           327  OP_MOVE_W
00001236                           328  
00001236                           329  * Move Multiple Registers
00001236                           330  *---------------Opcode--Operands------------Comments---------------------------
00001236                           331  OP_MOVEM
00001236                           332  
00001236                           333  * Move Quick
00001236                           334  *---------------Opcode--Operands------------Comments---------------------------
00001236                           335  OP_MOVEQ
00001236                           336  
00001236                           337  * Signed Multiply
00001236                           338  *---------------Opcode--Operands------------Comments---------------------------
00001236                           339  OP_MULS
00001236                           340  
00001236                           341  * No Operation
00001236                           342  *---------------Opcode--Operands------------Comments---------------------------
00001236  43F9 00001374            343  OP_NOP          LEA     DISP_NOP,A1
0000123C  103C 000D                344                  MOVE.B  #13,D0
00001240  4E4F                     345                  TRAP    #15
00001242  4E75                     346                  RTS
00001244                           347  
00001244                           348  * Rotate (Without Extend) Left
00001244                           349  *---------------Opcode--Operands------------Comments---------------------------
00001244                           350  OP_ROL
00001244                           351  
00001244                           352  * Rotate (Without Extend) Right
00001244                           353  *---------------Opcode--Operands------------Comments---------------------------
00001244                           354  OP_ROR
00001244                           355  
00001244                           356  * Return from Subroutine
00001244                           357  *---------------Opcode--Operands------------Comments---------------------------
00001244                           358  OP_RTS
00001244                           359  
00001244                           360  * PseudoOp Simhalt
00001244                           361  *---------------Opcode--Operands------------Comments---------------------------
00001244  43F9 0000137D            362  OP_SIMHALT      LEA     DISP_SIMHALT,A1
0000124A  103C 000D                363                  MOVE.B  #13,D0
0000124E  4E4F                     364                  TRAP    #15
00001250  13FC 0001 00001356       365                  MOVE.B  #1,BOOL_FINISHED    ;Mark that input machine code ended
00001258  4E75                     366                  RTS
0000125A                           367  
0000125A                           368  * Subtract
0000125A                           369  *---------------Opcode--Operands------------Comments---------------------------
0000125A                           370  OP_SUB
0000125A                           371  
0000125A                           372  * Subtract Address
0000125A                           373  *---------------Opcode--Operands------------Comments---------------------------
0000125A                           374  OP_SUBA
0000125A                           375  
0000125A                           376  *------------------------------------------------------------------------------
0000125A                           377  * Subroutines -----------------------------------------------------------------
0000125A                           378  *------------------------------------------------------------------------------
0000125A                           379  * Ascii to Hex Loop
0000125A                           380  * Helper subroutine to process raw ascii and convert it to hex.
0000125A                           381  * Input Parameters: A1
0000125A                           382  * Return Parameters: D2.L contains the input number converted to hex
0000125A                           383  * Registers used internally: D0, D1
0000125A                           384  *---------------Opcode--Operands------------Comments---------------------------
0000125A  1019                     385  SR_AtoHLoop     MOVE.B  (A1)+,D0            ; Get the first byte
0000125C  4EB9 0000132C            386                  JSR     SR_Strip_Ascii      ; Get rid of the ASCII code.
00001262  D280                     387                  ADD.L   D0,D1               ; Load the char into D1
00001264  0C11 0000                388                  CMPI.B  #$0,(A1)            ; Evaluate if there is more work to do.
00001268  6700 0006                389                  BEQ     athEndLoop          ; If not, exit the loop.
0000126C  E989                     390                  LSL.L   #$4,D1              ; Otherwise, shift the char left in D1 for the next char
0000126E  60EA                     391                  BRA     SR_AtoHLoop         ; Continue working
00001270                           392    
00001270  2401                     393  athEndLoop      MOVE.L  D1,D2               ; Return hex number in D2
00001272  4E75                     394                  RTS
00001274                           395  
00001274                           396  * SR_DecodeEA determines and prints the effective address mode and register of
00001274                           397  * six bits
00001274                           398  * Registers passed: D2(mode), D3(register)
00001274                           399  * Return: null
00001274                           400  *---------------Opcode--Operands------------Comments---------------------------
00001274  47F9 00001286            401  SR_Decode_EA    LEA     deModeTable,A3
0000127A  49F9 00001394            402                  LEA     TABLE_HEXCHAR,A4
00001280  4EB3 2000                403                  JSR     0(A3,D2)
00001284  4E75                     404                  RTS
00001286                           405                  
00001286                           406  *   EA Mode Table
00001286  4EF9 000012B6            407  deModeTable     JMP     deMode_000          ;0 - Register Direct Data
0000128C  4EF9 000012D4            408                  JMP     deMode_001          ;1 - Register Direct Address
00001292  4EF9 000012D6            409                  JMP     deMode_010          ;2 - Register Indirect Address
00001298  4EF9 000012D8            410                  JMP     deMode_011          ;3 - Register Indirect Address Post Inc
0000129E  4EF9 000012DA            411                  JMP     deMode_100          ;4 - Register Indirect Address Post Dec
000012A4  4EF9 000012DC            412                  JMP     deMode_101          ;5 - Not Supported
000012AA  4EF9 000012DE            413                  JMP     deMode_110          ;6 - Not Supported
000012B0  4EF9 000012E0            414                  JMP     deMode_111          ;7 - Absolute Data Short/Long/Immediate
000012B6                           415                  
000012B6                           416  *   0 - Register Direct Data
000012B6  1A3C 001A                417  deMode_000      MOVE.B  #26,D5
000012BA  43F4 5000                418                  LEA     0(A4,D5),A1
000012BE  103C 000E                419                  MOVE.B  #14,D0
000012C2  4E4F                     420                  TRAP    #15
000012C4                           421  
000012C4  C7FC 0002                422                  MULS    #2,D3
000012C8  43F4 3000                423                  LEA 0(A4,D3),A1
000012CC  103C 000E                424                  MOVE.B  #14,D0
000012D0  4E4F                     425                  TRAP    #15
000012D2  4E75                     426                  RTS
000012D4                           427  
000012D4                           428  *   1 - Register Direct Address
000012D4  4E75                     429  deMode_001      RTS
000012D6                           430  
000012D6                           431  *   2 - Register Indirect Address
000012D6  4E75                     432  deMode_010      RTS
000012D8                           433  
000012D8                           434  *   3 - Register Indirect Address Post Inc
000012D8  4E75                     435  deMode_011      RTS
000012DA                           436  
000012DA                           437  *   4 - Register Indirect Address Post Dec
000012DA  4E75                     438  deMode_100      RTS
000012DC                           439  
000012DC                           440  *   5 - Not Supported
000012DC  4E75                     441  deMode_101      RTS
000012DE                           442  
000012DE                           443  *   6 - Not Supported
000012DE  4E75                     444  deMode_110      RTS
000012E0                           445  
000012E0                           446  *   7 - Absolute Data Short/Long/Immediate
000012E0  4E75                     447  deMode_111      RTS
000012E2                           448  
000012E2                           449  * Evaluate Bits 3 to 0
000012E2                           450  *---------------Opcode--Operands------------Comments---------------------------
000012E2  4E75                     451  SR_Eval3to0     RTS
000012E4                           452  
000012E4                           453  * Evaluate Bits 7 to 4
000012E4                           454  *---------------Opcode--Operands------------Comments---------------------------
000012E4  4E75                     455  SR_Eval7to4     RTS
000012E6                           456  
000012E6                           457  * Evaluate Bits 7 to 6
000012E6                           458  *---------------Opcode--Operands------------Comments---------------------------
000012E6  4E75                     459  SR_Eval7to6     RTS
000012E8                           460  
000012E8                           461  * Evaluate Bits 8 to 3
000012E8                           462  *---------------Opcode--Operands------------Comments---------------------------
000012E8  4E75                     463  SR_Eval8to3     RTS
000012EA                           464  
000012EA                           465  * Evaluate Bits 8 to 6
000012EA                           466  *---------------Opcode--Operands------------Comments---------------------------
000012EA  4E75                     467  SR_Eval8to6     RTS
000012EC                           468  
000012EC                           469  * Evaluate Bits 11 to 6
000012EC                           470  *---------------Opcode--Operands------------Comments---------------------------
000012EC  4E75                     471  SR_Eval11to6    RTS
000012EE                           472  
000012EE                           473  * Evaluate Bits 11 to 8
000012EE                           474  *---------------Opcode--Operands------------Comments---------------------------
000012EE  4E75                     475  SR_Eval11to8    RTS
000012F0                           476  
000012F0                           477  * Prints the hex address in A2 when called
000012F0                           478  * Registers passed: A2
000012F0                           479  * Return: Null
000012F0                           480  *---------------Opcode--Operands------------Comments---------------------------
000012F0  47F9 00001394            481  SR_PrintAddr    LEA     TABLE_HEXCHAR,A3    ;load constants and table into registers
000012F6  1A3C 0000                482                  MOVE.B  #0,D5        
000012FA  183C 001C                483                  MOVE.B  #28,D4              ;char shift
000012FE                           484  
000012FE                           485  *   Load the address to be printed into D6
000012FE  3C0A                     486  paLoop          MOVE.W  A2,D6
00001300                           487          
00001300                           488  *   Isolate nibble in D6 to be printed as a hex character
00001300  EBAE                     489                  LSL.L   D5,D6        
00001302  E8AE                     490                  LSR.L   D4,D6
00001304                           491  
00001304                           492  *   Multiply nibble by two, find character in char_table
00001304  CCFC 0002                493                  MULU    #2,D6
00001308  43F3 6000                494                  LEA     0(A3,D6),A1
0000130C                           495  
0000130C                           496  *   Print char
0000130C  103C 000E                497                  MOVE.B  #14,D0
00001310  4E4F                     498                  TRAP    #15
00001312                           499              
00001312                           500  *   Increment loop counter by four, check if loop is done
00001312  5805                     501                  ADD.B   #4,D5
00001314  BA3C 0020                502                  CMP.B   #32,D5
00001318  6700 0004                503                  BEQ     SR_PrintTab         ;Exits loop
0000131C  60E0                     504                  BRA     paLoop
0000131E                           505                  
0000131E                           506  * Add a tab to the end of a printed string, leave subroutine
0000131E                           507  *---------------Opcode--Operands------------Comments---------------------------
0000131E  43F9 00001385            508  SR_PrintTab     LEA     DISP_TAB,A1
00001324  103C 000E                509                  MOVE.B  #14,D0
00001328  4E4F                     510                  TRAP    #15
0000132A  4E75                     511                  RTS
0000132C                           512  
0000132C                           513  * Strip Ascii
0000132C                           514  * Remove the ascii code from the digits 0-9,a-f, or A-F
0000132C                           515  * Input Parameters: <D0> = ascii code
0000132C                           516  * Return Parameters: D0.B = number 0...F, returned as 00...0F
0000132C                           517  * Registers used internally: D0
0000132C                           518  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
0000132C                           519  *---------------Opcode--Operands------------Comments---------------------------
0000132C  B03C 0039                520  SR_Strip_Ascii  CMP.B   #$39,D0             ; Is it in range of 0-9?
00001330  6F00 001A                521                  BLE     saSub30             ; It's a number
00001334  B03C 0046                522                  CMP.B   #$46,D0             ; Is is A...F?
00001338  6F00 000A                523                  BLE     saSub37             ; It's A...F
0000133C  0400 0057                524                  SUB.B   #$57,D0             ; It's a...f
00001340  6000 000E                525                  BRA     saReturn            ; Go back
00001344  0400 0037                526  saSub37         SUB.B   #$37,D0             ; Strip 37
00001348  6000 0006                527                  BRA     saReturn            ; Go back
0000134C  0400 0030                528  saSub30         SUB.B   #$30,D0             ; Strip 30
00001350  4E75                     529  saReturn        RTS                         ; Go back
00001352                           530  
00001352                           531  *------------------------------------------------------------------------------
00001352                           532  * Variables and Constants -----------------------------------------------------
00001352                           533  *------------------------------------------------------------------------------
00001352                           534  *
00001352                           535  *---------------Opcode--Operands------------Comments---------------------------
00001352  =0000000D                536  CR              EQU     $0D                 ;Carriage Return
00001352  =0000000A                537  LF              EQU     $0A                 ;Line feed
00001352                           538  
00001352  =00002000                539  INPUT_BUFFER    EQU     $2000               ;Create an input buffer for ascii strings.
00001352                           540  INPUT_LOC       DS.L    1                   ;Location to read input data
00001356                           541  BOOL_FINISHED   DS.B    1                   ;Finished reading data
00001357                           542  
00001357= 4C 6F 61 64 20 64 ...    543  MSG_PROMPT      DC.B    'Load data from location: ',0
00001371= 0D 0A 00                 544  MSG_LINEBREAK   DC.B    CR,LF,0
00001374                           545  
00001374= 4E 4F 50 00              546  DISP_NOP        DC.B    'NOP',0
00001378= 4D 4F 56 45 00           547  DISP_MOVE       DC.B    'MOVE',0
0000137D= 53 49 4D 48 41 4C ...    548  DISP_SIMHALT    DC.B    'SIMHALT',0
00001385                           549  
00001385= 20 20 20 00              550  DISP_TAB        DC.B    '   ',0
00001389= 2C 00                    551  DISP_COMMA      DC.B    ',',0
0000138B= 2E 42 00                 552  DISP_SIZE_B     DC.B    '.B',0
0000138E= 2E 57 00                 553  DISP_SIZE_W     DC.B    '.W',0
00001391= 2E 57 00                 554  DISP_SIZE_L     DC.B    '.W',0
00001394                           555  
00001394= 30 00                    556  TABLE_HEXCHAR   DC.B    '0',0
00001396= 31 00                    557                  DC.B    '1',0
00001398= 32 00                    558                  DC.B    '2',0
0000139A= 33 00                    559                  DC.B    '3',0
0000139C= 34 00                    560                  DC.B    '4',0
0000139E= 35 00                    561                  DC.B    '5',0
000013A0= 36 00                    562                  DC.B    '6',0
000013A2= 37 00                    563                  DC.B    '7',0
000013A4= 38 00                    564                  DC.B    '8',0
000013A6= 39 00                    565                  DC.B    '9',0
000013A8= 41 00                    566                  DC.B    'A',0 
000013AA= 42 00                    567                  DC.B    'B',0
000013AC= 43 00                    568                  DC.B    'C',0
000013AE= 44 00                    569                  DC.B    'D',0
000013B0= 45 00                    570                  DC.B    'E',0
000013B2= 46 00                    571                  DC.B    'F',0
000013B4                           572  
000013B4                           573                  END     START               ;Do not put anything below this line.

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ATHENDLOOP          1270
BOOL_FINISHED       1356
BRANCH_0            10C0
BRANCH_4            10E4
BRANCH_4E           119C
BRANCH_4E7          11B4
BRANCH_6            1106
BRANCH_8            111C
BRANCH_9            112A
BRANCH_B            113C
BRANCH_C            1152
BRANCH_D            1164
BRANCH_E            1176
BRANCH_F            1198
CR                  D
DEMODETABLE         1286
DEMODE_000          12B6
DEMODE_001          12D4
DEMODE_010          12D6
DEMODE_011          12D8
DEMODE_100          12DA
DEMODE_101          12DC
DEMODE_110          12DE
DEMODE_111          12E0
DISP_COMMA          1389
DISP_MOVE           1378
DISP_NOP            1374
DISP_SIMHALT        137D
DISP_SIZE_B         138B
DISP_SIZE_L         1391
DISP_SIZE_W         138E
DISP_TAB            1385
INPUT_BUFFER        2000
INPUT_LOC           1352
LF                  A
MSG_LINEBREAK       1371
MSG_PROMPT          1357
OP_ADD              11C6
OP_ADDA             11C6
OP_ADDI             11C6
OP_AND              11C6
OP_ANDI             11C6
OP_ASL              11C6
OP_ASR              11C6
OP_BCC              11C6
OP_BCHG             11C6
OP_BGT              11C6
OP_BLE              11C6
OP_CLR              11C6
OP_CMP              11C6
OP_CMPI             11C6
OP_DIVS             11C6
OP_INVALID          11C6
OP_JSR              11C6
OP_LEA              11C6
OP_LSL              11C6
OP_LSR              11C6
OP_MOVEM            1236
OP_MOVEQ            1236
OP_MOVE_B           11C6
OP_MOVE_L           1236
OP_MOVE_W           1236
OP_MULS             1236
OP_NOP              1236
OP_ROL              1244
OP_ROR              1244
OP_RTS              1244
OP_SIMHALT          1244
OP_SUB              125A
OP_SUBA             125A
PALOOP              12FE
PILOOP              1034
ROOT_JMP_TABLE      1060
SARETURN            1350
SASUB30             134C
SASUB37             1344
SR_ATOHLOOP         125A
SR_DECODE_EA        1274
SR_EVAL11TO6        12EC
SR_EVAL11TO8        12EE
SR_EVAL3TO0         12E2
SR_EVAL7TO4         12E4
SR_EVAL7TO6         12E6
SR_EVAL8TO3         12E8
SR_EVAL8TO6         12EA
SR_PRINTADDR        12F0
SR_PRINTTAB         131E
SR_STRIP_ASCII      132C
START               1000
TABLE_HEXCHAR       1394
TERMINATE           105C
