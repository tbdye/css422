00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/10/2016 12:54:33 PM

00000000                             1  *------------------------------------------------------------------------------
00000000                             2  * Title      : 68K Disassember Final Project
00000000                             3  * Written by : Thomas Dye and Ross Holzworth
00000000                             4  * Date       : 2/29/16
00000000                             5  * Description: CSS 422 Final Project - University of Washington | Bothell
00000000                             6  * Instructor : Dr. Yang Peng
00000000                             7  *------------------------------------------------------------------------------
00000000                             8  * Main ------------------------------------------------------------------------
00000000                             9  *---------------Opcode--Operands------------Comments---------------------------
00001000                            10  START           ORG     $1000               ;Load at this address
00001000                            11  
00001000                            12                  INCLUDE 'EasyRiders_Parser.X68'
00001000  43F9 000022A0             13                  LEA     MSG_WELCOME,A1      ;Store the console message for output.
00001006  103C 000D                 14                  MOVE.B  #13,D0              ;Will display from A1 with CR,LF.
0000100A  4E4F                      15                  TRAP    #15                 ;Display to console.
0000100C                            16                  
0000100C  13FC 0007 0000254A        17                  MOVE.B  #7,LINECOUNT        ;Initialize counter (welcome + prompts)
00001014                            18  
00001014  43F9 00002326             19  FN_InputLoop    LEA     MSG_LOC_START,A1    ;Store the console message for output.
0000101A  103C 000E                 20                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000101E  4E4F                      21                  TRAP    #15                 ;Display to console.
00001020                            22  
00001020  43F9 00002560             23                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
00001026  103C 0002                 24                  MOVE.B  #2,D0               ;Read string from keyboard to A1
0000102A  4E4F                      25                  TRAP    #15                 ;Get the user input from console, length in D1
0000102C                            26  
0000102C  4280                      27                  CLR.L   D0                  ;Use D0 and D1 to process ascii to hex conversion.
0000102E  4281                      28                  CLR.L   D1                  ;Ensure both are clear of data.
00001030                            29                  
00001030  4EB9 00001EB2             30                  JSR     SR_AtoHLoop         ;Convert raw input ascii characters to hex
00001036  23C7 00002558             31                  MOVE.L  D7,DATA_START_LOC   ;Store hex value user data location
0000103C                            32                  
0000103C  43F9 00002464             33                  LEA     MSG_LINEBREAK,A1    ;Append linefeed to the end of user input
00001042  103C 000E                 34                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001046  4E4F                      35                  TRAP    #15                 ;Display to console.
00001048                            36                  
00001048  4EB9 00001ECC             37                  JSR     SR_CheckStart       ;Reads DATA_START_LOC, Returns D7
0000104E  BE3C 0001                 38                  CMP.B   #1,D7               ;If D7 == 1, input was invalid, so start over.
00001052  67C0                      39                  BEQ     FN_InputLoop
00001054                            40                  
00001054  43F9 00002347             41  giEndAddrLoop   LEA     MSG_LOC_END,A1      ;Store the console message for output.
0000105A  103C 000E                 42                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000105E  4E4F                      43                  TRAP    #15                 ;Display to console.
00001060                            44                  
00001060  43F9 00002560             45                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
00001066  103C 0002                 46                  MOVE.B  #2,D0               ;Read string from keyboard to A1
0000106A  4E4F                      47                  TRAP    #15                 ;Get the user input from console, length in D1
0000106C                            48  
0000106C  4280                      49                  CLR.L   D0                  ;Use D0 and D1 to process ascii to hex conversion.
0000106E  4281                      50                  CLR.L   D1                  ;Ensure both are clear of data.
00001070                            51                  
00001070  4EB9 00001EB2             52                  JSR     SR_AtoHLoop         ;Convert raw input ascii characters to hex
00001076  23C7 0000255C             53                  MOVE.L  D7,DATA_END_LOC     ;Store hex value user data location
0000107C                            54                  
0000107C  43F9 00002464             55                  LEA     MSG_LINEBREAK,A1    ;Append linefeed to the end of user input
00001082  103C 000E                 56                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001086  4E4F                      57                  TRAP    #15                 ;Display to console.
00001088                            58                  
00001088  4EB9 00001F08             59                  JSR     SR_CheckEnd         ;Reads DATA_END_LOC, Returns D7
0000108E  BE3C 0001                 60                  CMP.B   #1,D7               ;If D7 == 1, input was invalid, so start over.
00001092  67C0                      61                  BEQ     giEndAddrLoop
00001094                            62                  
00001094  6000 0002                 63                  BRA     FN_Cmd_Parser
00001098                            64  
00001098  41F9 0000113E             65  FN_Cmd_Parser   LEA     ROOT_JMP_TABLE,A0   ;Index into the table
0000109E  2479 00002558             66                  MOVEA.L DATA_START_LOC,A2   ;Point to the location of beginning test data
000010A4  2C79 0000255C             67                  MOVEA.L DATA_END_LOC,A6     ;Point to the location of ending test data
000010AA                            68                  
000010AA  0C39 001D 0000254A        69  cpLoop          CMPI.B  #29,LINECOUNT       ;Pause output if screen lines = 29
000010B2  6700 002A                 70                  BEQ     FN_PauseOutput
000010B6                            71                  
000010B6  4EB9 00001FCE             72  cpReturn        JSR     SR_PrintAddr
000010BC  5239 0000254A             73                  ADDQ.B  #1,LINECOUNT        ;Increment screen line counter
000010C2                            74                  
000010C2  4287                      75                  CLR.L   D7                  ;Clear existing opcode, if any exists
000010C4                            76                  
000010C4  3E12                      77                  MOVE.W  (A2),D7             ;Load next opcode
000010C6  103C 000C                 78                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
000010CA  E06F                      79                  LSR.W   D0,D7               ;Use shift to isolate bits for root branch
000010CC  CEFC 0006                 80                  MULU    #6,D7               ;Form offset to travel on jump table 
000010D0  4EB0 7000                 81                  JSR     0(A0,D7)            ;Jump to appropriate opcode, then return
000010D4                            82                  
000010D4  B4CE                      83                  CMP.W   A6,A2               ;Check if end of input machine code has been reached
000010D6  6C00 0022                 84                  BGE     Fn_Terminate        ;Exit the loop.
000010DA                            85                  
000010DA  544A                      86                  ADDA.W  #2,A2               ;Advance to next opcode
000010DC  60CC                      87                  BRA     cpLoop
000010DE                            88                  
000010DE  43F9 00002364             89  FN_PauseOutput  LEA     MSG_PAUSE,A1
000010E4  103C 000E                 90                  MOVE.B  #14,D0
000010E8  4E4F                      91                  TRAP    #15
000010EA  103C 0005                 92                  MOVE.B  #5,D0
000010EE  4E4F                      93                  TRAP    #15
000010F0  13FC 0000 0000254A        94                  MOVE.B  #0,LINECOUNT
000010F8  60BC                      95                  BRA     cpReturn
000010FA                            96  
000010FA  43F9 00002386             97  Fn_Terminate    LEA     MSG_RESTART,A1      ;Store the console message for output.
00001100  103C 000E                 98                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001104  4E4F                      99                  TRAP    #15                 ;Display to console.
00001106                           100                  
00001106  43F9 00002560            101                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
0000110C  103C 0002                102                  MOVE.B  #2,D0               ;Read string from keyboard to A1
00001110  4E4F                     103                  TRAP    #15                 ;Get the user input from console, length in D1
00001112                           104                  
00001112  43F9 00002464            105                  LEA     MSG_LINEBREAK,A1    ;Append linefeed to the end of user input
00001118  103C 000E                106                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000111C  4E4F                     107                  TRAP    #15                 ;Display to console.
0000111E                           108                  
0000111E  13FC 0005 0000254A       109                  MOVE.B  #5,LINECOUNT        ;Reset counter (question + prompts)
00001126                           110  
00001126  2E39 00002560            111                  MOVE.L  INPUT_BUFFER,D7         
0000112C  0C87 79657300            112                  CMPI.L  #$79657300,D7       ;Match for ASCII value of 'yes'
00001132  6700 FEE0                113                  BEQ     FN_InputLoop        ;Restart the program
00001136                           114  
00001136  6000 0002                115                  BRA     END_PROGRAM
0000113A                           116  
0000113A                           117  
0000113A                           118  
0000113A                           119  
0000113A                           120  
0000113A                           121  
0000113A                           122  
0000113A                           123  
0000113A                           124  
0000113A                           125  
0000113A                           126  
0000113A                           127  
0000113A                           128  
0000113A                           129  
0000113A                           130  
0000113A                           131  -------------------- end include --------------------
0000113A                           132  
0000113A  FFFF FFFF                133  END_PROGRAM     SIMHALT                     ;Halt the simulator
0000113E                           134  
0000113E                           135  *------------------------------------------------------------------------------
0000113E                           136  
0000113E                           137                  INCLUDE 'EasyRiders_Branch.X68'
0000113E  4EF9 0000119E            138  ROOT_JMP_TABLE  JMP     BRANCH_0            ;$0 - Bit Manipulation/MOVEP/Immediate
00001144  4EF9 00001980            139                  JMP     OP_MOVE_B           ;$1 - Move Byte
0000114A  4EF9 000019B2            140                  JMP     OP_MOVE_L           ;$2 - Move Long
00001150  4EF9 00001A08            141                  JMP     OP_MOVE_W           ;$3 - Move Word
00001156  4EF9 000011C8            142                  JMP     BRANCH_4            ;$4 - Miscellaneous
0000115C  4EF9 00001202            143                  JMP     BRANCH_5            ;$5 - ADDQ/SUBQ/Scc/DBcc/TRAPc c
00001162  4EF9 00001218            144                  JMP     BRANCH_6            ;$6 - Bcc/BSR/BRA
00001168  4EF9 00001AE0            145                  JMP     OP_MOVEQ            ;$7 - MOVEQ
0000116E  4EF9 0000123A            146                  JMP     BRANCH_8            ;$8 - OR/DIV/SBCD
00001174  4EF9 00001254            147                  JMP     BRANCH_9            ;$9 - SUB/SUBX
0000117A  4EF9 0000189E            148                  JMP     OP_INVALID          ;$A - Unassigned, Reserved
00001180  4EF9 00001278            149                  JMP     BRANCH_B            ;$B - CMP/EOR
00001186  4EF9 0000129A            150                  JMP     BRANCH_C            ;$C - AND/MUL/ABCD/EXG
0000118C  4EF9 000012D8            151                  JMP     BRANCH_D            ;$D - ADD/ADDX
00001192  4EF9 000012FC            152                  JMP     BRANCH_E            ;$E - Shift/Rotate/Bit Field
00001198  4EF9 00001380            153                  JMP     BRANCH_F            ;$F - Coproccessor and CPU 32 Extensions
0000119E                           154  
0000119E  4EB9 00001FB6            155  BRANCH_0        JSR     SR_Eval11to8        ;Reads A2, Returns D7
000011A4                           156  
000011A4  BE3C 0002                157                  CMP.B   #$2,D7
000011A8  6700 0450                158                  BEQ     OP_ANDI             ;$2
000011AC  BE3C 0004                159                  CMP.B   #$4,D7
000011B0  6700 0C38                160                  BEQ     OP_SUBI             ;$4
000011B4  BE3C 0006                161                  CMP.B   #$6,D7
000011B8  6700 02E8                162                  BEQ     OP_ADDI             ;$6
000011BC  BE3C 000C                163                  CMP.B   #$C,D7
000011C0  6700 05F0                164                  BEQ     OP_CMPI             ;$C
000011C4                           165  
000011C4  6000 06D8                166                  BRA     OP_INVALID          ;No matches found
000011C8                           167  
000011C8  4EB9 00001FB6            168  BRANCH_4        JSR     SR_Eval11to8        ;Reads A2, Returns D7
000011CE                           169                  
000011CE  BE3C 0002                170                  CMP.B   #$2,D7
000011D2  6700 0548                171                  BEQ     OP_CLR              ;$2
000011D6  BE3C 000E                172                  CMP.B   #$E,D7
000011DA  6700 01A8                173                  BEQ     BRANCH_4E           ;$E
000011DE                           174  
000011DE  4EB9 00001FAA            175                  JSR     SR_Eval11to6        ;Reads A2, Returns D7
000011E4  0207 002E                176                  ANDI.B  #%00101110,D7       ;Mask out bits where index = 0 for eval
000011E8                           177                  
000011E8  BE3C 0022                178                  CMP.B   #%00100010,D7
000011EC  6700 08E2                179                  BEQ     OP_MOVEM            ;%1x001x
000011F0                           180  
000011F0  4EB9 00001F9E            181                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
000011F6                           182                  
000011F6  BE3C 0007                183                  CMP.B   #%111,D7
000011FA  6700 0716                184                  BEQ     OP_LEA              ;%111
000011FE                           185  
000011FE  6000 069E                186                  BRA     OP_INVALID          ;No matches found
00001202                           187  
00001202  3E12                     188  BRANCH_5        MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001204                           189  
00001204  0807 0008                190                  BTST    #8,D7
00001208  6700 02E8                191                  BEQ     OP_ADDQ             ;Bit 8 = 0
0000120C  0807 0008                192                  BTST    #8,D7
00001210  6600 0C28                193                  BNE     OP_SUBQ             ;Bit 8 = 1
00001214                           194                  
00001214  6000 0688                195                  BRA     OP_INVALID          ;No matches found
00001218                           196  
00001218  4EB9 00001FB6            197  BRANCH_6        JSR     SR_Eval11to8        ;Reads A2, Returns D7
0000121E                           198                  
0000121E  BE3C 0004                199                  CMP.B   #$4,D7
00001222  6700 0446                200                  BEQ     OP_BCC              ;$4
00001226  BE3C 000E                201                  CMP.B   #$E,D7
0000122A  6700 04D0                202                  BEQ     OP_BGT              ;$E
0000122E  BE3C 000F                203                  CMP.B   #$F,D7
00001232  6700 04D8                204                  BEQ     OP_BLE              ;$F
00001236                           205                  
00001236  6000 0666                206                  BRA     OP_INVALID          ;No matches found
0000123A                           207  
0000123A  4EB9 00001F9E            208  BRANCH_8        JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001240                           209                  
00001240  BE3C 0003                210                  CMP.B   #%011,D7
00001244  6700 060A                211                  BEQ     OP_DIVU             ;%011
00001248  BE3C 0007                212                  CMP.B   #%111,D7
0000124C  6700 05B4                213                  BEQ     OP_DIVS             ;%111
00001250                           214                  
00001250  6000 064C                215                  BRA     OP_INVALID          ;No matches found
00001254                           216  
00001254  4EB9 00001F7A            217  BRANCH_9        JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000125A                           218  
0000125A  BE3C 0003                219                  CMP.B   #%11,D7
0000125E  6700 0B36                220                  BEQ     OP_SUBA             ;%11
00001262                           221  
00001262  4EB9 00001F92            222                  JSR     SR_Eval8to4         ;Reads A2, Returns D7
00001268  0207 0013                223                  ANDI.B  #%00010011,D7       ;Mask out bits where index = 0 for eval
0000126C                           224                  
0000126C  BE3C 0010                225                  CMP.B   #%00010000,D7
00001270  6700 062C                226                  BEQ     OP_INVALID          ;%1xx00 - Op not supported
00001274                           227                  
00001274  6000 0A90                228                  BRA     OP_SUB              ;All other combinations
00001278                           229  
00001278  4EB9 00001F9E            230  BRANCH_B        JSR     SR_Eval8to6         ;Reads A2, Returns D7
0000127E                           231  
0000127E  BE3C 0000                232                  CMP.B   #%000,D7
00001282  6700 04D8                233                  BEQ     OP_CMP              ;%000
00001286  BE3C 0001                234                  CMP.B   #%001,D7
0000128A  6700 04D0                235                  BEQ     OP_CMP              ;%001
0000128E  BE3C 0002                236                  CMP.B   #%010,D7
00001292  6700 04C8                237                  BEQ     OP_CMP              ;%010
00001296                           238                  
00001296  6000 0606                239                  BRA     OP_INVALID          ;No matches found
0000129A                           240  
0000129A  4EB9 00001F9E            241  BRANCH_C        JSR     SR_Eval8to6         ;Reads A2, Returns D7
000012A0                           242  
000012A0  BE3C 0003                243                  CMP.B   #%011,D7
000012A4  6700 08EE                244                  BEQ     OP_MULU             ;%011
000012A8  BE3C 0007                245                  CMP.B   #%111,D7
000012AC  6700 0898                246                  BEQ     OP_MULS             ;%111
000012B0                           247                  
000012B0  4EB9 00001F92            248                  JSR     SR_Eval8to4         ;Reads A2, Returns D7
000012B6  0207 001F                249                  ANDI.B  #%00011111,D7       ;Mask out bits where index = 0 for eval
000012BA                           250                  
000012BA  BE3C 0010                251                  CMP.B   #%00010000,D7
000012BE  6700 05DE                252                  BEQ     OP_INVALID          ;%10000 - Op not supported
000012C2                           253                  
000012C2  4EB9 00001F92            254                  JSR     SR_Eval8to4         ;Reads A2, Returns D7
000012C8  0207 0013                255                  ANDI.B  #%00010011,D7       ;Mask out bits where index = 0 for eval
000012CC                           256                  
000012CC  BE3C 0010                257                  CMP.B   #%00010000,D7
000012D0  6700 05CC                258                  BEQ     OP_INVALID          ;%1xx00 - Op not supported
000012D4                           259                  
000012D4  6000 0294                260                  BRA     OP_AND              ;All other combinations
000012D8                           261  
000012D8  4EB9 00001F92            262  BRANCH_D        JSR     SR_Eval8to4         ;Reads A2, Returns D7
000012DE  0207 0013                263                  ANDI.B  #%00010011,D7       ;Mask out bits where index = 0 for eval
000012E2                           264  
000012E2  BE3C 0010                265                  CMP.B   #%00010000,D7
000012E6  6700 05B6                266                  BEQ     OP_INVALID          ;%1xx00 - Op not supported
000012EA                           267                  
000012EA  4EB9 00001F7A            268                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000012F0                           269  
000012F0  BE3C 0003                270                  CMP.B   #%11,D7
000012F4  6700 0158                271                  BEQ     OP_ADDA             ;%11
000012F8                           272                  
000012F8  6000 00C4                273                  BRA     OP_ADD              ;All other combinations
000012FC                           274  
000012FC  4EB9 00001FAA            275  BRANCH_E        JSR     SR_Eval11to6        ;Reads A2, Returns D7
00001302  0207 003F                276                  ANDI.B  #%00111111,D7       ;Mask out bits where index = 0 for eval
00001306  BE3C 0003                277                  CMP.B   #%00000011,D7
0000130A  6700 034E                278                  BEQ     OP_ASR              ;%000011
0000130E  BE3C 000B                279                  CMP.B   #%00001011,D7
00001312  6700 065C                280                  BEQ     OP_LSR              ;%001011
00001316  BE3C 001B                281                  CMP.B   #%00011011,D7
0000131A  6700 08EA                282                  BEQ     OP_ROR              ;%011011
0000131E                           283  
0000131E  BE3C 0007                284                  CMP.B   #%00000111,D7
00001322  6700 0326                285                  BEQ     OP_ASL              ;%000111
00001326  BE3C 000F                286                  CMP.B   #%00001111,D7
0000132A  6700 0634                287                  BEQ     OP_LSL              ;%001111
0000132E  BE3C 001F                288                  CMP.B   #%00011111,D7
00001332  6700 08C2                289                  BEQ     OP_ROL              ;%011111
00001336                           290  
00001336  0207 003B                291                  ANDI.B  #%00111011,D7       ;Mask out bits where index = 0 for eval
0000133A                           292                  
0000133A  BE3C 0013                293                  CMP.B   #%00010011,D7
0000133E  6700 055E                294                  BEQ     OP_INVALID          ;%010x11
00001342                           295                  
00001342  4EB9 00001F86            296                  JSR     SR_Eval8to3         ;Reads A2, Returns D7
00001348  0207 0023                297                  ANDI.B  #%00100011,D7       ;Mask out bits where index = 0 for eval
0000134C                           298                  
0000134C  BE3C 0000                299                  CMP.B   #%00000000,D7
00001350  6700 0308                300                  BEQ     OP_ASR              ;%0xxx00
00001354  BE3C 0001                301                  CMP.B   #%00000001,D7
00001358  6700 0616                302                  BEQ     OP_LSR              ;%0xxx01
0000135C  BE3C 0003                303                  CMP.B   #%00000011,D7
00001360  6700 08A4                304                  BEQ     OP_ROR              ;%0xxx11
00001364  BE3C 0020                305                  CMP.B   #%00100000,D7
00001368  6700 02E0                306                  BEQ     OP_ASL              ;%1xxx00
0000136C  BE3C 0021                307                  CMP.B   #%00100001,D7
00001370  6700 05EE                308                  BEQ     OP_LSL              ;%1xxx01
00001374  BE3C 0023                309                  CMP.B   #%00100011,D7
00001378  6700 087C                310                  BEQ     OP_ROL              ;%1xxx11
0000137C                           311                  
0000137C  6000 0520                312                  BRA     OP_INVALID
00001380                           313  
00001380  6000 0980                314  BRANCH_F        BRA     OP_SIMHALT
00001384                           315  
00001384  4EB9 00001F6E            316  BRANCH_4E       JSR     SR_Eval7to4         ;Reads A2, Returns D7
0000138A                           317                  
0000138A  BE3C 0007                318                  CMP.B   #$7,D7
0000138E  6700 0014                319                  BEQ     BRANCH_4E7          ;$7
00001392                           320                  
00001392  4EB9 00001F7A            321                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001398                           322                  
00001398  BE3C 0002                323                  CMP.B   #%10,D7
0000139C  6700 0538                324                  BEQ     OP_JSR              ;%10
000013A0                           325                  
000013A0  6000 04FC                326                  BRA     OP_INVALID          ;No matches found
000013A4                           327              
000013A4  4EB9 00001F52            328  BRANCH_4E7      JSR     SR_Eval3to0         ;Reads A2, Returns D7
000013AA                           329  
000013AA  BE3C 0001                330                  CMP.B   #$1,D7
000013AE  6700 0832                331                  BEQ     OP_NOP              ;$1
000013B2  BE3C 0005                332                  CMP.B   #$5,D7
000013B6  6700 085E                333                  BEQ     OP_RTS              ;$5
000013BA                           334                  
000013BA  6000 04E2                335                  BRA     OP_INVALID          ;No matches found
000013BE                           336  
000013BE                           337  
000013BE                           338  
000013BE                           339  
000013BE                           340  
000013BE                           341  
000013BE                           342  
000013BE                           343  
000013BE                           344  
000013BE                           345  -------------------- end include --------------------
000013BE                           346                  INCLUDE 'EasyRiders_Opcodes.X68'
000013BE  43F9 00002467            347  OP_ADD          LEA     DISP_ADD,A1         ;Store the console message for output.
000013C4  103C 000E                348                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000013C8  4E4F                     349                  TRAP    #15                 ;Display to console.
000013CA                           350  
000013CA  4EB9 00001F7A            351                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000013D0                           352                  
000013D0  13FC 0005 00002549       353                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
000013D8  4EB9 0000205C            354                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000013DE                           355                  
000013DE  0812 0008                356                  BTST    #8,(A2)             
000013E2  6700 0006                357                  BEQ     opAddDnMode         ;Bit 8 = 0
000013E6                           358                  
000013E6  6000 0032                359                  BRA     opAddEAMode         ;Bit 8 = 1
000013EA                           360                  
000013EA  4EB9 00001F5E            361  opAddDnMode     JSR     SR_Eval5to3         ;Reads A2, Returns D7
000013F0  33C7 0000254C            362                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
000013F6                           363                  
000013F6  4EB9 00001F46            364                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000013FC  33C7 0000254E            365                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001402                           366                  
00001402  33FC 0000 00002550       367                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
0000140A                           368                  
0000140A  4EB9 00001FC2            369                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001410  33C7 00002552            370                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001416                           371                  
00001416  6000 002E                372                  BRA     opAddPrintEA
0000141A                           373  
0000141A  33FC 0000 0000254C       374  opAddEAMode     MOVE.W  #0,SRC_MODE         ;Force Dn src mode
00001422                           375                  
00001422  4EB9 00001FC2            376                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001428  33C7 0000254E            377                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
0000142E                           378                  
0000142E  4EB9 00001F5E            379                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001434  33C7 00002550            380                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
0000143A                           381                  
0000143A  4EB9 00001F46            382                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001440  33C7 00002552            383                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001446                           384  
00001446  4EB9 00001FE8            385  opAddPrintEA    JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
0000144C  4E75                     386                  RTS
0000144E                           387  
0000144E  43F9 0000246B            388  OP_ADDA         LEA     DISP_ADDA,A1        ;Store the console message for output.
00001454  103C 000E                389                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001458  4E4F                     390                  TRAP    #15                 ;Display to console.
0000145A                           391                  
0000145A  4EB9 00001F9E            392                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001460                           393  
00001460  13FC 0004 00002549       394                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001468  4EB9 0000207C            395                  JSR     SR_PrntSize3bit     ;Reads D7, Returns void
0000146E                           396                  
0000146E  4EB9 00001F5E            397                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001474  33C7 0000254C            398                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
0000147A                           399                  
0000147A  4EB9 00001F46            400                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001480  33C7 0000254E            401                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001486                           402                  
00001486  33FC 0001 00002550       403                  MOVE.W  #1,DEST_MODE        ;Force An dest mode
0000148E                           404                  
0000148E  4EB9 00001FC2            405                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001494  33C7 00002552            406                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000149A                           407                  
0000149A  4EB9 00001FE8            408                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000014A0  4E75                     409                  RTS
000014A2                           410  
000014A2  43F9 00002470            411  OP_ADDI         LEA     DISP_ADDI,A1        ;Store the console message for output.
000014A8  103C 000E                412                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000014AC  4E4F                     413                  TRAP    #15                 ;Display to console.
000014AE                           414                  
000014AE  4EB9 00001F7A            415                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000014B4                           416                  
000014B4  13FC 0004 00002549       417                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA              
000014BC  4EB9 0000205C            418                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000014C2                           419                  
000014C2  33FC 0007 0000254C       420                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
000014CA  33FC 0004 0000254E       421                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
000014D2                           422                  
000014D2  4EB9 00001F5E            423                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000014D8  33C7 00002550            424                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
000014DE                           425                  
000014DE  4EB9 00001F46            426                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000014E4  33C7 00002552            427                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000014EA                           428                  
000014EA  4EB9 00001FE8            429                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000014F0  4E75                     430                  RTS
000014F2                           431  
000014F2  43F9 00002475            432  OP_ADDQ         LEA     DISP_ADDQ,A1        ;Store the console message for output.
000014F8  103C 000E                433                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000014FC  4E4F                     434                  TRAP    #15                 ;Display to console.
000014FE                           435  
000014FE  4EB9 00001F7A            436                  JSR     SR_Eval7to6            ;Reads A2, Returns D7
00001504                           437                  
00001504  13FC 0004 00002549       438                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
0000150C  4EB9 0000205C            439                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001512                           440  
00001512  43F9 0000250E            441  opAqCount       LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001518  103C 000E                442                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000151C  4E4F                     443                  TRAP    #15                 ;Display to console.
0000151E                           444                  
0000151E  4EB9 00001FC2            445                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001524                           446                  
00001524  4281                     447                  CLR.L   D1                  ;Ensure output register is clear
00001526                           448                  
00001526  3207                     449                  MOVE.W  D7,D1               ;Copy bits to D1 for console output.
00001528                           450                  
00001528  B23C 0000                451                  CMP.B   #0,D1
0000152C  6700 002E                452                  BEQ     opAqIfZero          ;#0 - value of zero represents a count of eight
00001530                           453  
00001530  103C 0003                454  opAqDispCnt     MOVE.B  #3,D0               ;Will display signed number from D1
00001534  4E4F                     455                  TRAP    #15                 ;Display to console.
00001536                           456                  
00001536  43F9 0000251C            457                  LEA     DISP_COMMA,A1       ;Store the console message for output.
0000153C  103C 000E                458                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001540  4E4F                     459                  TRAP    #15                 ;Display to console.
00001542                           460                  
00001542  4EB9 00001F5E            461                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001548  3407                     462                  MOVE.W  D7,D2               ;Copy bits to decode dest mode
0000154A                           463                  
0000154A  4EB9 00001F46            464                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001550  3607                     465                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00001552                           466                  
00001552  4EB9 00002132            467                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001558                           468  
00001558  6000 0008                469                  BRA     opAqDone
0000155C                           470  
0000155C  323C 0008                471  opAqIfZero      MOVE.W  #8,D1               ;#0 - value of zero represents a count of eight
00001560  60CE                     472                  BRA     OpAqDispCnt
00001562                           473  
00001562  4EB9 000020DC            474  opAqDone        JSR     SR_PrintCRLF        ;Returns console output.
00001568  4E75                     475                  RTS
0000156A                           476  
0000156A  43F9 0000247A            477  OP_AND          LEA     DISP_AND,A1         ;Store the console message for output.
00001570  103C 000E                478                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001574  4E4F                     479                  TRAP    #15                 ;Display to console.
00001576                           480                  
00001576  4EB9 00001F7A            481                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000157C                           482                  
0000157C  13FC 0005 00002549       483                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001584  4EB9 0000205C            484                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
0000158A                           485                  
0000158A  0812 0008                486                  BTST    #8,(A2)             
0000158E  6700 0006                487                  BEQ     opAndDnMode         ;Bit 8 = 0
00001592                           488                  
00001592  6000 0032                489                  BRA     opAndEAMode         ;Bit 8 = 1
00001596                           490                  
00001596  4EB9 00001F5E            491  opAndDnMode     JSR     SR_Eval5to3         ;Reads A2, Returns D7
0000159C  33C7 0000254C            492                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
000015A2                           493                  
000015A2  4EB9 00001F46            494                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000015A8  33C7 0000254E            495                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000015AE                           496                  
000015AE  33FC 0000 00002550       497                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
000015B6                           498                  
000015B6  4EB9 00001FC2            499                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000015BC  33C7 00002552            500                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000015C2                           501                  
000015C2  6000 002E                502                  BRA     opAndPrintEA
000015C6                           503  
000015C6  33FC 0000 0000254C       504  opAndEAMode     MOVE.W  #0,SRC_MODE         ;Force Dn src mode
000015CE                           505                  
000015CE  4EB9 00001FC2            506                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000015D4  33C7 0000254E            507                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000015DA                           508                  
000015DA  4EB9 00001F5E            509                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000015E0  33C7 00002550            510                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
000015E6                           511                  
000015E6  4EB9 00001F46            512                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000015EC  33C7 00002552            513                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000015F2                           514  
000015F2  4EB9 00001FE8            515  opAndPrintEA    JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000015F8  4E75                     516                  RTS
000015FA                           517  
000015FA  43F9 0000247E            518  OP_ANDI         LEA     DISP_ANDI,A1        ;Store the console message for output.
00001600  103C 000E                519                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001604  4E4F                     520                  TRAP    #15                 ;Display to console.
00001606                           521                  
00001606  4EB9 00001F7A            522                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000160C                           523                  
0000160C  13FC 0004 00002549       524                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001614  4EB9 0000205C            525                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
0000161A                           526                  
0000161A  33FC 0007 0000254C       527                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
00001622  33FC 0004 0000254E       528                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
0000162A                           529                  
0000162A  4EB9 00001F5E            530                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001630  33C7 00002550            531                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
00001636                           532                  
00001636  4EB9 00001F46            533                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
0000163C  33C7 00002552            534                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001642                           535                  
00001642  4EB9 00001FE8            536                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001648  4E75                     537                  RTS
0000164A                           538  
0000164A  43F9 00002483            539  OP_ASL          LEA     DISP_ASL,A1         ;Store the console message for output.
00001650  103C 000E                540                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001654  4E4F                     541                  TRAP    #15                 ;Display to console.
00001656                           542                  
00001656  6000 05D2                543                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
0000165A                           544                  
0000165A  43F9 00002487            545  OP_ASR          LEA     DISP_ASR,A1         ;Store the console message for output.
00001660  103C 000E                546                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001664  4E4F                     547                  TRAP    #15                 ;Display to console.
00001666                           548                  
00001666  6000 05C2                549                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
0000166A                           550  
0000166A  43F9 0000248B            551  OP_BCC          LEA     DISP_BCC,A1         ;Store the console message for output.
00001670  103C 000E                552                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001674  4E4F                     553                  TRAP    #15                 ;Display to console.
00001676                           554                  
00001676  6000 0002                555                  BRA     OP_BccGroup         ;Grouping for BCC/BGT/BLE
0000167A                           556                  
0000167A  3E12                     557  OP_BccGroup     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
0000167C                           558                  
0000167C  BE3C 0000                559                  CMP.B   #$00,D7
00001680  6700 003A                560                  BEQ     bg16bit             ;Evaluate as 16-bit Displacement
00001684                           561                  
00001684  BE3C 00FF                562                  CMP.B   #$FF,D7
00001688  6700 0052                563                  BEQ     bg32bit             ;Evaluate as 32-bit Displacement
0000168C                           564                  
0000168C  43F9 0000251E            565                  LEA     DISP_SIZE_B,A1      ;Store the console message for output.
00001692  103C 000E                566                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001696  4E4F                     567                  TRAP    #15                 ;Display to console.
00001698                           568                  
00001698  13FC 0005 00002549       569                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
000016A0  4EB9 000020EA            570                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000016A6                           571                  
000016A6  3A12                     572                  MOVE.W  (A2),D5             ;Reload full opcode for evaluation
000016A8  4287                     573                  CLR.L   D7
000016AA  1E05                     574                  MOVE.B  D5,D7               ;Evaluate last byte only for SR_PrintHex
000016AC                           575                  
000016AC  7C02                     576                  MOVE.L  #2,D6               ;Number of characters to display.
000016AE  4EB9 00002026            577                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
000016B4                           578                  
000016B4  4EB9 000020DC            579  bgFinish        JSR     SR_PrintCRLF
000016BA  4E75                     580                  RTS
000016BC                           581  
000016BC  13FC 0007 00002549       582  bg16bit         MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
000016C4  4EB9 000020EA            583                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000016CA                           584  
000016CA  264A                     585                  MOVEA.L A2,A3               ;Copy the current instruction pointer location
000016CC                           586                  
000016CC  544B                     587                  ADDA.W  #2,A3               ;The next word contains the absolute data.
000016CE                           588                  
000016CE  3E13                     589                  MOVE.W  (A3),D7             ;Prepare to print the data.
000016D0  7C04                     590                  MOVE.L  #4,D6               ;Number of characters to display
000016D2  4EB9 00002026            591                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
000016D8                           592                  
000016D8  544A                     593                  ADDA.W  #2,A2               ;Advance the instruction pointer.
000016DA                           594                  
000016DA  60D8                     595                  BRA     bgFinish
000016DC                           596  
000016DC  13FC 0007 00002549       597  bg32bit         MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
000016E4  4EB9 000020EA            598                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000016EA                           599  
000016EA  264A                     600                  MOVEA.L A2,A3               ;Copy the current instruction pointer location
000016EC                           601                  
000016EC  544B                     602                  ADDA.W  #2,A3               ;The next word contains the absolute data.
000016EE                           603                  
000016EE  3E13                     604                  MOVE.W  (A3),D7             ;Prepare to print the data.
000016F0  7C08                     605                  MOVE.L  #8,D6               ;Number of characters to display
000016F2  4EB9 00002026            606                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
000016F8                           607                  
000016F8  584A                     608                  ADDA.W  #4,A2               ;Advance the instruction pointer.
000016FA                           609  
000016FA  60B8                     610                  BRA     bgFinish
000016FC                           611  
000016FC  43F9 00002494            612  OP_BGT          LEA     DISP_BGT,A1         ;Store the console message for output.
00001702  103C 000E                613                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001706  4E4F                     614                  TRAP    #15                 ;Display to console.
00001708                           615                  
00001708  6000 FF70                616                  BRA     OP_BccGroup         ;Grouping for BCC/BGT/BLE
0000170C                           617  
0000170C  43F9 00002498            618  OP_BLE          LEA     DISP_BLE,A1         ;Store the console message for output.
00001712  103C 000E                619                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001716  4E4F                     620                  TRAP    #15                 ;Display to console.
00001718                           621                  
00001718  6000 FF60                622                  BRA     OP_BccGroup         ;Grouping for BCC/BGT/BLE
0000171C                           623  
0000171C  43F9 0000249C            624  OP_CLR          LEA     DISP_CLR,A1         ;Store the console message for output.
00001722  103C 000E                625                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001726  4E4F                     626                  TRAP    #15                 ;Display to console.
00001728                           627                  
00001728  4EB9 00001F7A            628                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000172E  1807                     629                  MOVE.B  D7,D4               ;Store size for EA decoding
00001730                           630                  
00001730  13FC 0005 00002549       631                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001738  4EB9 0000205C            632                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
0000173E                           633                  
0000173E  4EB9 00001F5E            634                  JSR     SR_Eval5to3         ;Returns op mode in D7
00001744  1407                     635                  MOVE.B  D7,D2
00001746                           636                  
00001746  4EB9 00001F46            637                  JSR     SR_Eval2to0         ;Returns op register in D7
0000174C  1607                     638                  MOVE.B  D7,D3
0000174E                           639                  
0000174E  4EB9 00002132            640                  JSR     EA_Decode_EA        ;Prints EA information
00001754                           641                  
00001754  4EB9 000020DC            642                  JSR     SR_PrintCRLF
0000175A  4E75                     643                  RTS
0000175C                           644  
0000175C  43F9 000024A0            645  OP_CMP          LEA     DISP_CMP,A1         ;Store the console message for output.
00001762  103C 000E                646                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001766  4E4F                     647                  TRAP    #15                 ;Display to console.
00001768                           648                  
00001768  4EB9 00001F7A            649                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000176E  1807                     650                  MOVE.B  D7,D4               ;Store size for EA decoding
00001770                           651                  
00001770  13FC 0005 00002549       652                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001778  4EB9 0000205C            653                  JSR     SR_PrntSize2bit
0000177E                           654                  
0000177E  4EB9 00001F5E            655                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001784  33C7 0000254C            656                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
0000178A                           657                  
0000178A  4EB9 00001F46            658                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001790  33C7 0000254E            659                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001796                           660                  
00001796  33FC 0000 00002550       661                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
0000179E                           662                  
0000179E  4EB9 00001FC2            663                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000017A4  33C7 00002552            664                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000017AA                           665  
000017AA  4EB9 00001FE8            666                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000017B0  4E75                     667                  RTS
000017B2                           668                  
000017B2  43F9 000024A4            669  OP_CMPI         LEA     DISP_CMPI,A1        ;Store the console message for output.
000017B8  103C 000E                670                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000017BC  4E4F                     671                  TRAP    #15                 ;Display to console.
000017BE                           672                  
000017BE  4EB9 00001F7A            673                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000017C4                           674                  
000017C4  13FC 0004 00002549       675                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA              
000017CC  4EB9 0000205C            676                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000017D2                           677                  
000017D2  33FC 0007 0000254C       678                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
000017DA  33FC 0004 0000254E       679                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
000017E2                           680                  
000017E2  4EB9 00001F5E            681                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000017E8  33C7 00002550            682                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
000017EE                           683                  
000017EE  4EB9 00001F46            684                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000017F4  33C7 00002552            685                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000017FA                           686                  
000017FA  4EB9 00001FE8            687                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001800  4E75                     688                  RTS
00001802                           689  
00001802  43F9 000024A9            690  OP_DIVS         LEA     DISP_DIVS,A1        ;Store the console message for output.
00001808  103C 000E                691                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000180C  4E4F                     692                  TRAP    #15                 ;Display to console.
0000180E                           693  
0000180E  13FC 0006 00002549       694                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001816  4EB9 000020EA            695                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
0000181C                           696  
0000181C  4EB9 00001F5E            697                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001822  33C7 0000254C            698                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001828                           699                  
00001828  4EB9 00001F46            700                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
0000182E  33C7 0000254E            701                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001834                           702                  
00001834  4EB9 00001FC2            703                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
0000183A  33FC 0000 00002550       704                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001842  33C7 00002552            705                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001848                           706                  
00001848  4EB9 00001FE8            707                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
0000184E  4E75                     708                  RTS
00001850                           709  
00001850  43F9 000024AE            710  OP_DIVU         LEA     DISP_DIVU,A1        ;Store the console message for output.
00001856  103C 000E                711                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000185A  4E4F                     712                  TRAP    #15                 ;Display to console.
0000185C                           713  
0000185C  13FC 0006 00002549       714                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001864  4EB9 000020EA            715                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
0000186A                           716  
0000186A  4EB9 00001F5E            717                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001870  33C7 0000254C            718                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001876                           719                  
00001876  4EB9 00001F46            720                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
0000187C  33C7 0000254E            721                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001882                           722                  
00001882  4EB9 00001FC2            723                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001888  33FC 0000 00002550       724                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001890  33C7 00002552            725                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001896                           726                  
00001896  4EB9 00001FE8            727                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
0000189C  4E75                     728                  RTS
0000189E                           729  
0000189E  43F9 000024B3            730  OP_INVALID      LEA     DISP_INVALID,A1     ;Store the console message for output.
000018A4  103C 000E                731                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000018A8  4E4F                     732                  TRAP    #15                 ;Display to console.
000018AA                           733                  
000018AA  13FC 0006 00002549       734                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
000018B2  4EB9 000020EA            735                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000018B8                           736                  
000018B8  43F9 00002510            737                  LEA     DISP_DOLLAR,A1      ;Store the console message for output.
000018BE  103C 000E                738                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000018C2  4E4F                     739                  TRAP    #15                 ;Display to console.
000018C4                           740                  
000018C4  3E12                     741                  MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000018C6  7C04                     742                  MOVE.L  #4,D6               ;Number of characters to display
000018C8  4EB9 00002026            743                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
000018CE                           744                  
000018CE  4EB9 000020DC            745                  JSR     SR_PrintCRLF        ;Returns console output.
000018D4  4E75                     746                  RTS
000018D6                           747  
000018D6  43F9 000024B8            748  OP_JSR          LEA     DISP_JSR,A1
000018DC  103C 000E                749                  MOVE.B  #14,D0
000018E0  4E4F                     750                  TRAP    #15
000018E2                           751                  
000018E2  13FC 0007 00002549       752                  MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
000018EA  4EB9 000020EA            753                  JSR     SR_PrintTab
000018F0                           754                  
000018F0  4EB9 00001F5E            755                  JSR     SR_Eval5to3
000018F6  1407                     756                  MOVE.B  D7,D2
000018F8                           757                  
000018F8  4EB9 00001F46            758                  JSR     SR_Eval2to0
000018FE  1607                     759                  MOVE.B  D7,D3
00001900                           760                  
00001900  183C 001C                761                  MOVE.B  #28,D4
00001904                           762                  
00001904  4EB9 00002132            763                  JSR     EA_Decode_EA
0000190A                           764                  
0000190A  4EB9 000020DC            765                  JSR     SR_PrintCRLF
00001910  4E75                     766                  RTS
00001912                           767  
00001912  43F9 000024BC            768  OP_LEA          LEA     DISP_LEA,A1         ;Store the console message for output.
00001918  103C 000E                769                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000191C  4E4F                     770                  TRAP    #15                 ;Display to console.
0000191E                           771                  
0000191E  13FC 0007 00002549       772                  MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
00001926  4EB9 000020EA            773                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
0000192C                           774  
0000192C  4EB9 00001F5E            775                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001932  33C7 0000254C            776                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001938                           777                  
00001938  4EB9 00001F46            778                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
0000193E  33C7 0000254E            779                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001944                           780                  
00001944  4EB9 00001FC2            781                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
0000194A  33FC 0001 00002550       782                  MOVE.W  #1,DEST_MODE        ;Force An dest mode
00001952  33C7 00002552            783                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001958                           784                  
00001958  4EB9 00001FE8            785                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
0000195E  4E75                     786                  RTS
00001960                           787  
00001960  43F9 000024C0            788  OP_LSL          LEA     DISP_LSL,A1         ;Store the console message for output.
00001966  103C 000E                789                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000196A  4E4F                     790                  TRAP    #15                 ;Display to console.
0000196C                           791                  
0000196C  6000 02BC                792                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
00001970                           793  
00001970  43F9 000024C4            794  OP_LSR          LEA     DISP_LSR,A1         ;Store the console message for output.
00001976  103C 000E                795                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000197A  4E4F                     796                  TRAP    #15                 ;Display to console.
0000197C                           797                  
0000197C  6000 02AC                798                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
00001980                           799  
00001980  43F9 000024C8            800  OP_MOVE_B       LEA     DISP_MOVE,A1           ;
00001986  103C 000E                801                  MOVE.B  #14,D0              ;
0000198A  4E4F                     802                  TRAP    #15
0000198C                           803              
0000198C  43F9 0000251E            804                  LEA     DISP_SIZE_B,A1
00001992  103C 000E                805                  MOVE.B  #14,D0
00001996  4E4F                     806                  TRAP    #15
00001998                           807                  
00001998  13FC 0000 00002554       808                  MOVE.B  #0,OP_SIZE               *Store size for EA decode
000019A0                           809                  
000019A0  13FC 0004 00002549       810                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
000019A8  4EB9 000020EA            811                  JSR     SR_PrintTab
000019AE                           812                                       
000019AE  6000 00AE                813                  BRA     MOVE_Basic
000019B2                           814                  
000019B2                           815      
000019B2  43F9 000024C8            816  OP_MOVE_L       LEA     DISP_MOVE,A1
000019B8  103C 000E                817                  MOVE.B  #14,D0
000019BC  4E4F                     818                  TRAP    #15
000019BE                           819                  
000019BE  13FC 0004 00002549       820                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
000019C6                           821                  
000019C6  4EB9 00001F9E            822                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
000019CC                           823                  
000019CC  BE7C 0001                824                  CMP     #%001,D7
000019D0  6700 0020                825                  BEQ     mlMOVEA             ;%001
000019D4                           826                  
000019D4  43F9 00002521            827  mlReturn        LEA     DISP_SIZE_L,A1
000019DA  103C 000E                828                  MOVE.B  #14,D0
000019DE  4E4F                     829                  TRAP    #15
000019E0                           830                  
000019E0  13FC 0002 00002554       831                  MOVE.B  #2,OP_SIZE              *Store size for EA decode  
000019E8                           832  
000019E8  4EB9 000020EA            833                  JSR     SR_PrintTab     
000019EE                           834                  
000019EE  6000 006E                835                  BRA     MOVE_Basic
000019F2                           836                  
000019F2  43F9 00002527            837  mlMOVEA         LEA     DISP_MOVE_A,A1      ;Store the console message for output.
000019F8  103C 000E                838                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000019FC  4E4F                     839                  TRAP    #15                 ;Display to console.
000019FE                           840                  
000019FE  13FC 0003 00002549       841                  MOVE.B  #3,TAB_LENGTH       ;Print spaces between opcode name and EA
00001A06                           842                  
00001A06  60CC                     843                  BRA     mlReturn
00001A08                           844  
00001A08  43F9 000024C8            845  OP_MOVE_W       LEA     DISP_MOVE,A1
00001A0E  103C 000E                846                  MOVE.B  #14,D0
00001A12  4E4F                     847                  TRAP    #15
00001A14                           848  
00001A14  13FC 0004 00002549       849                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001A1C                           850  
00001A1C  4EB9 00001F9E            851                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001A22                           852                  
00001A22  BE7C 0001                853                  CMP     #%001,D7
00001A26  6700 0020                854  mwReturn        BEQ     mwMOVEA             ;%001
00001A2A                           855  
00001A2A  43F9 00002524            856                  LEA     DISP_SIZE_W,A1
00001A30  103C 000E                857                  MOVE.B  #14,D0
00001A34  4E4F                     858                  TRAP    #15
00001A36                           859                  
00001A36  13FC 0001 00002554       860                  MOVE.B  #1,OP_SIZE               *Store size for EA decode
00001A3E                           861                  
00001A3E  4EB9 000020EA            862                  JSR     SR_PrintTab
00001A44                           863                  
00001A44  6000 0018                864                  BRA     MOVE_Basic
00001A48                           865  
00001A48  43F9 00002527            866  mwMOVEA         LEA     DISP_MOVE_A,A1      ;Store the console message for output.
00001A4E  103C 000E                867                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001A52  4E4F                     868                  TRAP    #15                 ;Display to console.
00001A54                           869                  
00001A54  13FC 0003 00002549       870                  MOVE.B  #3,TAB_LENGTH       ;Print spaces between opcode name and EA
00001A5C                           871                  
00001A5C  60C8                     872                  BRA     mwReturn
00001A5E                           873  
00001A5E  33D2 00002556            874  MOVE_Basic      MOVE.W  (A2),CURRENT_OP
00001A64  183C 000D                875                  MOVE.B  #13,D4
00001A68                           876              
00001A68  3439 00002556            877                  MOVE.W  CURRENT_OP,D2
00001A6E  1A3C 000A                878                  MOVE.B  #10,D5
00001A72  EB6A                     879                  LSL.W   D5,D2
00001A74  E86A                     880                  LSR.W   D4,D2
00001A76                           881              
00001A76  3639 00002556            882                  MOVE.W  CURRENT_OP,D3
00001A7C  1A3C 000D                883                  MOVE.B  #13,D5
00001A80  EB6B                     884                  LSL.W   D5,D3
00001A82  E86B                     885                  LSR.W   D4,D3
00001A84                           886              
00001A84  4EB9 00002132            887                  JSR     EA_Decode_EA
00001A8A                           888  
00001A8A  183C 000D                889                  MOVE.B  #13,D4
00001A8E                           890                  
00001A8E  43F9 0000251C            891                  LEA     DISP_COMMA,A1
00001A94  103C 000E                892                  MOVE.B  #14,D0
00001A98  4E4F                     893                  TRAP    #15
00001A9A                           894              
00001A9A  3439 00002556            895                  MOVE.W  CURRENT_OP,D2
00001AA0  1A3C 0007                896                  MOVE.B  #7,D5
00001AA4  EB6A                     897                  LSL.W   D5,D2
00001AA6  E86A                     898                  LSR.W   D4,D2
00001AA8                           899              
00001AA8  3639 00002556            900                  MOVE.W  CURRENT_OP,D3
00001AAE  1A3C 0004                901                  MOVE.B  #4,D5
00001AB2  EB6B                     902                  LSL.W   D5,D3
00001AB4  E86B                     903                  LSR.W   D4,D3
00001AB6                           904  
00001AB6  4EB9 00002132            905                  JSR     EA_Decode_EA
00001ABC                           906              
00001ABC  4EB9 000020DC            907                  JSR     SR_PrintCRLF
00001AC2                           908                  
00001AC2  4282                     909                  CLR.L   D2                  ;Clean up
00001AC4  4283                     910                  CLR.L   D3
00001AC6  4284                     911                  CLR.L   D4
00001AC8  4285                     912                  CLR.L   D5
00001ACA  4286                     913                  CLR.L   D6
00001ACC  4287                     914                  CLR.L   D7
00001ACE                           915                  
00001ACE  4E75                     916                  RTS
00001AD0                           917  
00001AD0  544A                     918  OP_MOVEM        ADDA.W  #2,A2               ;Need to advance input for testing
00001AD2  43F9 000024CD            919                  LEA     DISP_MOVEM,A1
00001AD8  103C 000D                920                  MOVE.B  #13,D0
00001ADC  4E4F                     921                  TRAP    #15
00001ADE  4E75                     922                  RTS
00001AE0                           923  
00001AE0  43F9 000024D3            924  OP_MOVEQ        LEA     DISP_MOVEQ,A1       ;Store the console message for output.
00001AE6  103C 000E                925                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001AEA  4E4F                     926                  TRAP    #15                 ;Display to console.
00001AEC                           927  
00001AEC  13FC 0005 00002549       928                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001AF4  4EB9 000020EA            929                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001AFA                           930                  
00001AFA  43F9 0000250E            931                  LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001B00  103C 000E                932                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001B04  4E4F                     933                  TRAP    #15                 ;Display to console.
00001B06                           934                  
00001B06  43F9 00002510            935                  LEA     DISP_DOLLAR,A1      ;Store the console message for output.
00001B0C  103C 000E                936                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001B10  4E4F                     937                  TRAP    #15                 ;Display to console.
00001B12                           938  
00001B12  3A12                     939                  MOVE.W  (A2),D5             ;Reload full opcode for evaluation
00001B14  4287                     940                  CLR.L   D7
00001B16  1E05                     941                  MOVE.B  D5,D7               ;Evaluate last byte only for SR_PrintHex
00001B18                           942                  
00001B18  7C02                     943                  MOVE.L  #2,D6               ;Number of characters to display.
00001B1A  4EB9 00002026            944                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
00001B20                           945                  
00001B20  43F9 0000251C            946                  LEA     DISP_COMMA,A1       ;Store the console message for output.
00001B26  103C 000E                947                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001B2A  4E4F                     948                  TRAP    #15                 ;Display to console.
00001B2C                           949  
00001B2C  343C 0000                950                  MOVE.W  #0,D2               ;Force Dn dest mode
00001B30                           951                  
00001B30  4EB9 00001FC2            952                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001B36  3607                     953                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00001B38                           954                  
00001B38  4EB9 00002132            955                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns console output.
00001B3E                           956                  
00001B3E  4EB9 000020DC            957                  JSR     SR_PrintCRLF        ;Returns console output.
00001B44  4E75                     958                  RTS
00001B46                           959  
00001B46  43F9 000024D9            960  OP_MULS         LEA     DISP_MULS,A1        ;Store the console message for output.
00001B4C  103C 000E                961                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001B50  4E4F                     962                  TRAP    #15                 ;Display to console.
00001B52                           963  
00001B52  13FC 0006 00002549       964                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001B5A  4EB9 000020EA            965                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001B60                           966  
00001B60  4EB9 00001F5E            967                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001B66  33C7 0000254C            968                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001B6C                           969                  
00001B6C  4EB9 00001F46            970                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001B72  33C7 0000254E            971                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001B78                           972                  
00001B78  4EB9 00001FC2            973                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001B7E  33FC 0000 00002550       974                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001B86  33C7 00002552            975                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001B8C                           976                  
00001B8C  4EB9 00001FE8            977                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001B92  4E75                     978                  RTS
00001B94                           979  
00001B94  43F9 000024DE            980  OP_MULU         LEA     DISP_MULU,A1        ;Store the console message for output.
00001B9A  103C 000E                981                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001B9E  4E4F                     982                  TRAP    #15                 ;Display to console.
00001BA0                           983  
00001BA0  13FC 0006 00002549       984                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001BA8  4EB9 000020EA            985                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001BAE                           986  
00001BAE  4EB9 00001F5E            987                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001BB4  33C7 0000254C            988                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001BBA                           989                  
00001BBA  4EB9 00001F46            990                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001BC0  33C7 0000254E            991                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001BC6                           992                  
00001BC6  4EB9 00001FC2            993                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001BCC  33FC 0000 00002550       994                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001BD4  33C7 00002552            995                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001BDA                           996                  
00001BDA  4EB9 00001FE8            997                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001BE0  4E75                     998                  RTS
00001BE2                           999  
00001BE2  43F9 000024E3           1000  OP_NOP          LEA     DISP_NOP,A1         ;Store the console message for output.
00001BE8  103C 000E               1001                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001BEC  4E4F                    1002                  TRAP    #15                 ;Display to console.
00001BEE                          1003                  
00001BEE  4EB9 000020DC           1004                  JSR     SR_PrintCRLF        ;Returns console output.
00001BF4  4E75                    1005                  RTS
00001BF6                          1006  
00001BF6  43F9 000024E7           1007  OP_ROL          LEA     DISP_ROL,A1         ;Store the console message for output.
00001BFC  103C 000E               1008                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001C00  4E4F                    1009                  TRAP    #15                 ;Display to console.
00001C02                          1010                  
00001C02  6000 0026               1011                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
00001C06                          1012  
00001C06  43F9 000024EB           1013  OP_ROR          LEA     DISP_ROR,A1         ;Store the console message for output.
00001C0C  103C 000E               1014                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001C10  4E4F                    1015                  TRAP    #15                 ;Display to console.
00001C12                          1016                  
00001C12  6000 0016               1017                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
00001C16                          1018  
00001C16  43F9 000024EF           1019  OP_RTS          LEA     DISP_RTS,A1         ;Store the console message for output.
00001C1C  103C 000E               1020                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001C20  4E4F                    1021                  TRAP    #15                 ;Display to console.
00001C22                          1022                  
00001C22  4EB9 000020DC           1023                  JSR     SR_PrintCRLF        ;Returns console output.
00001C28  4E75                    1024                  RTS
00001C2A                          1025  
00001C2A  4EB9 00001F7A           1026  OP_ShiftRot     JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001C30                          1027  
00001C30  BE3C 0003               1028                  CMP.B   #%11,D7
00001C34  6700 001E               1029                  BEQ     opShRoMemory        ;%11
00001C38                          1030                  
00001C38  13FC 0005 00002549      1031                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001C40  4EB9 0000205C           1032                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001C46                          1033                  
00001C46  3E12                    1034                  MOVE.W  (A2),D7  * not sure why I can't just bittest out of (A2) directly
00001C48  0807 0005               1035                  BTST    #5,D7             
00001C4C  6700 0030               1036                  BEQ     opShRoCount         ;Bit 5 = 0
00001C50                          1037                  
00001C50  6000 0078               1038                  BRA     opShRoRegister      ;Bit 5 = 1
00001C54                          1039  
00001C54  7E01                    1040  opShRoMemory    MOVE.L  #1,D7               ;Force size = .W
00001C56  13FC 0005 00002549      1041                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001C5E  4EB9 0000205C           1042                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001C64                          1043  
00001C64  4EB9 00001F5E           1044                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001C6A  3407                    1045                  MOVE.W  D7,D2               ;Copy bits to decode EA mode
00001C6C                          1046                  
00001C6C  4EB9 00001F46           1047                  JSR     SR_Eval2to0         ;Read A2, Return D7
00001C72  3607                    1048                  MOVE.W  D7,D3               ;Copy bits to decode EA register
00001C74                          1049                  
00001C74  4EB9 00002132           1050                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001C7A                          1051  
00001C7A  6000 007E               1052                  BRA     opShRoDone
00001C7E                          1053  
00001C7E  43F9 0000250E           1054  opShRoCount     LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001C84  103C 000E               1055                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001C88  4E4F                    1056                  TRAP    #15                 ;Display to console.
00001C8A                          1057                  
00001C8A  4EB9 00001FC2           1058                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001C90                          1059                  
00001C90  4281                    1060                  CLR.L   D1                  ;Ensure output register is clear
00001C92                          1061                  
00001C92  3207                    1062                  MOVE.W  D7,D1               ;Copy bits to D1 for console output.
00001C94                          1063                  
00001C94  B23C 0000               1064                  CMP.B   #0,D1
00001C98  6700 002A               1065                  BEQ     opShRoIfZero
00001C9C                          1066                  
00001C9C  103C 0003               1067  opShRoDispCnt   MOVE.B  #3,D0               ;Will display signed number from D1
00001CA0  4E4F                    1068                  TRAP    #15                 ;Display to console.
00001CA2                          1069                  
00001CA2  43F9 0000251C           1070                  LEA     DISP_COMMA,A1       ;Store the console message for output.
00001CA8  103C 000E               1071                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001CAC  4E4F                    1072                  TRAP    #15                 ;Display to console.
00001CAE                          1073                  
00001CAE  4EB9 00001F46           1074                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001CB4                          1075                  
00001CB4  343C 0000               1076                  MOVE.W  #0,D2               ;Force Dn dest mode
00001CB8  3607                    1077                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00001CBA                          1078                  
00001CBA  4EB9 00002132           1079                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001CC0                          1080  
00001CC0  6000 0038               1081                  BRA     opShRoDone
00001CC4                          1082                  
00001CC4  323C 0008               1083  opShRoIfZero    MOVE.W  #8,D1               ;#0 - value of zero represents a count of eight
00001CC8  60D2                    1084                  BRA     OpShRoDispCnt
00001CCA                          1085  
00001CCA  33FC 0000 0000254C      1086  opShRoRegister  MOVE.W  #0,SRC_MODE         ;Force Dn src mode
00001CD2                          1087  
00001CD2  4EB9 00001FC2           1088                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001CD8  33C7 0000254E           1089                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001CDE                          1090  
00001CDE  33FC 0000 00002550      1091                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001CE6                          1092  
00001CE6  4EB9 00001F46           1093                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001CEC  33C7 00002552           1094                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001CF2                          1095  
00001CF2  4EB9 00001FE8           1096                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001CF8  4E75                    1097                  RTS
00001CFA                          1098  
00001CFA  4EB9 000020DC           1099  opShRoDone      JSR     SR_PrintCRLF        ;Returns console output.
00001D00  4E75                    1100                  RTS
00001D02                          1101  
00001D02  6000 FB9A               1102  OP_SIMHALT      BRA     OP_INVALID
00001D06                          1103  
00001D06  43F9 000024FB           1104  OP_SUB          LEA     DISP_SUB,A1         ;Store the console message for output.
00001D0C  103C 000E               1105                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001D10  4E4F                    1106                  TRAP    #15                 ;Display to console.
00001D12                          1107                  
00001D12  4EB9 00001F7A           1108                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001D18                          1109                  
00001D18  13FC 0005 00002549      1110                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001D20  4EB9 0000205C           1111                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001D26                          1112                  
00001D26  0812 0008               1113                  BTST    #8,(A2)             
00001D2A  6700 0006               1114                  BEQ     opSubDnMode         ;Bit 8 = 0
00001D2E                          1115                  
00001D2E  6000 0032               1116                  BRA     opSubEAMode         ;Bit 8 = 1
00001D32                          1117                  
00001D32  4EB9 00001F5E           1118  opSubDnMode     JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001D38  33C7 0000254C           1119                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
00001D3E                          1120                  
00001D3E  4EB9 00001F46           1121                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001D44  33C7 0000254E           1122                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001D4A                          1123                  
00001D4A  33FC 0000 00002550      1124                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001D52                          1125                  
00001D52  4EB9 00001FC2           1126                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001D58  33C7 00002552           1127                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001D5E                          1128                  
00001D5E  6000 002E               1129                  BRA     opSubPrintEA
00001D62                          1130  
00001D62  33FC 0000 0000254C      1131  opSubEAMode     MOVE.W  #0,SRC_MODE         ;Force Dn src mode
00001D6A                          1132                  
00001D6A  4EB9 00001FC2           1133                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001D70  33C7 0000254E           1134                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001D76                          1135                  
00001D76  4EB9 00001F5E           1136                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001D7C  33C7 00002550           1137                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
00001D82                          1138                  
00001D82  4EB9 00001F46           1139                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001D88  33C7 00002552           1140                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001D8E                          1141  
00001D8E  4EB9 00001FE8           1142  opSubPrintEA    JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void               
00001D94  4E75                    1143                  RTS
00001D96                          1144  
00001D96  43F9 000024FF           1145  OP_SUBA         LEA     DISP_SUBA,A1        ;Store the console message for output.
00001D9C  103C 000E               1146                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001DA0  4E4F                    1147                  TRAP    #15                 ;Display to console.
00001DA2                          1148                  
00001DA2  4EB9 00001F9E           1149                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001DA8                          1150  
00001DA8  13FC 0004 00002549      1151                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001DB0  4EB9 0000207C           1152                  JSR     SR_PrntSize3bit     ;Reads D7, Returns void
00001DB6                          1153                  
00001DB6  4EB9 00001F5E           1154                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001DBC  33C7 0000254C           1155                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
00001DC2                          1156                  
00001DC2  4EB9 00001F46           1157                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001DC8  33C7 0000254E           1158                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001DCE                          1159                  
00001DCE  33FC 0001 00002550      1160                  MOVE.W  #1,DEST_MODE        ;Force An dest mode
00001DD6                          1161                  
00001DD6  4EB9 00001FC2           1162                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001DDC  33C7 00002552           1163                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001DE2                          1164                  
00001DE2  4EB9 00001FE8           1165                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001DE8  4E75                    1166                  RTS
00001DEA                          1167                  
00001DEA  43F9 00002504           1168  OP_SUBI         LEA     DISP_SUBI,A1        ;Store the console message for output.
00001DF0  103C 000E               1169                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001DF4  4E4F                    1170                  TRAP    #15                 ;Display to console.
00001DF6                          1171                  
00001DF6  4EB9 00001F7A           1172                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001DFC                          1173                  
00001DFC  13FC 0004 00002549      1174                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA              
00001E04  4EB9 0000205C           1175                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001E0A                          1176                  
00001E0A  33FC 0007 0000254C      1177                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
00001E12  33FC 0004 0000254E      1178                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
00001E1A                          1179                  
00001E1A  4EB9 00001F5E           1180                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001E20  33C7 00002550           1181                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
00001E26                          1182                  
00001E26  4EB9 00001F46           1183                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001E2C  33C7 00002552           1184                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001E32                          1185                  
00001E32  4EB9 00001FE8           1186                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001E38  4E75                    1187                  RTS
00001E3A                          1188                  
00001E3A  43F9 00002509           1189  OP_SUBQ         LEA     DISP_SUBQ,A1        ;Store the console message for output.
00001E40  103C 000E               1190                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E44  4E4F                    1191                  TRAP    #15                 ;Display to console.
00001E46                          1192  
00001E46  4EB9 00001F7A           1193                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001E4C                          1194                  
00001E4C  13FC 0004 00002549      1195                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001E54  4EB9 0000205C           1196                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001E5A                          1197  
00001E5A  43F9 0000250E           1198  opSqCount       LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001E60  103C 000E               1199                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E64  4E4F                    1200                  TRAP    #15                 ;Display to console.
00001E66                          1201                  
00001E66  4EB9 00001FC2           1202                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001E6C                          1203                  
00001E6C  4281                    1204                  CLR.L   D1                  ;Ensure output register is clear
00001E6E                          1205                  
00001E6E  3207                    1206                  MOVE.W  D7,D1               ;Copy bits to D1 for console output.
00001E70                          1207                  
00001E70  B23C 0000               1208                  CMP.B   #0,D1
00001E74  6700 002E               1209                  BEQ     opSqIfZero          ;#0 - value of zero represents a count of eight
00001E78                          1210  
00001E78  103C 0003               1211  opSqDispCnt     MOVE.B  #3,D0               ;Will display signed number from D1
00001E7C  4E4F                    1212                  TRAP    #15                 ;Display to console.
00001E7E                          1213                  
00001E7E  43F9 0000251C           1214                  LEA     DISP_COMMA,A1       ;Store the console message for output.
00001E84  103C 000E               1215                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E88  4E4F                    1216                  TRAP    #15                 ;Display to console.
00001E8A                          1217                  
00001E8A  4EB9 00001F5E           1218                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001E90  3407                    1219                  MOVE.W  D7,D2               ;Copy bits to decode dest mode
00001E92                          1220                  
00001E92  4EB9 00001F46           1221                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001E98  3607                    1222                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00001E9A                          1223                  
00001E9A  4EB9 00002132           1224                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001EA0                          1225  
00001EA0  6000 0008               1226                  BRA     opSqDone
00001EA4                          1227  
00001EA4  323C 0008               1228  opSqIfZero      MOVE.W  #8,D1               ;#0 - value of zero represents a count of eight
00001EA8  60CE                    1229                  BRA     OpSqDispCnt
00001EAA                          1230  
00001EAA  4EB9 000020DC           1231  opSqDone        JSR     SR_PrintCRLF        ;Returns console output.
00001EB0  4E75                    1232                  RTS
00001EB2                          1233  
00001EB2                          1234  
00001EB2                          1235  
00001EB2                          1236  
00001EB2                          1237  
00001EB2                          1238  
00001EB2                          1239  
00001EB2                          1240  
00001EB2                          1241  
00001EB2                          1242  
00001EB2                          1243  -------------------- end include --------------------
00001EB2                          1244                  INCLUDE 'EasyRiders_Subroutines.X68'
00001EB2  1019                    1245  SR_AtoHLoop     MOVE.B  (A1)+,D0            ; Get the first byte
00001EB4  4EB9 0000210C           1246                  JSR     SR_Strip_Ascii      ; Get rid of the ASCII code.
00001EBA  D280                    1247                  ADD.L   D0,D1               ; Load the char into D1
00001EBC  0C11 0000               1248                  CMPI.B  #$0,(A1)            ; Evaluate if there is more work to do.
00001EC0  6700 0006               1249                  BEQ     athEndLoop          ; If not, exit the loop.
00001EC4  E989                    1250                  LSL.L   #$4,D1              ; Otherwise, shift the char left in D1 for the next char
00001EC6  60EA                    1251                  BRA     SR_AtoHLoop         ; Continue working
00001EC8                          1252    
00001EC8  2E01                    1253  athEndLoop      MOVE.L  D1,D7               ; Return hex number in D7
00001ECA  4E75                    1254                  RTS
00001ECC                          1255  
00001ECC  2039 00002558           1256  SR_CheckStart   MOVE.L  DATA_START_LOC,D0
00001ED2                          1257  
00001ED2  B0BC 00000400           1258                  CMP.L   #$400,D0            ;No addresses below $0400 are allowed. 
00001ED8  6D00 000E               1259                  BLT     csFailAddrLow
00001EDC                          1260                  
00001EDC  0800 0000               1261                  BTST    #0,D0               ;If the LSB is 1, the address is odd and invalid.
00001EE0  6600 0016               1262                  BNE     csFailAddrOdd
00001EE4                          1263  
00001EE4  7E00                    1264                  MOVE.L  #0,D7               ;D7 == 0 indicates the addr is valid.
00001EE6  4E75                    1265  csFinish        RTS
00001EE8                          1266  
00001EE8  43F9 000023C5           1267  csFailAddrLow   LEA     MSG_ADDR_LOW,A1
00001EEE  103C 000E               1268                  MOVE.B  #14,D0
00001EF2  4E4F                    1269                  TRAP    #15
00001EF4                          1270                  
00001EF4  7E01                    1271                  MOVE.L  #1,D7               ;D7 == 1 indicates the addr is invalid.
00001EF6  60EE                    1272                  BRA     csFinish
00001EF8                          1273                  
00001EF8  43F9 000023FB           1274  csFailAddrOdd   LEA     MSG_ADDR_ODD,A1
00001EFE  103C 000E               1275                  MOVE.B  #14,D0
00001F02  4E4F                    1276                  TRAP    #15
00001F04                          1277                  
00001F04  7E01                    1278                  MOVE.L  #1,D7               ;D7 == 1 indicates the addr is invalid.
00001F06  60DE                    1279                  BRA     csFinish
00001F08                          1280  
00001F08  2039 00002558           1281  SR_CheckEnd     MOVE.L  DATA_START_LOC,D0
00001F0E  2239 0000255C           1282                  MOVE.L  DATA_END_LOC,D1
00001F14                          1283                  
00001F14  0801 0000               1284                  BTST    #0,D1               ;If the LSB is 1, the address is odd and invalid.
00001F18  6600 001C               1285                  BNE     ceFailAddrOdd
00001F1C                          1286                  
00001F1C  B280                    1287                  CMP.L   D0,D1               ;The ending addr must be greater than starting addr
00001F1E  6D00 0006               1288                  BLT     ceFailAddrOrder
00001F22                          1289  
00001F22  7E00                    1290                  MOVE.L  #0,D7               ;D7 == 0 indicates the addr is valid.
00001F24  4E75                    1291  ceFinish        RTS
00001F26                          1292  
00001F26  43F9 00002426           1293  ceFailAddrOrder LEA     MSG_ADDR_ORDER,A1
00001F2C  103C 000E               1294                  MOVE.B  #14,D0
00001F30  4E4F                    1295                  TRAP    #15
00001F32                          1296                  
00001F32  7E01                    1297                  MOVE.L  #1,D7
00001F34  60EE                    1298                  BRA     ceFinish
00001F36                          1299                  
00001F36  43F9 000023FB           1300  ceFailAddrOdd   LEA     MSG_ADDR_ODD,A1
00001F3C  103C 000E               1301                  MOVE.B  #14,D0
00001F40  4E4F                    1302                  TRAP    #15
00001F42                          1303                  
00001F42  7E01                    1304                  MOVE.L  #1,D7               ;D7 == 1 indicates the addr is invalid.
00001F44  60DE                    1305                  BRA     ceFinish
00001F46                          1306  
00001F46  3E12                    1307  SR_Eval2to0     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F48  103C 000D               1308                  MOVE.B  #13,D0              ;Prepare a shift of 12 bits
00001F4C  E16F                    1309                  LSL.W   D0,D7               ;Truncate up to bit 2
00001F4E  E06F                    1310                  LSR.W   D0,D7               ;Isolate remainder
00001F50  4E75                    1311                  RTS
00001F52                          1312  
00001F52  3E12                    1313  SR_Eval3to0     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F54  103C 000C               1314                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
00001F58  E16F                    1315                  LSL.W   D0,D7               ;Truncate up to forth nibble
00001F5A  E06F                    1316                  LSR.W   D0,D7               ;Isolate nibble
00001F5C  4E75                    1317                  RTS
00001F5E                          1318  
00001F5E  3E12                    1319  SR_Eval5to3     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F60  103C 000A               1320                  MOVE.B  #10,D0              ;Prepare a shift of 10 bits
00001F64  E16F                    1321                  LSL.W   D0,D7               ;Truncate up to bit 5
00001F66  103C 000D               1322                  MOVE.B  #13,D0              ;Prepare a shift of 13 bits
00001F6A  E06F                    1323                  LSR.W   D0,D7               ;Isolate remainder
00001F6C  4E75                    1324                  RTS
00001F6E                          1325  
00001F6E  3E12                    1326  SR_Eval7to4     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F70  E14F                    1327                  LSL.W   #8,D7               ;Truncate up to third nibble
00001F72  103C 000C               1328                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
00001F76  E06F                    1329                  LSR.W   D0,D7               ;Isolate nibble
00001F78  4E75                    1330                  RTS
00001F7A                          1331  
00001F7A  3E12                    1332  SR_Eval7to6     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F7C  E14F                    1333                  LSL.W   #8,D7               ;Truncate up to bit 7
00001F7E  103C 000E               1334                  MOVE.B  #14,D0              ;Prepare a shift of 12 bits
00001F82  E06F                    1335                  LSR.W   D0,D7               ;Isolate remainder
00001F84  4E75                    1336                  RTS
00001F86                          1337  
00001F86  3E12                    1338  SR_Eval8to3     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F88  EF4F                    1339                  LSL.W   #7,D7               ;Truncate up to bit 8
00001F8A  103C 000A               1340                  MOVE.B  #10,D0              ;Prepare a shift of 12 bits
00001F8E  E06F                    1341                  LSR.W   D0,D7               ;Isolate remainder
00001F90  4E75                    1342                  RTS
00001F92                          1343  
00001F92  3E12                    1344  SR_Eval8to4     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001F94  EF4F                    1345                  LSL.W   #7,D7               ;Truncate up to bit 8
00001F96  103C 000B               1346                  MOVE.B  #11,D0              ;Prepare a shift of 11 bits
00001F9A  E06F                    1347                  LSR.W   D0,D7               ;Isolate remainder
00001F9C  4E75                    1348                  RTS
00001F9E                          1349  
00001F9E  3E12                    1350  SR_Eval8to6     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001FA0  EF4F                    1351                  LSL.W   #7,D7               ;Truncate up to bit 8
00001FA2  103C 000D               1352                  MOVE.B  #13,D0              ;Prepare a shift of 13 bits
00001FA6  E06F                    1353                  LSR.W   D0,D7               ;Isolate remainder
00001FA8  4E75                    1354                  RTS
00001FAA                          1355  
00001FAA  3E12                    1356  SR_Eval11to6    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001FAC  E94F                    1357                  LSL.W   #4,D7               ;Truncate up to bit 11
00001FAE  103C 000A               1358                  MOVE.B  #10,D0              ;Prepare a shift of 10 bits
00001FB2  E06F                    1359                  LSR.W   D0,D7               ;Isolate remainder
00001FB4  4E75                    1360                  RTS
00001FB6                          1361  
00001FB6  3E12                    1362  SR_Eval11to8    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001FB8  E94F                    1363                  LSL.W   #4,D7               ;Truncate up to second nibble
00001FBA  103C 000C               1364                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
00001FBE  E06F                    1365                  LSR.W   D0,D7               ;Isolate nibble
00001FC0  4E75                    1366                  RTS
00001FC2                          1367  
00001FC2  3E12                    1368  SR_Eval11to9    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001FC4  E94F                    1369                  LSL.W   #4,D7               ;Truncate up to bit 11
00001FC6  103C 000D               1370                  MOVE.B  #13,D0              ;Prepare a shift of 13 bits
00001FCA  E06F                    1371                  LSR.W   D0,D7               ;Isolate remainder
00001FCC  4E75                    1372                  RTS
00001FCE                          1373  
00001FCE  3E0A                    1374  SR_PrintAddr    MOVE.W  A2,D7
00001FD0  7C08                    1375                  MOVE.L  #8,D6
00001FD2  4EB9 00002026           1376                  JSR     SR_PrintHex
00001FD8                          1377                  
00001FD8  13FC 0003 00002549      1378                  MOVE.B  #3,TAB_LENGTH       ;Tab length = 3
00001FE0  4EB9 000020EA           1379                  JSR     SR_PrintTab
00001FE6  4E75                    1380                  RTS
00001FE8                          1381  
00001FE8  3439 0000254C           1382  SR_PrintEA      MOVE.W  SRC_MODE,D2
00001FEE  3639 0000254E           1383                  MOVE.W  SRC_REGISTER,D3
00001FF4  4EB9 00002132           1384                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001FFA                          1385  
00001FFA  43F9 0000251C           1386                  LEA     DISP_COMMA,A1       ;Store the console message for output.
00002000  103C 000E               1387                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002004  4E4F                    1388                  TRAP    #15                 ;Display to console.
00002006                          1389                  
00002006  3439 00002550           1390                  MOVE.W  DEST_MODE,D2
0000200C  3639 00002552           1391                  MOVE.W  DEST_REGISTER,D3
00002012  4EB9 00002132           1392                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00002018                          1393                  
00002018  43F9 00002464           1394                  LEA     MSG_LINEBREAK,A1    ;Store the console message for output.
0000201E  103C 000E               1395                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002022  4E4F                    1396                  TRAP    #15                 ;Display to console.
00002024                          1397                  
00002024  4E75                    1398                  RTS
00002026                          1399                                
00002026  48E7 1E00               1400  SR_PrintHex     MOVEM.L D3-D6,-(SP)         ;Store registers to stack
0000202A                          1401                  
0000202A  47F9 00002529           1402                  LEA     TABLE_HEXCHAR,A3
00002030  CCFC 0004               1403                  MULU.W  #4,D6               ;Convert number of digits to total bits
00002034                          1404                  
00002034  7620                    1405                  MOVE.L  #32,D3              ;Set the total number of bits
00002036  9686                    1406                  SUB.L   D6,D3               ;Set the bit displacement for nibbles left to right
00002038  781C                    1407                  MOVE.L  #28,D4              ;Bit displacement to truncate all but one nibble
0000203A                          1408                  
0000203A  2A07                    1409  phLoop          MOVE.L  D7,D5               ;Load/reload hex output into D5 for work.
0000203C                          1410  
0000203C  E7AD                    1411                  LSL.L   D3,D5               ;For each loop, isolate the next nibble using displacement
0000203E  E8AD                    1412                  LSR.L   D4,D5               ;Truncate everything else except the nibble
00002040                          1413                  
00002040  CAFC 0002               1414                  MULU    #2,D5               ;Multiply nibble by two, find character in char_table
00002044  43F3 5000               1415                  LEA     0(A3,D5),A1         ;Store the character for output
00002048  103C 000E               1416                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000204C  4E4F                    1417                  TRAP    #15                 ;Display to console.
0000204E                          1418                  
0000204E  5803                    1419                  ADD.B   #4,D3               ;Add another 4 bits to displacement to get next nibble
00002050  B63C 0020               1420                  CMP.B   #32,D3              ;If displacement = 32, we're done.
00002054  66E4                    1421                  BNE     phLoop
00002056                          1422  
00002056  4CDF 0078               1423                  MOVEM.L (SP)+,D3-D6         ;Replace registers from stack
0000205A  4E75                    1424                  RTS
0000205C                          1425  
0000205C  48E7 FEFE               1426  SR_PrntSize2bit MOVEM.L A0-A6/D0-D6,-(SP)   ;Store registers to stack
00002060                          1427                  
00002060  BE3C 0000               1428                  CMP.B   #%00,D7
00002064  6700 002E               1429                  BEQ     psSizeB             ;%00
00002068  BE3C 0001               1430                  CMP.B   #%01,D7
0000206C  6700 0038               1431                  BEQ     psSizeW             ;%01
00002070  BE3C 0002               1432                  CMP.B   #%10,D7
00002074  6700 0042               1433                  BEQ     psSizeL             ;%10
00002078                          1434  
00002078  6000 005C               1435                  BRA     psError             ;Return to parent if error exists
0000207C                          1436  
0000207C  48E7 FEFE               1437  SR_PrntSize3bit MOVEM.L A0-A6/D0-D6,-(SP)   ;Store registers to stack
00002080                          1438  
00002080  BE3C 0003               1439                  CMP.B   #%011,D7
00002084  6700 0020               1440                  BEQ     psSizeW             ;%011
00002088  BE3C 0007               1441                  CMP.B   #%111,D7
0000208C  6700 002A               1442                  BEQ     psSizeL             ;%111
00002090                          1443                  
00002090  6000 0044               1444                  BRA     psError             ;Return to parent if error exists
00002094                          1445  
00002094  43F9 0000251E           1446  psSizeB         LEA     DISP_SIZE_B,A1      ;Store the console message for output.
0000209A  13FC 0000 00002554      1447                  MOVE.B  #0,OP_SIZE          ;Store the size of the EA.
000020A2  6000 0026               1448                  BRA     psDone
000020A6                          1449  
000020A6  43F9 00002524           1450  psSizeW         LEA     DISP_SIZE_W,A1      ;Store the console message for output.
000020AC  13FC 0001 00002554      1451                  MOVE.B  #1,OP_SIZE          ;Store the size of the EA.
000020B4  6000 0014               1452                  BRA     psDone           
000020B8                          1453  
000020B8  43F9 00002521           1454  psSizeL         LEA     DISP_SIZE_L,A1      ;Store the console message for output.
000020BE  13FC 0002 00002554      1455                  MOVE.B  #2,OP_SIZE          ;Store the size of the EA.
000020C6  6000 0002               1456                  BRA     psDone
000020CA                          1457  
000020CA  103C 000E               1458  psDone          MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000020CE  4E4F                    1459                  TRAP    #15                 ;Display to console.
000020D0  4EB9 000020EA           1460                  JSR     SR_PrintTab         ;Reads none, Return void
000020D6                          1461  
000020D6  4CDF 7F7F               1462  psError         MOVEM.L (SP)+,A0-A6/D0-D6   ;Replace registers from stack
000020DA  4E75                    1463                  RTS
000020DC                          1464  
000020DC  43F9 00002464           1465  SR_PrintCRLF    LEA     MSG_LINEBREAK,A1
000020E2  103C 000E               1466                  MOVE.B  #14,D0
000020E6  4E4F                    1467                  TRAP    #15             
000020E8  4E75                    1468                  RTS
000020EA                          1469                  
000020EA  4287                    1470  SR_PrintTab     CLR.L   D7
000020EC  1E39 00002549           1471                  MOVE.B  TAB_LENGTH,D7       ;Move data to D7 as a decreasing counter
000020F2                          1472                  
000020F2  BE3C 0000               1473  ptLoopStart     CMP.B   #0,D7               ;If the counter is zero, end the loop.
000020F6  6700 0012               1474                  BEQ     ptLoopFinish        ;The loop is not finished, print a space.
000020FA                          1475  
000020FA  43F9 0000251A           1476                  LEA     DISP_SPACE,A1       ;Print a single space on the console
00002100  103C 000E               1477                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002104  4E4F                    1478                  TRAP    #15                 ;Display to console.
00002106                          1479                  
00002106  5307                    1480                  SUBQ.B  #1,D7               ;Decrease the loop counter by 1
00002108  60E8                    1481                  BRA     ptLoopStart
0000210A                          1482                  
0000210A  4E75                    1483  ptLoopFinish    RTS
0000210C                          1484  
0000210C  B03C 0039               1485  SR_Strip_Ascii  CMP.B   #$39,D0             ; Is it in range of 0-9?
00002110  6F00 001A               1486                  BLE     saSub30             ; It's a number
00002114  B03C 0046               1487                  CMP.B   #$46,D0             ; Is is A...F?
00002118  6F00 000A               1488                  BLE     saSub37             ; It's A...F
0000211C  0400 0057               1489                  SUB.B   #$57,D0             ; It's a...f
00002120  6000 000E               1490                  BRA     saReturn            ; Go back
00002124  0400 0037               1491  saSub37         SUB.B   #$37,D0             ; Strip 37
00002128  6000 0006               1492                  BRA     saReturn            ; Go back
0000212C  0400 0030               1493  saSub30         SUB.B   #$30,D0             ; Strip 30
00002130  4E75                    1494  saReturn        RTS                         ; Go back
00002132                          1495  
00002132                          1496  
00002132                          1497  
00002132                          1498  
00002132                          1499  
00002132                          1500  
00002132                          1501  
00002132                          1502  
00002132                          1503  
00002132                          1504  
00002132                          1505  
00002132                          1506  
00002132                          1507  
00002132                          1508  
00002132                          1509  
00002132                          1510  
00002132                          1511  
00002132                          1512  
00002132                          1513  
00002132                          1514  
00002132                          1515  
00002132                          1516  
00002132                          1517  
00002132                          1518  
00002132                          1519  
00002132                          1520  
00002132                          1521  
00002132                          1522  
00002132                          1523  
00002132                          1524  
00002132                          1525  
00002132                          1526  
00002132                          1527  
00002132                          1528  
00002132                          1529  
00002132                          1530  
00002132                          1531  
00002132                          1532  
00002132                          1533  
00002132                          1534  
00002132                          1535  
00002132                          1536  
00002132                          1537  
00002132                          1538  
00002132                          1539  
00002132                          1540  
00002132                          1541  
00002132                          1542  
00002132                          1543  -------------------- end include --------------------
00002132                          1544                  INCLUDE 'EasyRiders_EAs.X68'
00002132  47F9 00002148           1545  EA_Decode_EA    LEA     EA_ModeTable,A3     ;Load jump table to A3
00002138  49F9 00002529           1546                  LEA     TABLE_HEXCHAR,A4    ;Load symbol table to A4 for output
0000213E  C4FC 0006               1547                  MULU    #6,D2
00002142  4EB3 2000               1548                  JSR     0(A3,D2)
00002146  4E75                    1549                  RTS
00002148                          1550                  
00002148  4EF9 00002178           1551  EA_ModeTable    JMP     EA_Mode_000         ;0 - Register Direct Data
0000214E  4EF9 00002194           1552                  JMP     EA_Mode_001         ;1 - Register Direct Address
00002154  4EF9 000021B0           1553                  JMP     EA_Mode_010         ;2 - Register Indirect Address
0000215A  4EF9 000021CA           1554                  JMP     EA_Mode_011         ;3 - Register Indirect Address Post Inc
00002160  4EF9 000021DC           1555                  JMP     EA_Mode_100         ;4 - Register Indirect Address Pre Dec
00002166  4EF9 000021EE           1556                  JMP     EA_Mode_101         ;5 - Not Supported
0000216C  4EF9 000021F2           1557                  JMP     EA_Mode_110         ;6 - Not Supported
00002172  4EF9 000021F6           1558                  JMP     EA_Mode_111         ;7 - Absolute Data Short/Long/Immediate
00002178                          1559                  
00002178  7A1A                    1560  EA_Mode_000     MOVE.L  #26,D5
0000217A  43F4 5000               1561                  LEA     0(A4,D5),A1         ; comments for clever things
0000217E  103C 000E               1562                  MOVE.B  #14,D0
00002182  4E4F                    1563                  TRAP    #15
00002184                          1564  
00002184  C6FC 0002               1565                  MULU    #2,D3
00002188  43F4 3000               1566                  LEA     0(A4,D3),A1
0000218C  103C 000E               1567                  MOVE.B  #14,D0
00002190  4E4F                    1568                  TRAP    #15
00002192                          1569                  
00002192  4E75                    1570                  RTS
00002194                          1571  
00002194  7A14                    1572  EA_Mode_001     MOVE.L  #20,D5
00002196  43F4 5000               1573                  LEA     0(A4,D5),A1
0000219A  103C 000E               1574                  MOVE.B  #14,D0
0000219E  4E4F                    1575                  TRAP    #15
000021A0                          1576                  
000021A0  C6FC 0002               1577                  MULU    #2,D3
000021A4  43F4 3000               1578                  LEA     0(A4,D3),A1
000021A8  103C 000E               1579                  MOVE.B  #14,D0      *redundant (remove or keep for readability?)
000021AC  4E4F                    1580                  TRAP    #15         * it's a good idea to refresh variables when the cost is low.
000021AE                          1581                                      * never know if this code will get moved or reused somewhere else.
000021AE                          1582  
000021AE  4E75                    1583                  RTS
000021B0                          1584  
000021B0  43F9 00002516           1585  EA_Mode_010     LEA     DISP_OPAREN,A1
000021B6  103C 000E               1586                  MOVE.B  #14,D0
000021BA  4E4F                    1587                  TRAP    #15
000021BC                          1588                  
000021BC  4EB8 2194               1589                  JSR     EA_Mode_001
000021C0                          1590                  
000021C0  43F9 00002518           1591                  LEA     DISP_CPAREN,A1
000021C6  4E4F                    1592                  TRAP    #15
000021C8                          1593  
000021C8  4E75                    1594                  RTS
000021CA                          1595  
000021CA  4EB8 21B0               1596  EA_Mode_011     JSR     EA_Mode_010
000021CE                          1597                  
000021CE  43F9 00002514           1598                  LEA     DISP_PLUS,A1
000021D4  103C 000E               1599                  MOVE.B  #14,D0
000021D8  4E4F                    1600                  TRAP    #15
000021DA                          1601                        
000021DA  4E75                    1602                  RTS
000021DC                          1603  
000021DC  43F9 00002512           1604  EA_Mode_100     LEA     DISP_MINUS,A1
000021E2  103C 000E               1605                  MOVE.B  #14,D0
000021E6  4E4F                    1606                  TRAP    #15
000021E8                          1607                  
000021E8  4EB8 21B0               1608                  JSR     EA_Mode_010
000021EC                          1609  
000021EC  4E75                    1610                  RTS
000021EE                          1611  
000021EE  6000 00A0               1612  EA_Mode_101     BRA     EA_INVALID
000021F2                          1613  
000021F2  6000 009C               1614  EA_Mode_110     BRA     EA_INVALID
000021F6                          1615  
000021F6  264A                    1616  EA_Mode_111     MOVEA.L A2,A3
000021F8  B63C 0000               1617                  CMP.B   #%000,D3
000021FC  6700 0016               1618                  BEQ     EA_AbsShort_000     ;%000
00002200  B63C 0001               1619                  CMP.B   #%001,D3
00002204  6700 0028               1620                  BEQ     EA_AbsLong_001      ;%001
00002208  B63C 0004               1621                  CMP.B   #%100,D3
0000220C  6700 003A               1622                  BEQ     EA_Immed_100        ;%100
00002210                          1623                  
00002210  6000 007E               1624                  BRA     EA_INVALID  * I decoupled this section and changed it to positive logic
00002214                          1625                  
00002214  43F9 00002510           1626  EA_AbsShort_000 LEA     DISP_DOLLAR,A1
0000221A  103C 000E               1627                  MOVE.B  #14,D0
0000221E  4E4F                    1628                  TRAP    #15    
00002220                          1629                  
00002220                          1630                  *read next word from memory, print in hex
00002220  544B                    1631                  ADDA.W  #2,A3
00002222                          1632                  
00002222  3E13                    1633                  MOVE.W  (A3),D7
00002224  7C04                    1634                  MOVE.L  #4,D6               ;Number of characters to display
00002226  4EB8 2026               1635                  JSR     SR_PrintHex
0000222A                          1636                  
0000222A  544A                    1637                  ADDA.W  #2,A2
0000222C                          1638                  
0000222C  4E75                    1639                  RTS
0000222E                          1640  
0000222E  43F9 00002510           1641  EA_AbsLong_001  LEA     DISP_DOLLAR,A1
00002234  103C 000E               1642                  MOVE.B  #14,D0
00002238  4E4F                    1643                  TRAP    #15    
0000223A                          1644                  
0000223A                          1645                  *read next two words from memory, print in hex
0000223A  544B                    1646                  ADDA.W  #2,A3
0000223C                          1647                  
0000223C  2E13                    1648                  MOVE.L  (A3),D7
0000223E  7C08                    1649                  MOVE.L  #8,D6               ;Number of characters to display
00002240  4EB8 2026               1650                  JSR     SR_PrintHex
00002244                          1651                  
00002244  584A                    1652                  ADDA.W  #4,A2
00002246                          1653                  
00002246  4E75                    1654                  RTS
00002248                          1655  
00002248                          1656  EA_Immed_100    *immediate data
00002248                          1657                  
00002248  43F9 0000250E           1658                  LEA     DISP_OCTOTHORPE,A1  *immediate data is signified by a pound sign
0000224E  103C 000E               1659                  MOVE.B  #14,D0
00002252  4E4F                    1660                  TRAP    #15   
00002254                          1661  
00002254  43F9 00002510           1662                  LEA     DISP_DOLLAR,A1      *All imediate data will be printed as hex
0000225A  103C 000E               1663                  MOVE.B  #14,D0
0000225E  4E4F                    1664                  TRAP    #15
00002260                          1665  
00002260                          1666  
00002260                          1667                  *figure out how long the current commad is                
00002260                          1668                  
00002260  4284                    1669                  CLR.L   D4
00002262  1839 00002554           1670                  MOVE.B  OP_SIZE,D4          
00002268  B83C 0001               1671                  CMP.B   #1,D4  *For number in D4, 0 = .B, 1 = .W, 2 = .L
0000226C  6E00 0012               1672                  BGT     Immed_Long
00002270                          1673                  
00002270  544B                    1674                  ADDA.W  #2, A3
00002272                          1675  
00002272  4287                    1676                  CLR.L   D7
00002274  3E13                    1677                  MOVE.W  (A3),D7
00002276  7C04                    1678                  MOVE.L  #4,D6               ;Number of characters to display
00002278  4EB8 2026               1679                  JSR     SR_PrintHex
0000227C                          1680  
0000227C  544A                    1681                  ADDA.W  #2,A2 *Advance over extension word
0000227E  4E75                    1682                  RTS
00002280                          1683  
00002280  544B                    1684  Immed_Long      ADDA.W  #2,A3
00002282                          1685                  
00002282  4287                    1686                  CLR.L   D7
00002284  2E13                    1687                  MOVE.L  (A3),D7
00002286  7C08                    1688                  MOVE.L  #8,D6               ;Number of characters to display
00002288  4EB8 2026               1689                  JSR     SR_PrintHex
0000228C                          1690  
0000228C  584A                    1691                  ADDA.W  #4,A2 *Advance over extension words
0000228E  4E75                    1692                  RTS                
00002290                          1693  
00002290  43F9 000024B3           1694  EA_INVALID      LEA     DISP_INVALID,A1  ;Store the console message for output.
00002296  103C 000E               1695                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000229A  4E4F                    1696                  TRAP    #15                 ;Display to console.
0000229C                          1697                  
0000229C  544A                    1698                  ADDA.W  #2,A2               ;Advance opcode pointer
0000229E  4E75                    1699                  RTS                         ;This should throw an error with output
000022A0                          1700  
000022A0                          1701  
000022A0                          1702  
000022A0                          1703  
000022A0                          1704  
000022A0                          1705  -------------------- end include --------------------
000022A0                          1706                  INCLUDE 'EasyRiders_Definitions.X68'
000022A0  =0000000D               1707  CR              EQU     $0D                 ;Carriage Return
000022A0  =0000000A               1708  LF              EQU     $0A                 ;Line feed
000022A0                          1709  
000022A0= 36 38 4B 20 44 69 ...   1710  MSG_WELCOME     DC.B    '68K Disassember Final Project',CR,LF
000022BF= 57 72 69 74 74 65 ...   1711                  DC.B    'Written by Thomas Dye and Ross Holzworth',CR,LF
000022E9= 43 53 53 20 34 32 ...   1712                  DC.B    'CSS 422 Final Project - University of Washington | Bothell',CR,LF,0
00002326= 54 65 73 74 20 64 ...   1713  MSG_LOC_START   DC.B    'Test data starts from location: ',0
00002347= 54 65 73 74 20 64 ...   1714  MSG_LOC_END     DC.B    'Test data ends at location: ',0
00002364= 50 72 65 73 73 20 ...   1715  MSG_PAUSE       DC.B    'Press enter to continue output.',CR,LF,0
00002386= 45 6E 64 20 6F 66 ...   1716  MSG_RESTART     DC.B    'End of test data reached.',CR,LF,CR,LF
000023A3= 54 65 73 74 20 61 ...   1717                  DC.B    'Test another location? (yes/no): ',0
000023C5= 54 68 65 20 73 74 ...   1718  MSG_ADDR_LOW    DC.B    'The starting address must be $00000400 or higher.',CR,LF,CR,LF,0
000023FB= 54 68 65 20 61 64 ...   1719  MSG_ADDR_ODD    DC.B    'The address cannot end on an odd byte!',CR,LF,CR,LF,0
00002426= 54 68 65 20 65 6E ...   1720  MSG_ADDR_ORDER  DC.B    'The ending address cannot be before the starting address!',CR,LF,CR,LF,0
00002464= 0D 0A 00                1721  MSG_LINEBREAK   DC.B    CR,LF,0
00002467                          1722  
00002467= 41 44 44 00             1723  DISP_ADD        DC.B    'ADD',0
0000246B= 41 44 44 41 00          1724  DISP_ADDA       DC.B    'ADDA',0
00002470= 41 44 44 49 00          1725  DISP_ADDI       DC.B    'ADDI',0
00002475= 41 44 44 51 00          1726  DISP_ADDQ       DC.B    'ADDQ',0
0000247A= 41 4E 44 00             1727  DISP_AND        DC.B    'AND',0
0000247E= 41 4E 44 49 00          1728  DISP_ANDI       DC.B    'ANDI',0
00002483= 41 53 4C 00             1729  DISP_ASL        DC.B    'ASL',0
00002487= 41 53 52 00             1730  DISP_ASR        DC.B    'ASR',0
0000248B= 42 43 43 00             1731  DISP_BCC        DC.B    'BCC',0
0000248F= 42 43 48 47 00          1732  DISP_BCHG       DC.B    'BCHG',0
00002494= 42 47 54 00             1733  DISP_BGT        DC.B    'BGT',0
00002498= 42 4C 45 00             1734  DISP_BLE        DC.B    'BLE',0
0000249C= 43 4C 52 00             1735  DISP_CLR        DC.B    'CLR',0
000024A0= 43 4D 50 00             1736  DISP_CMP        DC.B    'CMP',0
000024A4= 43 4D 50 49 00          1737  DISP_CMPI       DC.B    'CMPI',0
000024A9= 44 49 56 53 00          1738  DISP_DIVS       DC.B    'DIVS',0
000024AE= 44 49 56 55 00          1739  DISP_DIVU       DC.B    'DIVU',0
000024B3= 44 41 54 41 00          1740  DISP_INVALID    DC.B    'DATA',0         *REMINDER: Label changed without changing name
000024B8= 4A 53 52 00             1741  DISP_JSR        DC.B    'JSR',0
000024BC= 4C 45 41 00             1742  DISP_LEA        DC.B    'LEA',0
000024C0= 4C 53 4C 00             1743  DISP_LSL        DC.B    'LSL',0
000024C4= 4C 53 52 00             1744  DISP_LSR        DC.B    'LSR',0
000024C8= 4D 4F 56 45 00          1745  DISP_MOVE       DC.B    'MOVE',0
000024CD= 4D 4F 56 45 4D 00       1746  DISP_MOVEM      DC.B    'MOVEM',0
000024D3= 4D 4F 56 45 51 00       1747  DISP_MOVEQ      DC.B    'MOVEQ',0
000024D9= 4D 55 4C 53 00          1748  DISP_MULS       DC.B    'MULS',0
000024DE= 4D 55 4C 55 00          1749  DISP_MULU       DC.B    'MULU',0
000024E3= 4E 4F 50 00             1750  DISP_NOP        DC.B    'NOP',0
000024E7= 52 4F 4C 00             1751  DISP_ROL        DC.B    'ROL',0
000024EB= 52 4F 52 00             1752  DISP_ROR        DC.B    'ROR',0
000024EF= 52 54 53 00             1753  DISP_RTS        DC.B    'RTS',0
000024F3= 53 49 4D 48 41 4C ...   1754  DISP_SIMHALT    DC.B    'SIMHALT',0
000024FB= 53 55 42 00             1755  DISP_SUB        DC.B    'SUB',0
000024FF= 53 55 42 41 00          1756  DISP_SUBA       DC.B    'SUBA',0
00002504= 53 55 42 49 00          1757  DISP_SUBI       DC.B    'SUBI',0
00002509= 53 55 42 51 00          1758  DISP_SUBQ       DC.B    'SUBQ',0
0000250E                          1759  
0000250E= 23 00                   1760  DISP_OCTOTHORPE DC.B    '#',0
00002510= 24 00                   1761  DISP_DOLLAR     DC.B    '$',0
00002512= 2D 00                   1762  DISP_MINUS      DC.B    '-',0
00002514= 2B 00                   1763  DISP_PLUS       DC.B    '+',0
00002516= 28 00                   1764  DISP_OPAREN     DC.B    '(',0
00002518= 29 00                   1765  DISP_CPAREN     DC.B    ')',0
0000251A= 20 00                   1766  DISP_SPACE      DC.B    ' ',0
0000251C= 2C 00                   1767  DISP_COMMA      DC.B    ',',0
0000251E= 2E 42 00                1768  DISP_SIZE_B     DC.B    '.B',0
00002521= 2E 4C 00                1769  DISP_SIZE_L     DC.B    '.L',0
00002524= 2E 57 00                1770  DISP_SIZE_W     DC.B    '.W',0
00002527= 41 00                   1771  DISP_MOVE_A     DC.B    'A',0
00002529                          1772  
00002529= 30 00                   1773  TABLE_HEXCHAR   DC.B    '0',0
0000252B= 31 00                   1774                  DC.B    '1',0
0000252D= 32 00                   1775                  DC.B    '2',0
0000252F= 33 00                   1776                  DC.B    '3',0
00002531= 34 00                   1777                  DC.B    '4',0
00002533= 35 00                   1778                  DC.B    '5',0
00002535= 36 00                   1779                  DC.B    '6',0
00002537= 37 00                   1780                  DC.B    '7',0
00002539= 38 00                   1781                  DC.B    '8',0
0000253B= 39 00                   1782                  DC.B    '9',0
0000253D= 41 00                   1783                  DC.B    'A',0 
0000253F= 42 00                   1784                  DC.B    'B',0
00002541= 43 00                   1785                  DC.B    'C',0
00002543= 44 00                   1786                  DC.B    'D',0
00002545= 45 00                   1787                  DC.B    'E',0
00002547= 46 00                   1788                  DC.B    'F',0
00002549                          1789  
00002549                          1790  TAB_LENGTH      DS.B    1                   ;Number of spaces in a tab to print on console
0000254A                          1791  LINECOUNT       DS.B    1                   ;Storage for number of lines on screen
0000254C                          1792  SRC_MODE        DS.W    1                   ;Storage for the source EA mode type
0000254E                          1793  SRC_REGISTER    DS.W    1                   ;Storage for the source EA register ID
00002550                          1794  DEST_MODE       DS.W    1                   ;Storage for the destination EA mode type
00002552                          1795  DEST_REGISTER   DS.W    1                   ;Storage for the destination EA register ID
00002554                          1796  OP_SIZE         DS.B    1                   ;Storage for the size of the current opword (for EA decode)
00002556                          1797  CURRENT_OP      DS.W    1                   ;Safe storage for current op word being processed
00002558                          1798  DATA_START_LOC  DS.L    1                   ;Location to begin reading test data
0000255C                          1799  DATA_END_LOC    DS.L    1                   ;Location to end reading test data
00002560                          1800  INPUT_BUFFER    DS.L    1                   ;Create an input buffer for ascii strings.
00002564                          1801  
00002564                          1802  
00002564                          1803  
00002564                          1804  
00002564                          1805  
00002564                          1806  
00002564                          1807  
00002564                          1808  
00002564                          1809  
00002564                          1810  
00002564                          1811  
00002564                          1812  
00002564                          1813  
00002564                          1814  
00002564                          1815  
00002564                          1816  
00002564                          1817  
00002564                          1818  
00002564                          1819  
00002564                          1820  
00002564                          1821  -------------------- end include --------------------
00002564                          1822  
00002564                          1823                  END     START               ;Do not put anything below this line.

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ATHENDLOOP          1EC8
BG16BIT             16BC
BG32BIT             16DC
BGFINISH            16B4
BRANCH_0            119E
BRANCH_4            11C8
BRANCH_4E           1384
BRANCH_4E7          13A4
BRANCH_5            1202
BRANCH_6            1218
BRANCH_8            123A
BRANCH_9            1254
BRANCH_B            1278
BRANCH_C            129A
BRANCH_D            12D8
BRANCH_E            12FC
BRANCH_F            1380
CEFAILADDRODD       1F36
CEFAILADDRORDER     1F26
CEFINISH            1F24
CPLOOP              10AA
CPRETURN            10B6
CR                  D
CSFAILADDRLOW       1EE8
CSFAILADDRODD       1EF8
CSFINISH            1EE6
CURRENT_OP          2556
DATA_END_LOC        255C
DATA_START_LOC      2558
DEST_MODE           2550
DEST_REGISTER       2552
DISP_ADD            2467
DISP_ADDA           246B
DISP_ADDI           2470
DISP_ADDQ           2475
DISP_AND            247A
DISP_ANDI           247E
DISP_ASL            2483
DISP_ASR            2487
DISP_BCC            248B
DISP_BCHG           248F
DISP_BGT            2494
DISP_BLE            2498
DISP_CLR            249C
DISP_CMP            24A0
DISP_CMPI           24A4
DISP_COMMA          251C
DISP_CPAREN         2518
DISP_DIVS           24A9
DISP_DIVU           24AE
DISP_DOLLAR         2510
DISP_INVALID        24B3
DISP_JSR            24B8
DISP_LEA            24BC
DISP_LSL            24C0
DISP_LSR            24C4
DISP_MINUS          2512
DISP_MOVE           24C8
DISP_MOVEM          24CD
DISP_MOVEQ          24D3
DISP_MOVE_A         2527
DISP_MULS           24D9
DISP_MULU           24DE
DISP_NOP            24E3
DISP_OCTOTHORPE     250E
DISP_OPAREN         2516
DISP_PLUS           2514
DISP_ROL            24E7
DISP_ROR            24EB
DISP_RTS            24EF
DISP_SIMHALT        24F3
DISP_SIZE_B         251E
DISP_SIZE_L         2521
DISP_SIZE_W         2524
DISP_SPACE          251A
DISP_SUB            24FB
DISP_SUBA           24FF
DISP_SUBI           2504
DISP_SUBQ           2509
EA_ABSLONG_001      222E
EA_ABSSHORT_000     2214
EA_DECODE_EA        2132
EA_IMMED_100        2248
EA_INVALID          2290
EA_MODETABLE        2148
EA_MODE_000         2178
EA_MODE_001         2194
EA_MODE_010         21B0
EA_MODE_011         21CA
EA_MODE_100         21DC
EA_MODE_101         21EE
EA_MODE_110         21F2
EA_MODE_111         21F6
END_PROGRAM         113A
FN_CMD_PARSER       1098
FN_INPUTLOOP        1014
FN_PAUSEOUTPUT      10DE
FN_TERMINATE        10FA
GIENDADDRLOOP       1054
IMMED_LONG          2280
INPUT_BUFFER        2560
LF                  A
LINECOUNT           254A
MLMOVEA             19F2
MLRETURN            19D4
MOVE_BASIC          1A5E
MSG_ADDR_LOW        23C5
MSG_ADDR_ODD        23FB
MSG_ADDR_ORDER      2426
MSG_LINEBREAK       2464
MSG_LOC_END         2347
MSG_LOC_START       2326
MSG_PAUSE           2364
MSG_RESTART         2386
MSG_WELCOME         22A0
MWMOVEA             1A48
MWRETURN            1A26
OPADDDNMODE         13EA
OPADDEAMODE         141A
OPADDPRINTEA        1446
OPANDDNMODE         1596
OPANDEAMODE         15C6
OPANDPRINTEA        15F2
OPAQCOUNT           1512
OPAQDISPCNT         1530
OPAQDONE            1562
OPAQIFZERO          155C
OPSHROCOUNT         1C7E
OPSHRODISPCNT       1C9C
OPSHRODONE          1CFA
OPSHROIFZERO        1CC4
OPSHROMEMORY        1C54
OPSHROREGISTER      1CCA
OPSQCOUNT           1E5A
OPSQDISPCNT         1E78
OPSQDONE            1EAA
OPSQIFZERO          1EA4
OPSUBDNMODE         1D32
OPSUBEAMODE         1D62
OPSUBPRINTEA        1D8E
OP_ADD              13BE
OP_ADDA             144E
OP_ADDI             14A2
OP_ADDQ             14F2
OP_AND              156A
OP_ANDI             15FA
OP_ASL              164A
OP_ASR              165A
OP_BCC              166A
OP_BCCGROUP         167A
OP_BGT              16FC
OP_BLE              170C
OP_CLR              171C
OP_CMP              175C
OP_CMPI             17B2
OP_DIVS             1802
OP_DIVU             1850
OP_INVALID          189E
OP_JSR              18D6
OP_LEA              1912
OP_LSL              1960
OP_LSR              1970
OP_MOVEM            1AD0
OP_MOVEQ            1AE0
OP_MOVE_B           1980
OP_MOVE_L           19B2
OP_MOVE_W           1A08
OP_MULS             1B46
OP_MULU             1B94
OP_NOP              1BE2
OP_ROL              1BF6
OP_ROR              1C06
OP_RTS              1C16
OP_SHIFTROT         1C2A
OP_SIMHALT          1D02
OP_SIZE             2554
OP_SUB              1D06
OP_SUBA             1D96
OP_SUBI             1DEA
OP_SUBQ             1E3A
PHLOOP              203A
PSDONE              20CA
PSERROR             20D6
PSSIZEB             2094
PSSIZEL             20B8
PSSIZEW             20A6
PTLOOPFINISH        210A
PTLOOPSTART         20F2
ROOT_JMP_TABLE      113E
SARETURN            2130
SASUB30             212C
SASUB37             2124
SRC_MODE            254C
SRC_REGISTER        254E
SR_ATOHLOOP         1EB2
SR_CHECKEND         1F08
SR_CHECKSTART       1ECC
SR_EVAL11TO6        1FAA
SR_EVAL11TO8        1FB6
SR_EVAL11TO9        1FC2
SR_EVAL2TO0         1F46
SR_EVAL3TO0         1F52
SR_EVAL5TO3         1F5E
SR_EVAL7TO4         1F6E
SR_EVAL7TO6         1F7A
SR_EVAL8TO3         1F86
SR_EVAL8TO4         1F92
SR_EVAL8TO6         1F9E
SR_PRINTADDR        1FCE
SR_PRINTCRLF        20DC
SR_PRINTEA          1FE8
SR_PRINTHEX         2026
SR_PRINTTAB         20EA
SR_PRNTSIZE2BIT     205C
SR_PRNTSIZE3BIT     207C
SR_STRIP_ASCII      210C
START               1000
TABLE_HEXCHAR       2529
TAB_LENGTH          2549
