00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/13/2016 1:57:34 PM

00000000                             1  *------------------------------------------------------------------------------
00000000                             2  * Title      : 68K Disassember Final Project
00000000                             3  * Written by : Thomas Dye and Ross Holzworth
00000000                             4  * Date       : 2/29/16
00000000                             5  * Description: CSS 422 Final Project - University of Washington | Bothell
00000000                             6  * Instructor : Dr. Yang Peng
00000000                             7  *------------------------------------------------------------------------------
00000000                             8  * Main ------------------------------------------------------------------------
00000000                             9  *---------------Opcode--Operands------------Comments---------------------------
00001000                            10  START           ORG     $1000               ;Load at this address
00001000                            11  
00001000                            12                  INCLUDE 'EasyRiders_Parser.X68'
00001000  43F9 000025FC             13                  LEA     MSG_WELCOME,A1      ;Store the console message for output.
00001006  103C 000D                 14                  MOVE.B  #13,D0              ;Will display from A1 with CR,LF.
0000100A  4E4F                      15                  TRAP    #15                 ;Display to console.
0000100C                            16                  
0000100C  13FC 0007 00002878        17                  MOVE.B  #7,LINECOUNT        ;Initialize counter (welcome + prompts)
00001014                            18  
00001014  43F9 00002682             19  FN_InputLoop    LEA     MSG_LOC_START,A1    ;Store the console message for output.
0000101A  103C 000E                 20                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000101E  4E4F                      21                  TRAP    #15                 ;Display to console.
00001020                            22  
00001020  43F9 0000288E             23                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
00001026  103C 0002                 24                  MOVE.B  #2,D0               ;Read string from keyboard to A1
0000102A  4E4F                      25                  TRAP    #15                 ;Get the user input from console, length in D1
0000102C                            26  
0000102C  4280                      27                  CLR.L   D0                  ;Use D0 and D1 to process ascii to hex conversion.
0000102E  4281                      28                  CLR.L   D1                  ;Ensure both are clear of data.
00001030                            29                  
00001030  4EB9 0000221E             30                  JSR     SR_AtoHLoop         ;Convert raw input ascii characters to hex
00001036  23C7 00002886             31                  MOVE.L  D7,DATA_START_LOC   ;Store hex value user data location
0000103C                            32                  
0000103C  43F9 0000278A             33                  LEA     MSG_LINEBREAK,A1    ;Append linefeed to the end of user input
00001042  103C 000E                 34                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001046  4E4F                      35                  TRAP    #15                 ;Display to console.
00001048                            36                  
00001048  4EB9 00002238             37                  JSR     SR_CheckStart       ;Reads DATA_START_LOC, Returns D7
0000104E  BE3C 0001                 38                  CMP.B   #1,D7               ;If D7 == 1, input was invalid, so start over.
00001052  67C0                      39                  BEQ     FN_InputLoop
00001054                            40                  
00001054  43F9 000026A3             41  giEndAddrLoop   LEA     MSG_LOC_END,A1      ;Store the console message for output.
0000105A  103C 000E                 42                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000105E  4E4F                      43                  TRAP    #15                 ;Display to console.
00001060                            44                  
00001060  43F9 0000288E             45                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
00001066  103C 0002                 46                  MOVE.B  #2,D0               ;Read string from keyboard to A1
0000106A  4E4F                      47                  TRAP    #15                 ;Get the user input from console, length in D1
0000106C                            48  
0000106C  4280                      49                  CLR.L   D0                  ;Use D0 and D1 to process ascii to hex conversion.
0000106E  4281                      50                  CLR.L   D1                  ;Ensure both are clear of data.
00001070                            51                  
00001070  4EB9 0000221E             52                  JSR     SR_AtoHLoop         ;Convert raw input ascii characters to hex
00001076  23C7 0000288A             53                  MOVE.L  D7,DATA_END_LOC     ;Store hex value user data location
0000107C                            54                  
0000107C  43F9 0000278A             55                  LEA     MSG_LINEBREAK,A1    ;Append linefeed to the end of user input
00001082  103C 000E                 56                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001086  4E4F                      57                  TRAP    #15                 ;Display to console.
00001088                            58                  
00001088  4EB9 0000225A             59                  JSR     SR_CheckEnd         ;Reads DATA_END_LOC, Returns D7
0000108E  BE3C 0001                 60                  CMP.B   #1,D7               ;If D7 == 1, input was invalid, so start over.
00001092  67C0                      61                  BEQ     giEndAddrLoop
00001094                            62                  
00001094  6000 0002                 63                  BRA     FN_Cmd_Parser
00001098                            64  
00001098  41F9 0000113E             65  FN_Cmd_Parser   LEA     ROOT_JMP_TABLE,A0   ;Index into the table
0000109E  2479 00002886             66                  MOVEA.L DATA_START_LOC,A2   ;Point to the location of beginning test data
000010A4  2C79 0000288A             67                  MOVEA.L DATA_END_LOC,A6     ;Point to the location of ending test data
000010AA                            68                  
000010AA  0C39 001D 00002878        69  cpLoop          CMPI.B  #29,LINECOUNT       ;Pause output if screen lines = 29
000010B2  6700 002A                 70                  BEQ     FN_PauseOutput
000010B6                            71                  
000010B6  4EB9 00002328             72  cpReturn        JSR     SR_PrintAddr
000010BC  5239 00002878             73                  ADDQ.B  #1,LINECOUNT        ;Increment screen line counter
000010C2                            74                  
000010C2  4287                      75                  CLR.L   D7                  ;Clear existing opcode, if any exists
000010C4                            76                  
000010C4  3E12                      77                  MOVE.W  (A2),D7             ;Load next opcode
000010C6  103C 000C                 78                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
000010CA  E06F                      79                  LSR.W   D0,D7               ;Use shift to isolate bits for root branch
000010CC  CEFC 0006                 80                  MULU    #6,D7               ;Form offset to travel on jump table 
000010D0  4EB0 7000                 81                  JSR     0(A0,D7)            ;Jump to appropriate opcode, then return
000010D4                            82                  
000010D4  B4CE                      83                  CMP.W   A6,A2               ;Check if end of input machine code has been reached
000010D6  6C00 0022                 84                  BGE     Fn_Terminate        ;Exit the loop.
000010DA                            85                  
000010DA  544A                      86                  ADDA.W  #2,A2               ;Advance to next opcode
000010DC  60CC                      87                  BRA     cpLoop
000010DE                            88                  
000010DE  43F9 000026C0             89  FN_PauseOutput  LEA     MSG_PAUSE,A1
000010E4  103C 000E                 90                  MOVE.B  #14,D0
000010E8  4E4F                      91                  TRAP    #15
000010EA  103C 0005                 92                  MOVE.B  #5,D0
000010EE  4E4F                      93                  TRAP    #15
000010F0  13FC 0000 00002878        94                  MOVE.B  #0,LINECOUNT
000010F8  60BC                      95                  BRA     cpReturn
000010FA                            96  
000010FA  43F9 000026E2             97  Fn_Terminate    LEA     MSG_RESTART,A1      ;Store the console message for output.
00001100  103C 000E                 98                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001104  4E4F                      99                  TRAP    #15                 ;Display to console.
00001106                           100                  
00001106  43F9 0000288E            101                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
0000110C  103C 0002                102                  MOVE.B  #2,D0               ;Read string from keyboard to A1
00001110  4E4F                     103                  TRAP    #15                 ;Get the user input from console, length in D1
00001112                           104                  
00001112  43F9 0000278A            105                  LEA     MSG_LINEBREAK,A1    ;Append linefeed to the end of user input
00001118  103C 000E                106                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000111C  4E4F                     107                  TRAP    #15                 ;Display to console.
0000111E                           108                  
0000111E  13FC 0005 00002878       109                  MOVE.B  #5,LINECOUNT        ;Reset counter (question + prompts)
00001126                           110  
00001126  2E39 0000288E            111                  MOVE.L  INPUT_BUFFER,D7         
0000112C  0C87 79657300            112                  CMPI.L  #$79657300,D7       ;Match for ASCII value of 'yes'
00001132  6700 FEE0                113                  BEQ     FN_InputLoop        ;Restart the program
00001136                           114  
00001136  6000 0002                115                  BRA     END_PROGRAM
0000113A                           116  
0000113A                           117  
0000113A                           118  
0000113A                           119  
0000113A                           120  
0000113A                           121  
0000113A                           122  
0000113A                           123  
0000113A                           124  
0000113A                           125  
0000113A                           126  
0000113A                           127  
0000113A                           128  
0000113A                           129  
0000113A                           130  
0000113A                           131  -------------------- end include --------------------
0000113A                           132  
0000113A  FFFF FFFF                133  END_PROGRAM     SIMHALT                     ;Halt the simulator
0000113E                           134  
0000113E                           135  *------------------------------------------------------------------------------
0000113E                           136  
0000113E                           137                  INCLUDE 'EasyRiders_Branch.X68'
0000113E  4EF9 0000119E            138  ROOT_JMP_TABLE  JMP     BRANCH_0            ;$0 - Bit Manipulation/MOVEP/Immediate
00001144  4EF9 000019B4            139                  JMP     OP_MOVE_B           ;$1 - Move Byte
0000114A  4EF9 000019E6            140                  JMP     OP_MOVE_L           ;$2 - Move Long
00001150  4EF9 00001A3C            141                  JMP     OP_MOVE_W           ;$3 - Move Word
00001156  4EF9 000011C8            142                  JMP     BRANCH_4            ;$4 - Miscellaneous
0000115C  4EF9 00001202            143                  JMP     BRANCH_5            ;$5 - ADDQ/SUBQ/Scc/DBcc/TRAPc c
00001162  4EF9 00001218            144                  JMP     BRANCH_6            ;$6 - Bcc/BSR/BRA
00001168  4EF9 00001E3C            145                  JMP     OP_MOVEQ            ;$7 - MOVEQ
0000116E  4EF9 0000123A            146                  JMP     BRANCH_8            ;$8 - OR/DIV/SBCD
00001174  4EF9 00001254            147                  JMP     BRANCH_9            ;$9 - SUB/SUBX
0000117A  4EF9 000018D2            148                  JMP     OP_INVALID          ;$A - Unassigned, Reserved
00001180  4EF9 00001278            149                  JMP     BRANCH_B            ;$B - CMP/EOR
00001186  4EF9 0000129A            150                  JMP     BRANCH_C            ;$C - AND/MUL/ABCD/EXG
0000118C  4EF9 000012D8            151                  JMP     BRANCH_D            ;$D - ADD/ADDX
00001192  4EF9 000012FC            152                  JMP     BRANCH_E            ;$E - Shift/Rotate/Bit Field
00001198  4EF9 00001380            153                  JMP     BRANCH_F            ;$F - Coproccessor and CPU 32 Extensions
0000119E                           154  
0000119E  4EB9 00002310            155  BRANCH_0        JSR     SR_Eval11to8        ;Reads A2, Returns D7
000011A4                           156  
000011A4  BE3C 0002                157                  CMP.B   #$2,D7
000011A8  6700 0450                158                  BEQ     OP_ANDI             ;$2
000011AC  BE3C 0004                159                  CMP.B   #$4,D7
000011B0  6700 0FA4                160                  BEQ     OP_SUBI             ;$4
000011B4  BE3C 0006                161                  CMP.B   #$6,D7
000011B8  6700 02E8                162                  BEQ     OP_ADDI             ;$6
000011BC  BE3C 000C                163                  CMP.B   #$C,D7
000011C0  6700 0614                164                  BEQ     OP_CMPI             ;$C
000011C4                           165  
000011C4  6000 070C                166                  BRA     OP_INVALID          ;No matches found
000011C8                           167  
000011C8  4EB9 00002310            168  BRANCH_4        JSR     SR_Eval11to8        ;Reads A2, Returns D7
000011CE                           169                  
000011CE  BE3C 0002                170                  CMP.B   #$2,D7
000011D2  6700 056C                171                  BEQ     OP_CLR              ;$2
000011D6  BE3C 000E                172                  CMP.B   #$E,D7
000011DA  6700 01A8                173                  BEQ     BRANCH_4E           ;$E
000011DE                           174  
000011DE  4EB9 00002304            175                  JSR     SR_Eval11to6        ;Reads A2, Returns D7
000011E4  0207 002E                176                  ANDI.B  #%00101110,D7       ;Mask out bits where index = 0 for eval
000011E8                           177                  
000011E8  BE3C 0022                178                  CMP.B   #%00100010,D7
000011EC  6700 0916                179                  BEQ     OP_MOVEM            ;%1x001x
000011F0                           180  
000011F0  4EB9 000022F8            181                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
000011F6                           182                  
000011F6  BE3C 0007                183                  CMP.B   #%111,D7
000011FA  6700 074A                184                  BEQ     OP_LEA              ;%111
000011FE                           185  
000011FE  6000 06D2                186                  BRA     OP_INVALID          ;No matches found
00001202                           187  
00001202  3E12                     188  BRANCH_5        MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001204                           189  
00001204  0807 0008                190                  BTST    #8,D7
00001208  6700 02E8                191                  BEQ     OP_ADDQ             ;Bit 8 = 0
0000120C  0807 0008                192                  BTST    #8,D7
00001210  6600 0F94                193                  BNE     OP_SUBQ             ;Bit 8 = 1
00001214                           194                  
00001214  6000 06BC                195                  BRA     OP_INVALID          ;No matches found
00001218                           196  
00001218  4EB9 00002310            197  BRANCH_6        JSR     SR_Eval11to8        ;Reads A2, Returns D7
0000121E                           198                  
0000121E  BE3C 0004                199                  CMP.B   #$4,D7
00001222  6700 0446                200                  BEQ     OP_BCC              ;$4
00001226  BE3C 000E                201                  CMP.B   #$E,D7
0000122A  6700 04F4                202                  BEQ     OP_BGT              ;$E
0000122E  BE3C 000F                203                  CMP.B   #$F,D7
00001232  6700 04FC                204                  BEQ     OP_BLE              ;$F
00001236                           205                  
00001236  6000 069A                206                  BRA     OP_INVALID          ;No matches found
0000123A                           207  
0000123A  4EB9 000022F8            208  BRANCH_8        JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001240                           209                  
00001240  BE3C 0003                210                  CMP.B   #%011,D7
00001244  6700 0636                211                  BEQ     OP_DIVU             ;%011
00001248  BE3C 0007                212                  CMP.B   #%111,D7
0000124C  6700 05D8                213                  BEQ     OP_DIVS             ;%111
00001250                           214                  
00001250  6000 0680                215                  BRA     OP_INVALID          ;No matches found
00001254                           216  
00001254  4EB9 000022D4            217  BRANCH_9        JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000125A                           218  
0000125A  BE3C 0003                219                  CMP.B   #%11,D7
0000125E  6700 0EA2                220                  BEQ     OP_SUBA             ;%11
00001262                           221  
00001262  4EB9 000022EC            222                  JSR     SR_Eval8to4         ;Reads A2, Returns D7
00001268  0207 0013                223                  ANDI.B  #%00010011,D7       ;Mask out bits where index = 0 for eval
0000126C                           224                  
0000126C  BE3C 0010                225                  CMP.B   #%00010000,D7
00001270  6700 0660                226                  BEQ     OP_INVALID          ;%1xx00 - Op not supported
00001274                           227                  
00001274  6000 0DFC                228                  BRA     OP_SUB              ;All other combinations
00001278                           229  
00001278  4EB9 000022F8            230  BRANCH_B        JSR     SR_Eval8to6         ;Reads A2, Returns D7
0000127E                           231  
0000127E  BE3C 0000                232                  CMP.B   #%000,D7
00001282  6700 04FC                233                  BEQ     OP_CMP              ;%000
00001286  BE3C 0001                234                  CMP.B   #%001,D7
0000128A  6700 04F4                235                  BEQ     OP_CMP              ;%001
0000128E  BE3C 0002                236                  CMP.B   #%010,D7
00001292  6700 04EC                237                  BEQ     OP_CMP              ;%010
00001296                           238                  
00001296  6000 063A                239                  BRA     OP_INVALID          ;No matches found
0000129A                           240  
0000129A  4EB9 000022F8            241  BRANCH_C        JSR     SR_Eval8to6         ;Reads A2, Returns D7
000012A0                           242  
000012A0  BE3C 0003                243                  CMP.B   #%011,D7
000012A4  6700 0C52                244                  BEQ     OP_MULU             ;%011
000012A8  BE3C 0007                245                  CMP.B   #%111,D7
000012AC  6700 0BF4                246                  BEQ     OP_MULS             ;%111
000012B0                           247                  
000012B0  4EB9 000022EC            248                  JSR     SR_Eval8to4         ;Reads A2, Returns D7
000012B6  0207 001F                249                  ANDI.B  #%00011111,D7       ;Mask out bits where index = 0 for eval
000012BA                           250                  
000012BA  BE3C 0010                251                  CMP.B   #%00010000,D7
000012BE  6700 0612                252                  BEQ     OP_INVALID          ;%10000 - Op not supported
000012C2                           253                  
000012C2  4EB9 000022EC            254                  JSR     SR_Eval8to4         ;Reads A2, Returns D7
000012C8  0207 0013                255                  ANDI.B  #%00010011,D7       ;Mask out bits where index = 0 for eval
000012CC                           256                  
000012CC  BE3C 0010                257                  CMP.B   #%00010000,D7
000012D0  6700 0600                258                  BEQ     OP_INVALID          ;%1xx00 - Op not supported
000012D4                           259                  
000012D4  6000 0294                260                  BRA     OP_AND              ;All other combinations
000012D8                           261  
000012D8  4EB9 000022EC            262  BRANCH_D        JSR     SR_Eval8to4         ;Reads A2, Returns D7
000012DE  0207 0013                263                  ANDI.B  #%00010011,D7       ;Mask out bits where index = 0 for eval
000012E2                           264  
000012E2  BE3C 0010                265                  CMP.B   #%00010000,D7
000012E6  6700 05EA                266                  BEQ     OP_INVALID          ;%1xx00 - Op not supported
000012EA                           267                  
000012EA  4EB9 000022D4            268                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000012F0                           269  
000012F0  BE3C 0003                270                  CMP.B   #%11,D7
000012F4  6700 0158                271                  BEQ     OP_ADDA             ;%11
000012F8                           272                  
000012F8  6000 00C4                273                  BRA     OP_ADD              ;All other combinations
000012FC                           274  
000012FC  4EB9 00002304            275  BRANCH_E        JSR     SR_Eval11to6        ;Reads A2, Returns D7
00001302  0207 003F                276                  ANDI.B  #%00111111,D7       ;Mask out bits where index = 0 for eval
00001306  BE3C 0003                277                  CMP.B   #%00000011,D7
0000130A  6700 034E                278                  BEQ     OP_ASR              ;%000011
0000130E  BE3C 000B                279                  CMP.B   #%00001011,D7
00001312  6700 0690                280                  BEQ     OP_LSR              ;%001011
00001316  BE3C 001B                281                  CMP.B   #%00011011,D7
0000131A  6700 0C56                282                  BEQ     OP_ROR              ;%011011
0000131E                           283  
0000131E  BE3C 0007                284                  CMP.B   #%00000111,D7
00001322  6700 0326                285                  BEQ     OP_ASL              ;%000111
00001326  BE3C 000F                286                  CMP.B   #%00001111,D7
0000132A  6700 0668                287                  BEQ     OP_LSL              ;%001111
0000132E  BE3C 001F                288                  CMP.B   #%00011111,D7
00001332  6700 0C2E                289                  BEQ     OP_ROL              ;%011111
00001336                           290  
00001336  0207 003B                291                  ANDI.B  #%00111011,D7       ;Mask out bits where index = 0 for eval
0000133A                           292                  
0000133A  BE3C 0013                293                  CMP.B   #%00010011,D7
0000133E  6700 0592                294                  BEQ     OP_INVALID          ;%010x11
00001342                           295                  
00001342  4EB9 000022E0            296                  JSR     SR_Eval8to3         ;Reads A2, Returns D7
00001348  0207 0023                297                  ANDI.B  #%00100011,D7       ;Mask out bits where index = 0 for eval
0000134C                           298                  
0000134C  BE3C 0000                299                  CMP.B   #%00000000,D7
00001350  6700 0308                300                  BEQ     OP_ASR              ;%0xxx00
00001354  BE3C 0001                301                  CMP.B   #%00000001,D7
00001358  6700 064A                302                  BEQ     OP_LSR              ;%0xxx01
0000135C  BE3C 0003                303                  CMP.B   #%00000011,D7
00001360  6700 0C10                304                  BEQ     OP_ROR              ;%0xxx11
00001364  BE3C 0020                305                  CMP.B   #%00100000,D7
00001368  6700 02E0                306                  BEQ     OP_ASL              ;%1xxx00
0000136C  BE3C 0021                307                  CMP.B   #%00100001,D7
00001370  6700 0622                308                  BEQ     OP_LSL              ;%1xxx01
00001374  BE3C 0023                309                  CMP.B   #%00100011,D7
00001378  6700 0BE8                310                  BEQ     OP_ROL              ;%1xxx11
0000137C                           311                  
0000137C  6000 0554                312                  BRA     OP_INVALID
00001380                           313  
00001380  6000 0CEC                314  BRANCH_F        BRA     OP_SIMHALT
00001384                           315  
00001384  4EB9 000022C8            316  BRANCH_4E       JSR     SR_Eval7to4         ;Reads A2, Returns D7
0000138A                           317                  
0000138A  BE3C 0007                318                  CMP.B   #$7,D7
0000138E  6700 0014                319                  BEQ     BRANCH_4E7          ;$7
00001392                           320                  
00001392  4EB9 000022D4            321                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001398                           322                  
00001398  BE3C 0002                323                  CMP.B   #%10,D7
0000139C  6700 056C                324                  BEQ     OP_JSR              ;%10
000013A0                           325                  
000013A0  6000 0530                326                  BRA     OP_INVALID          ;No matches found
000013A4                           327              
000013A4  4EB9 000022A4            328  BRANCH_4E7      JSR     SR_Eval3to0         ;Reads A2, Returns D7
000013AA                           329  
000013AA  BE3C 0001                330                  CMP.B   #$1,D7
000013AE  6700 0B9E                331                  BEQ     OP_NOP              ;$1
000013B2  BE3C 0005                332                  CMP.B   #$5,D7
000013B6  6700 0BCA                333                  BEQ     OP_RTS              ;$5
000013BA                           334                  
000013BA  6000 0516                335                  BRA     OP_INVALID          ;No matches found
000013BE                           336  
000013BE                           337  
000013BE                           338  
000013BE                           339  
000013BE                           340  
000013BE                           341  
000013BE                           342  
000013BE                           343  
000013BE                           344  
000013BE                           345  -------------------- end include --------------------
000013BE                           346                  INCLUDE 'EasyRiders_Opcodes.X68'
000013BE  43F9 0000278D            347  OP_ADD          LEA     DISP_ADD,A1         ;Store the console message for output.
000013C4  103C 000E                348                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000013C8  4E4F                     349                  TRAP    #15                 ;Display to console.
000013CA                           350  
000013CA  4EB9 000022D4            351                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000013D0                           352                  
000013D0  13FC 0005 00002877       353                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
000013D8  4EB9 000023B8            354                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000013DE                           355                  
000013DE  0812 0008                356                  BTST    #8,(A2)             
000013E2  6700 0006                357                  BEQ     opAddDnMode         ;Bit 8 = 0
000013E6                           358                  
000013E6  6000 0032                359                  BRA     opAddEAMode         ;Bit 8 = 1
000013EA                           360                  
000013EA  4EB9 000022B0            361  opAddDnMode     JSR     SR_Eval5to3         ;Reads A2, Returns D7
000013F0  33C7 0000287A            362                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
000013F6                           363                  
000013F6  4EB9 00002298            364                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000013FC  33C7 0000287C            365                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001402                           366                  
00001402  33FC 0000 0000287E       367                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
0000140A                           368                  
0000140A  4EB9 0000231C            369                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001410  33C7 00002880            370                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001416                           371                  
00001416  6000 002E                372                  BRA     opAddPrintEA
0000141A                           373  
0000141A  33FC 0000 0000287A       374  opAddEAMode     MOVE.W  #0,SRC_MODE         ;Force Dn src mode
00001422                           375                  
00001422  4EB9 0000231C            376                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001428  33C7 0000287C            377                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
0000142E                           378                  
0000142E  4EB9 000022B0            379                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001434  33C7 0000287E            380                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
0000143A                           381                  
0000143A  4EB9 00002298            382                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001440  33C7 00002880            383                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001446                           384  
00001446  4EB9 00002344            385  opAddPrintEA    JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
0000144C  4E75                     386                  RTS
0000144E                           387  
0000144E  43F9 00002791            388  OP_ADDA         LEA     DISP_ADDA,A1        ;Store the console message for output.
00001454  103C 000E                389                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001458  4E4F                     390                  TRAP    #15                 ;Display to console.
0000145A                           391                  
0000145A  4EB9 000022F8            392                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001460                           393  
00001460  13FC 0004 00002877       394                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001468  4EB9 000023D8            395                  JSR     SR_PrntSize3bit     ;Reads D7, Returns void
0000146E                           396                  
0000146E  4EB9 000022B0            397                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001474  33C7 0000287A            398                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
0000147A                           399                  
0000147A  4EB9 00002298            400                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001480  33C7 0000287C            401                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
00001486                           402                  
00001486  33FC 0001 0000287E       403                  MOVE.W  #1,DEST_MODE        ;Force An dest mode
0000148E                           404                  
0000148E  4EB9 0000231C            405                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001494  33C7 00002880            406                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000149A                           407                  
0000149A  4EB9 00002344            408                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000014A0  4E75                     409                  RTS
000014A2                           410  
000014A2  43F9 00002796            411  OP_ADDI         LEA     DISP_ADDI,A1        ;Store the console message for output.
000014A8  103C 000E                412                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000014AC  4E4F                     413                  TRAP    #15                 ;Display to console.
000014AE                           414                  
000014AE  4EB9 000022D4            415                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000014B4                           416                  
000014B4  13FC 0004 00002877       417                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA              
000014BC  4EB9 000023B8            418                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000014C2                           419                  
000014C2  33FC 0007 0000287A       420                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
000014CA  33FC 0004 0000287C       421                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
000014D2                           422                  
000014D2  4EB9 000022B0            423                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000014D8  33C7 0000287E            424                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
000014DE                           425                  
000014DE  4EB9 00002298            426                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000014E4  33C7 00002880            427                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000014EA                           428                  
000014EA  4EB9 00002344            429                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000014F0  4E75                     430                  RTS
000014F2                           431  
000014F2  43F9 0000279B            432  OP_ADDQ         LEA     DISP_ADDQ,A1        ;Store the console message for output.
000014F8  103C 000E                433                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000014FC  4E4F                     434                  TRAP    #15                 ;Display to console.
000014FE                           435  
000014FE  4EB9 000022D4            436                  JSR     SR_Eval7to6            ;Reads A2, Returns D7
00001504                           437                  
00001504  13FC 0004 00002877       438                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
0000150C  4EB9 000023B8            439                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001512                           440  
00001512  43F9 0000283A            441  opAqCount       LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001518  103C 000E                442                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000151C  4E4F                     443                  TRAP    #15                 ;Display to console.
0000151E                           444                  
0000151E  4EB9 0000231C            445                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001524                           446                  
00001524  4281                     447                  CLR.L   D1                  ;Ensure output register is clear
00001526                           448                  
00001526  3207                     449                  MOVE.W  D7,D1               ;Copy bits to D1 for console output.
00001528                           450                  
00001528  B23C 0000                451                  CMP.B   #0,D1
0000152C  6700 002E                452                  BEQ     opAqIfZero          ;#0 - value of zero represents a count of eight
00001530                           453  
00001530  103C 0003                454  opAqDispCnt     MOVE.B  #3,D0               ;Will display signed number from D1
00001534  4E4F                     455                  TRAP    #15                 ;Display to console.
00001536                           456                  
00001536  43F9 00002848            457                  LEA     DISP_COMMA,A1       ;Store the console message for output.
0000153C  103C 000E                458                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001540  4E4F                     459                  TRAP    #15                 ;Display to console.
00001542                           460                  
00001542  4EB9 000022B0            461                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001548  3407                     462                  MOVE.W  D7,D2               ;Copy bits to decode dest mode
0000154A                           463                  
0000154A  4EB9 00002298            464                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001550  3607                     465                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00001552                           466                  
00001552  4EB9 0000248E            467                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001558                           468  
00001558  6000 0008                469                  BRA     opAqDone
0000155C                           470  
0000155C  323C 0008                471  opAqIfZero      MOVE.W  #8,D1               ;#0 - value of zero represents a count of eight
00001560  60CE                     472                  BRA     OpAqDispCnt
00001562                           473  
00001562  4EB9 00002438            474  opAqDone        JSR     SR_PrintCRLF        ;Returns console output.
00001568  4E75                     475                  RTS
0000156A                           476  
0000156A  43F9 000027A0            477  OP_AND          LEA     DISP_AND,A1         ;Store the console message for output.
00001570  103C 000E                478                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001574  4E4F                     479                  TRAP    #15                 ;Display to console.
00001576                           480                  
00001576  4EB9 000022D4            481                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000157C                           482                  
0000157C  13FC 0005 00002877       483                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001584  4EB9 000023B8            484                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
0000158A                           485                  
0000158A  0812 0008                486                  BTST    #8,(A2)             
0000158E  6700 0006                487                  BEQ     opAndDnMode         ;Bit 8 = 0
00001592                           488                  
00001592  6000 0032                489                  BRA     opAndEAMode         ;Bit 8 = 1
00001596                           490                  
00001596  4EB9 000022B0            491  opAndDnMode     JSR     SR_Eval5to3         ;Reads A2, Returns D7
0000159C  33C7 0000287A            492                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
000015A2                           493                  
000015A2  4EB9 00002298            494                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000015A8  33C7 0000287C            495                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000015AE                           496                  
000015AE  33FC 0000 0000287E       497                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
000015B6                           498                  
000015B6  4EB9 0000231C            499                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000015BC  33C7 00002880            500                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000015C2                           501                  
000015C2  6000 002E                502                  BRA     opAndPrintEA
000015C6                           503  
000015C6  33FC 0000 0000287A       504  opAndEAMode     MOVE.W  #0,SRC_MODE         ;Force Dn src mode
000015CE                           505                  
000015CE  4EB9 0000231C            506                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000015D4  33C7 0000287C            507                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000015DA                           508                  
000015DA  4EB9 000022B0            509                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000015E0  33C7 0000287E            510                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
000015E6                           511                  
000015E6  4EB9 00002298            512                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000015EC  33C7 00002880            513                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000015F2                           514  
000015F2  4EB9 00002344            515  opAndPrintEA    JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000015F8  4E75                     516                  RTS
000015FA                           517  
000015FA  43F9 000027A4            518  OP_ANDI         LEA     DISP_ANDI,A1        ;Store the console message for output.
00001600  103C 000E                519                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001604  4E4F                     520                  TRAP    #15                 ;Display to console.
00001606                           521                  
00001606  4EB9 000022D4            522                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
0000160C                           523                  
0000160C  13FC 0004 00002877       524                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001614  4EB9 000023B8            525                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
0000161A                           526                  
0000161A  33FC 0007 0000287A       527                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
00001622  33FC 0004 0000287C       528                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
0000162A                           529                  
0000162A  4EB9 000022B0            530                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001630  33C7 0000287E            531                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
00001636                           532                  
00001636  4EB9 00002298            533                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
0000163C  33C7 00002880            534                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001642                           535                  
00001642  4EB9 00002344            536                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001648  4E75                     537                  RTS
0000164A                           538  
0000164A  43F9 000027A9            539  OP_ASL          LEA     DISP_ASL,A1         ;Store the console message for output.
00001650  103C 000E                540                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001654  4E4F                     541                  TRAP    #15                 ;Display to console.
00001656                           542                  
00001656  6000 093E                543                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
0000165A                           544                  
0000165A  43F9 000027AD            545  OP_ASR          LEA     DISP_ASR,A1         ;Store the console message for output.
00001660  103C 000E                546                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001664  4E4F                     547                  TRAP    #15                 ;Display to console.
00001666                           548                  
00001666  6000 092E                549                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
0000166A                           550  
0000166A  43F9 000027B1            551  OP_BCC          LEA     DISP_BCC,A1         ;Store the console message for output.
00001670  103C 000E                552                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001674  4E4F                     553                  TRAP    #15                 ;Display to console.
00001676                           554                  
00001676  6000 0002                555                  BRA     OP_BccGroup         ;Grouping for BCC/BGT/BLE
0000167A                           556                  
0000167A  3E12                     557  OP_BccGroup     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
0000167C                           558                  
0000167C  BE3C 0000                559                  CMP.B   #$00,D7
00001680  6700 0056                560                  BEQ     bg16bit             ;Evaluate as 16-bit Displacement
00001684                           561                  
00001684  BE3C 00FF                562                  CMP.B   #$FF,D7
00001688  6700 0072                563                  BEQ     bg32bit             ;Evaluate as 32-bit Displacement
0000168C                           564                  
0000168C  43F9 0000284C            565                  LEA     DISP_SIZE_B,A1      ;Store the console message for output.
00001692  103C 000E                566                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001696  4E4F                     567                  TRAP    #15                 ;Display to console.
00001698                           568                  
00001698  13FC 0005 00002877       569                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
000016A0  4EB9 00002446            570                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000016A6                           571                  
000016A6  264A                     572                  MOVEA.L A2,A3               ;Copy the current opcode location
000016A8  544B                     573                  ADDA.W  #2,A3               ;Advance to end of opcode to calculate displacement
000016AA                           574  
000016AA  4EB9 000022C0            575                  JSR     SR_Eval7to0         ;Reads A2, Returns D7
000016B0                           576                  
000016B0  BE38 0080                577                  CMP.B   $80,D7              ;Check if the number is a negative 2's complement byte
000016B4  6D00 0016                578                  BLT     bgSub8bit           ;If so, handle it appropriately.
000016B8  D6C7                     579                  ADDA.W  D7,A3               ;Apply displacement to address pointer to get branch location
000016BA                           580  
000016BA  2E0B                     581  bgReturn        MOVE.L  A3,D7               ;Copy the branch location to D7 for SR_PrintHex
000016BC  7C08                     582                  MOVE.L  #8,D6               ;Number of characters to display.
000016BE  4EB9 00002382            583                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
000016C4                           584                  
000016C4  4EB9 00002438            585  bgFinish        JSR     SR_PrintCRLF
000016CA  4E75                     586                  RTS
000016CC                           587  
000016CC  CFFC FFFF                588  bgSub8bit       MULS    #-1,D7              ;Find the absolute value of the negative number
000016D0  4285                     589                  CLR.L   D5
000016D2  1A07                     590                  MOVE.B  D7,D5               ;Isolate the last byte as the displacement
000016D4  96C5                     591                  SUBA.W  D5,A3               ;Apply displacement to address pointer to get branch location
000016D6  60E2                     592                  BRA     bgReturn
000016D8                           593  
000016D8  13FC 0007 00002877       594  bg16bit         MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
000016E0  4EB9 00002446            595                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000016E6                           596  
000016E6  264A                     597                  MOVEA.L A2,A3               ;Copy the current instruction pointer location
000016E8                           598                  
000016E8  544B                     599                  ADDA.W  #2,A3               ;The next word contains the absolute data.
000016EA                           600                  
000016EA  3E13                     601                  MOVE.W  (A3),D7             ;Copy the absolute data to calculate displacement
000016EC  D6C7                     602                  ADDA.W  D7,A3               ;Apply displacement to address pointer to get branch location
000016EE                           603                  
000016EE  2E0B                     604                  MOVE.L  A3,D7               ;Copy the branch location to D7 for SR_PrintHex
000016F0  7C08                     605                  MOVE.L  #8,D6               ;Number of characters to display
000016F2  4EB9 00002382            606                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
000016F8                           607                  
000016F8  544A                     608                  ADDA.W  #2,A2               ;Advance the instruction pointer.
000016FA                           609                  
000016FA  60C8                     610                  BRA     bgFinish
000016FC                           611  
000016FC  13FC 0007 00002877       612  bg32bit         MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
00001704  4EB9 00002446            613                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
0000170A                           614  
0000170A  264A                     615                  MOVEA.L A2,A3               ;Copy the current instruction pointer location
0000170C                           616                  
0000170C  544B                     617                  ADDA.W  #2,A3               ;The next word contains the absolute data.
0000170E                           618                  
0000170E  3E13                     619                  MOVE.W  (A3),D7             ;Copy the absolute data to calculate displacement
00001710  D6C7                     620                  ADDA.W  D7,A3               ;Apply displacement to address pointer to get branch location
00001712                           621                  
00001712  2E0B                     622                  MOVE.L  A3,D7               ;Copy the branch location to D7 for SR_PrintHex
00001714  7C08                     623                  MOVE.L  #8,D6               ;Number of characters to display
00001716  4EB9 00002382            624                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
0000171C                           625                  
0000171C  584A                     626                  ADDA.W  #4,A2               ;Advance the instruction pointer.
0000171E                           627  
0000171E  60A4                     628                  BRA     bgFinish
00001720                           629  
00001720  43F9 000027BA            630  OP_BGT          LEA     DISP_BGT,A1         ;Store the console message for output.
00001726  103C 000E                631                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000172A  4E4F                     632                  TRAP    #15                 ;Display to console.
0000172C                           633                  
0000172C  6000 FF4C                634                  BRA     OP_BccGroup         ;Grouping for BCC/BGT/BLE
00001730                           635  
00001730  43F9 000027BE            636  OP_BLE          LEA     DISP_BLE,A1         ;Store the console message for output.
00001736  103C 000E                637                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000173A  4E4F                     638                  TRAP    #15                 ;Display to console.
0000173C                           639                  
0000173C  6000 FF3C                640                  BRA     OP_BccGroup         ;Grouping for BCC/BGT/BLE
00001740                           641  
00001740  43F9 000027C2            642  OP_CLR          LEA     DISP_CLR,A1         ;Store the console message for output.
00001746  103C 000E                643                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000174A  4E4F                     644                  TRAP    #15                 ;Display to console.
0000174C                           645                  
0000174C  4EB9 000022D4            646                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001752  1807                     647                  MOVE.B  D7,D4               ;Store size for EA decoding
00001754                           648                  
00001754  13FC 0005 00002877       649                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
0000175C  4EB9 000023B8            650                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001762                           651                  
00001762  4EB9 000022B0            652                  JSR     SR_Eval5to3         ;Returns op mode in D7
00001768  1407                     653                  MOVE.B  D7,D2
0000176A                           654                  
0000176A  4EB9 00002298            655                  JSR     SR_Eval2to0         ;Returns op register in D7
00001770  1607                     656                  MOVE.B  D7,D3
00001772                           657                  
00001772  4EB9 0000248E            658                  JSR     EA_Decode_EA        ;Prints EA information
00001778                           659                  
00001778  4EB9 00002438            660                  JSR     SR_PrintCRLF
0000177E  4E75                     661                  RTS
00001780                           662  
00001780  43F9 000027C6            663  OP_CMP          LEA     DISP_CMP,A1         ;Store the console message for output.
00001786  103C 000E                664                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000178A  4E4F                     665                  TRAP    #15                 ;Display to console.
0000178C                           666                  
0000178C  4EB9 000022D4            667                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001792  1807                     668                  MOVE.B  D7,D4               ;Store size for EA decoding
00001794                           669                  
00001794  13FC 0005 00002877       670                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
0000179C  4EB9 000023B8            671                  JSR     SR_PrntSize2bit
000017A2                           672                  
000017A2  4EB9 000022B0            673                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000017A8  33C7 0000287A            674                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
000017AE                           675                  
000017AE  4EB9 00002298            676                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000017B4  33C7 0000287C            677                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000017BA                           678                  
000017BA  33FC 0000 0000287E       679                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
000017C2                           680                  
000017C2  4EB9 0000231C            681                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000017C8  33C7 00002880            682                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000017CE                           683  
000017CE  4EB9 00002344            684                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000017D4  4E75                     685                  RTS
000017D6                           686                  
000017D6  43F9 000027CA            687  OP_CMPI         LEA     DISP_CMPI,A1        ;Store the console message for output.
000017DC  103C 000E                688                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000017E0  4E4F                     689                  TRAP    #15                 ;Display to console.
000017E2                           690                  
000017E2  4EB9 000022D4            691                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000017E8                           692                  
000017E8  13FC 0004 00002877       693                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA              
000017F0  4EB9 000023B8            694                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000017F6                           695                  
000017F6  33FC 0007 0000287A       696                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
000017FE  33FC 0004 0000287C       697                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
00001806                           698                  
00001806  4EB9 000022B0            699                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
0000180C  33C7 0000287E            700                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
00001812                           701                  
00001812  4EB9 00002298            702                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001818  33C7 00002880            703                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000181E                           704                  
0000181E  4EB9 00002344            705                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001824  4E75                     706                  RTS
00001826                           707  
00001826  43F9 000027CF            708  OP_DIVS         LEA     DISP_DIVS,A1        ;Store the console message for output.
0000182C  103C 000E                709                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001830  4E4F                     710                  TRAP    #15                 ;Display to console.
00001832                           711  
00001832  13FC 0001 00002882       712                  MOVE.B  #1,OP_SIZE          ;Store the size of the EA as word.
0000183A                           713  
0000183A  13FC 0006 00002877       714                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001842  4EB9 00002446            715                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001848                           716  
00001848  4EB9 000022B0            717                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
0000184E  33C7 0000287A            718                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001854                           719                  
00001854  4EB9 00002298            720                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
0000185A  33C7 0000287C            721                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001860                           722                  
00001860  4EB9 0000231C            723                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001866  33FC 0000 0000287E       724                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
0000186E  33C7 00002880            725                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001874                           726                  
00001874  4EB9 00002344            727                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
0000187A  4E75                     728                  RTS
0000187C                           729  
0000187C  43F9 000027D4            730  OP_DIVU         LEA     DISP_DIVU,A1        ;Store the console message for output.
00001882  103C 000E                731                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001886  4E4F                     732                  TRAP    #15                 ;Display to console.
00001888                           733  
00001888  13FC 0001 00002882       734                  MOVE.B  #1,OP_SIZE          ;Store the size of the EA as word.
00001890                           735  
00001890  13FC 0006 00002877       736                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001898  4EB9 00002446            737                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
0000189E                           738  
0000189E  4EB9 000022B0            739                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000018A4  33C7 0000287A            740                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
000018AA                           741                  
000018AA  4EB9 00002298            742                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000018B0  33C7 0000287C            743                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
000018B6                           744                  
000018B6  4EB9 0000231C            745                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000018BC  33FC 0000 0000287E       746                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
000018C4  33C7 00002880            747                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000018CA                           748                  
000018CA  4EB9 00002344            749                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000018D0  4E75                     750                  RTS
000018D2                           751  
000018D2  43F9 000027D9            752  OP_INVALID      LEA     DISP_INVALID,A1     ;Store the console message for output.
000018D8  103C 000E                753                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000018DC  4E4F                     754                  TRAP    #15                 ;Display to console.
000018DE                           755                  
000018DE  13FC 0006 00002877       756                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
000018E6  4EB9 00002446            757                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
000018EC                           758                  
000018EC  43F9 0000283C            759                  LEA     DISP_DOLLAR,A1      ;Store the console message for output.
000018F2  103C 000E                760                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000018F6  4E4F                     761                  TRAP    #15                 ;Display to console.
000018F8                           762                  
000018F8  3E12                     763                  MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000018FA  7C04                     764                  MOVE.L  #4,D6               ;Number of characters to display
000018FC  4EB9 00002382            765                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
00001902                           766                  
00001902  4EB9 00002438            767                  JSR     SR_PrintCRLF        ;Returns console output.
00001908  4E75                     768                  RTS
0000190A                           769  
0000190A  43F9 000027E4            770  OP_JSR          LEA     DISP_JSR,A1
00001910  103C 000E                771                  MOVE.B  #14,D0
00001914  4E4F                     772                  TRAP    #15
00001916                           773                  
00001916  13FC 0007 00002877       774                  MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
0000191E  4EB9 00002446            775                  JSR     SR_PrintTab
00001924                           776                  
00001924  4EB9 000022B0            777                  JSR     SR_Eval5to3
0000192A  1407                     778                  MOVE.B  D7,D2
0000192C                           779                  
0000192C  4EB9 00002298            780                  JSR     SR_Eval2to0
00001932  1607                     781                  MOVE.B  D7,D3
00001934                           782                  
00001934  183C 001C                783                  MOVE.B  #28,D4
00001938                           784                  
00001938  4EB9 0000248E            785                  JSR     EA_Decode_EA
0000193E                           786                  
0000193E  4EB9 00002438            787                  JSR     SR_PrintCRLF
00001944  4E75                     788                  RTS
00001946                           789  
00001946  43F9 000027E8            790  OP_LEA          LEA     DISP_LEA,A1         ;Store the console message for output.
0000194C  103C 000E                791                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001950  4E4F                     792                  TRAP    #15                 ;Display to console.
00001952                           793                  
00001952  13FC 0007 00002877       794                  MOVE.B  #7,TAB_LENGTH       ;Print spaces between opcode name and EA
0000195A  4EB9 00002446            795                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001960                           796  
00001960  4EB9 000022B0            797                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001966  33C7 0000287A            798                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
0000196C                           799                  
0000196C  4EB9 00002298            800                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001972  33C7 0000287C            801                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001978                           802                  
00001978  4EB9 0000231C            803                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
0000197E  33FC 0001 0000287E       804                  MOVE.W  #1,DEST_MODE        ;Force An dest mode
00001986  33C7 00002880            805                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000198C                           806                  
0000198C  4EB9 00002344            807                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001992  4E75                     808                  RTS
00001994                           809  
00001994  43F9 000027EC            810  OP_LSL          LEA     DISP_LSL,A1         ;Store the console message for output.
0000199A  103C 000E                811                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000199E  4E4F                     812                  TRAP    #15                 ;Display to console.
000019A0                           813                  
000019A0  6000 05F4                814                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
000019A4                           815  
000019A4  43F9 000027F0            816  OP_LSR          LEA     DISP_LSR,A1         ;Store the console message for output.
000019AA  103C 000E                817                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000019AE  4E4F                     818                  TRAP    #15                 ;Display to console.
000019B0                           819                  
000019B0  6000 05E4                820                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
000019B4                           821  
000019B4  43F9 000027F4            822  OP_MOVE_B       LEA     DISP_MOVE,A1           ;
000019BA  103C 000E                823                  MOVE.B  #14,D0              ;
000019BE  4E4F                     824                  TRAP    #15
000019C0                           825              
000019C0  43F9 0000284C            826                  LEA     DISP_SIZE_B,A1
000019C6  103C 000E                827                  MOVE.B  #14,D0
000019CA  4E4F                     828                  TRAP    #15
000019CC                           829                  
000019CC  13FC 0000 00002882       830                  MOVE.B  #0,OP_SIZE               *Store size for EA decode
000019D4                           831                  
000019D4  13FC 0004 00002877       832                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
000019DC  4EB9 00002446            833                  JSR     SR_PrintTab
000019E2                           834                                       
000019E2  6000 00AE                835                  BRA     MOVE_Basic
000019E6                           836                  
000019E6                           837      
000019E6  43F9 000027F4            838  OP_MOVE_L       LEA     DISP_MOVE,A1
000019EC  103C 000E                839                  MOVE.B  #14,D0
000019F0  4E4F                     840                  TRAP    #15
000019F2                           841                  
000019F2  13FC 0004 00002877       842                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
000019FA                           843                  
000019FA  4EB9 000022F8            844                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001A00                           845                  
00001A00  BE7C 0001                846                  CMP     #%001,D7
00001A04  6700 0020                847                  BEQ     mlMOVEA             ;%001
00001A08                           848                  
00001A08  43F9 0000284F            849  mlReturn        LEA     DISP_SIZE_L,A1
00001A0E  103C 000E                850                  MOVE.B  #14,D0
00001A12  4E4F                     851                  TRAP    #15
00001A14                           852                  
00001A14  13FC 0002 00002882       853                  MOVE.B  #2,OP_SIZE              *Store size for EA decode  
00001A1C                           854  
00001A1C  4EB9 00002446            855                  JSR     SR_PrintTab     
00001A22                           856                  
00001A22  6000 006E                857                  BRA     MOVE_Basic
00001A26                           858                  
00001A26  43F9 00002855            859  mlMOVEA         LEA     DISP_MOVE_A,A1      ;Store the console message for output.
00001A2C  103C 000E                860                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001A30  4E4F                     861                  TRAP    #15                 ;Display to console.
00001A32                           862                  
00001A32  13FC 0003 00002877       863                  MOVE.B  #3,TAB_LENGTH       ;Print spaces between opcode name and EA
00001A3A                           864                  
00001A3A  60CC                     865                  BRA     mlReturn
00001A3C                           866  
00001A3C  43F9 000027F4            867  OP_MOVE_W       LEA     DISP_MOVE,A1
00001A42  103C 000E                868                  MOVE.B  #14,D0
00001A46  4E4F                     869                  TRAP    #15
00001A48                           870  
00001A48  13FC 0004 00002877       871                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
00001A50                           872  
00001A50  4EB9 000022F8            873                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00001A56                           874                  
00001A56  BE7C 0001                875                  CMP     #%001,D7
00001A5A  6700 0020                876  mwReturn        BEQ     mwMOVEA             ;%001
00001A5E                           877  
00001A5E  43F9 00002852            878                  LEA     DISP_SIZE_W,A1
00001A64  103C 000E                879                  MOVE.B  #14,D0
00001A68  4E4F                     880                  TRAP    #15
00001A6A                           881                  
00001A6A  13FC 0001 00002882       882                  MOVE.B  #1,OP_SIZE               *Store size for EA decode
00001A72                           883                  
00001A72  4EB9 00002446            884                  JSR     SR_PrintTab
00001A78                           885                  
00001A78  6000 0018                886                  BRA     MOVE_Basic
00001A7C                           887  
00001A7C  43F9 00002855            888  mwMOVEA         LEA     DISP_MOVE_A,A1      ;Store the console message for output.
00001A82  103C 000E                889                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001A86  4E4F                     890                  TRAP    #15                 ;Display to console.
00001A88                           891                  
00001A88  13FC 0003 00002877       892                  MOVE.B  #3,TAB_LENGTH       ;Print spaces between opcode name and EA
00001A90                           893                  
00001A90  60C8                     894                  BRA     mwReturn
00001A92                           895  
00001A92  33D2 00002884            896  MOVE_Basic      MOVE.W  (A2),CURRENT_OP
00001A98  183C 000D                897                  MOVE.B  #13,D4
00001A9C                           898              
00001A9C  3439 00002884            899                  MOVE.W  CURRENT_OP,D2
00001AA2  1A3C 000A                900                  MOVE.B  #10,D5
00001AA6  EB6A                     901                  LSL.W   D5,D2
00001AA8  E86A                     902                  LSR.W   D4,D2
00001AAA                           903              
00001AAA  3639 00002884            904                  MOVE.W  CURRENT_OP,D3
00001AB0  1A3C 000D                905                  MOVE.B  #13,D5
00001AB4  EB6B                     906                  LSL.W   D5,D3
00001AB6  E86B                     907                  LSR.W   D4,D3
00001AB8                           908              
00001AB8  4EB9 0000248E            909                  JSR     EA_Decode_EA
00001ABE                           910  
00001ABE  183C 000D                911                  MOVE.B  #13,D4
00001AC2                           912                  
00001AC2  43F9 00002848            913                  LEA     DISP_COMMA,A1
00001AC8  103C 000E                914                  MOVE.B  #14,D0
00001ACC  4E4F                     915                  TRAP    #15
00001ACE                           916              
00001ACE  3439 00002884            917                  MOVE.W  CURRENT_OP,D2
00001AD4  1A3C 0007                918                  MOVE.B  #7,D5
00001AD8  EB6A                     919                  LSL.W   D5,D2
00001ADA  E86A                     920                  LSR.W   D4,D2
00001ADC                           921              
00001ADC  3639 00002884            922                  MOVE.W  CURRENT_OP,D3
00001AE2  1A3C 0004                923                  MOVE.B  #4,D5
00001AE6  EB6B                     924                  LSL.W   D5,D3
00001AE8  E86B                     925                  LSR.W   D4,D3
00001AEA                           926  
00001AEA  4EB9 0000248E            927                  JSR     EA_Decode_EA
00001AF0                           928              
00001AF0  4EB9 00002438            929                  JSR     SR_PrintCRLF
00001AF6                           930                  
00001AF6  4282                     931                  CLR.L   D2                  ;Clean up
00001AF8  4283                     932                  CLR.L   D3
00001AFA  4284                     933                  CLR.L   D4
00001AFC  4285                     934                  CLR.L   D5
00001AFE  4286                     935                  CLR.L   D6
00001B00  4287                     936                  CLR.L   D7
00001B02                           937                  
00001B02  4E75                     938                  RTS
00001B04                           939  
00001B04  49F9 00002857            940  OP_MOVEM        LEA     TABLE_HEXCHAR,A4
00001B0A  43F9 000027F9            941                  LEA     DISP_MOVEM,A1      
00001B10  103C 000E                942                  MOVE.B  #14,D0
00001B14  4E4F                     943                  TRAP    #15
00001B16                           944                  
00001B16                           945                  *Determine EA mode                
00001B16  4EB9 000022B0            946                  JSR     SR_Eval5to3
00001B1C  13C7 0000287E            947                  MOVE.B  D7,DEST_MODE
00001B22                           948                  
00001B22                           949                  *Determine EA reg
00001B22  4EB9 00002298            950                  JSR     SR_Eval2to0
00001B28  13C7 00002880            951                  MOVE.B  D7,DEST_REGISTER
00001B2E                           952                  
00001B2E  264A                     953                  MOVEA.L A2,A3               ;Store current address in a safer register
00001B30  3613                     954                  MOVE.W  (A3),D3             ;Store opword in data register for testing
00001B32  33C3 00002884            955                  MOVE.W  D3,CURRENT_OP       ;Store opword safely for later
00001B38                           956                  
00001B38                           957                  *Check and print size
00001B38  0803 0006                958                  BTST    #6,D3
00001B3C  6700 001A                959                  BEQ     OpMovemWord
00001B40                           960  
00001B40  43F9 0000284F            961  OpMovemLong     LEA     DISP_SIZE_L,A1
00001B46  103C 000E                962                  MOVE.B  #14,D0
00001B4A  4E4F                     963                  TRAP    #15
00001B4C                           964                  
00001B4C  13FC 0002 00002882       965                  MOVE.B  #2,OP_SIZE
00001B54                           966                                  
00001B54  6000 0016                967                  BRA     MovemDirCheck
00001B58                           968  
00001B58  43F9 00002852            969  OpMovemWord     LEA     DISP_SIZE_W,A1
00001B5E  103C 000E                970                  MOVE.B  #14,D0
00001B62  4E4F                     971                  TRAP    #15
00001B64                           972                  
00001B64  13FC 0001 00002882       973                  MOVE.B  #1,OP_SIZE
00001B6C                           974                  
00001B6C  0803 000A                975  MovemDirCheck   BTST    #10,D3
00001B70  6700 0040                976                  BEQ     OpMovemMask
00001B74                           977                  
00001B74  1E3C 0005                978                  MOVE.B  #5,D7
00001B78  4EB9 00002446            979                  JSR     SR_PrintTab
00001B7E                           980                  
00001B7E  4282                     981                  CLR.L   D2
00001B80  4283                     982                  CLR.L   D3
00001B82  4284                     983                  CLR.L   D4
00001B84  1439 0000287E            984                  MOVE.B  DEST_MODE,D2
00001B8A  1639 00002880            985                  MOVE.B  DEST_REGISTER,D3
00001B90  1839 00002882            986                  MOVE.B  OP_SIZE,D4
00001B96  544A                     987                  ADDA.W  #2,A2                   ;Trick EA decoder into skipping over register mask
00001B98  4EB9 0000248E            988                  JSR     EA_Decode_EA
00001B9E  554A                     989                  SUBA.W  #2,A2                   ;Restore A2
00001BA0  264A                     990                  MOVEA.L A2,A3                   ;bugfix
00001BA2                           991                  
00001BA2  43F9 00002848            992                  LEA     DISP_COMMA,A1
00001BA8  103C 000E                993                  MOVE.B  #14,D0
00001BAC  4E4F                     994                  TRAP    #15
00001BAE  6000 000C                995                  BRA     MovemTabSkip
00001BB2                           996  
00001BB2  1E3C 0005                997  OpMovemMask     MOVE.B  #5,D7           ;Print tab after op size
00001BB6  4EB9 00002446            998                  JSR     SR_PrintTab
00001BBC                           999                  
00001BBC                          1000  MovemTabSkip    *Grab register list mask for processing
00001BBC  548B                    1001                  ADDA.L  #2,A3
00001BBE                          1002                  
00001BBE  4286                    1003                  CLR.L   D6
00001BC0  3C13                    1004                  MOVE.W  (A3),D6     
00001BC2                          1005                                  
00001BC2  4287                    1006                  CLR.L   D7
00001BC4                          1007  
00001BC4                          1008  OpMovemNewLoop  
00001BC4  1E3C 000F               1009                  MOVE.B  #15,D7              ;Prepare a counter for looping through register list
00001BC8  13FC 0011 00002892      1010                  MOVE.B  #17,MOVEM_FIRST     ;Set MOVEM_FIRST outside of possible range 
00001BD0  13FC 0011 00002893      1011                  MOVE.B  #17,MOVEM_LAST
00001BD8  13FC 0000 00002894      1012                  MOVE.B  #0,MOVEM_PRINTED    ;Clear printed before starting the loop                
00001BE0                          1013  
00001BE0  0F06                    1014  OpMovemLoop     BTST    D7,D6
00001BE2  6600 0018               1015                  BNE     OpMovemLoopSkip
00001BE6                          1016                  
00001BE6  0C39 0011 00002892      1017                  CMP.B   #17,MOVEM_FIRST
00001BEE  6700 0042               1018                  BEQ     OpMovemLoopEnd
00001BF2                          1019  
00001BF2  4EB9 00001C92           1020                  JSR     OpMovemPrint      ;Current bit is 0. Move to print routine.
00001BF8  6000 0038               1021                  BRA     OpMovemLoopEnd    ;Move to next iteration of loop after printing
00001BFC                          1022                  
00001BFC  BE3C 0007               1023  OpMovemLoopSkip CMP.B   #7,D7
00001C00  6600 0014               1024                  BNE     MovemLoopSkip2
00001C04                          1025                  
00001C04  0C39 0011 00002892      1026                  CMP.B   #17,MOVEM_FIRST
00001C0C  6700 0008               1027                  BEQ     MovemLoopSkip2
00001C10                          1028                  
00001C10  4EB9 00001C92           1029                  JSR     OpMovemPrint
00001C16                          1030  
00001C16  13C7 00002893           1031  MovemLoopSkip2  MOVE.B  D7,MOVEM_LAST       ;Current bit is 1, save number as last of the list
00001C1C                          1032                  
00001C1C  0C39 0011 00002892      1033                  CMP.B   #17,MOVEM_FIRST
00001C24  6600 000C               1034                  BNE     OpMovemLoopEnd         
00001C28                          1035                  
00001C28  13C7 00002892           1036                  MOVE.B  D7,MOVEM_FIRST      ;If first has not been set, set current bit as first
00001C2E  6000 0002               1037                  BRA     OpMovemLoopEnd
00001C32                          1038  
00001C32  5307                    1039  OpMovemLoopEnd  SUB.B   #1,D7               ;Decrement loop counter
00001C34  BE3C 0000               1040                  CMP.B   #0,D7               ;Exit loop if counter < 0
00001C38  6CA6                    1041                  BGE     OpMovemLoop
00001C3A                          1042  
00001C3A  0C39 0011 00002892      1043                  CMP.B   #17,MOVEM_FIRST              ;Check if final chunk of register list has been printed
00001C42  6700 0008               1044                  BEQ     OpMovemEA
00001C46  4EB9 00001C92           1045                  JSR     OpMovemPrint
00001C4C                          1046  
00001C4C                          1047  
00001C4C  3639 00002884           1048  OpMovemEA       MOVE.W  CURRENT_OP,D3
00001C52  0803 000A               1049                  BTST    #10,D3
00001C56  6600 0030               1050                  BNE     MovemEASkip
00001C5A                          1051  
00001C5A  4282                    1052                  CLR.L   D2
00001C5C  4283                    1053                  CLR.L   D3
00001C5E  4284                    1054                  CLR.L   D4
00001C60  1639 00002880           1055                  MOVE.B  DEST_REGISTER,D3
00001C66  1839 00002882           1056                  MOVE.B  OP_SIZE,D4
00001C6C  1439 0000287E           1057                  MOVE.B  DEST_MODE,D2
00001C72                          1058  
00001C72  43F9 00002848           1059                  LEA     DISP_COMMA,A1          ;Print a comma after register list
00001C78  103C 000E               1060                  MOVE.B  #14,D0
00001C7C  4E4F                    1061                  TRAP    #15
00001C7E                          1062                  
00001C7E  544A                    1063                  ADDA.W  #2,A2                   ;Trick EA decoder into skipping over register mask
00001C80  4EB9 0000248E           1064                  JSR     EA_Decode_EA
00001C86  554A                    1065                  SUBA.W  #2,A2                   ;Restore A2 
00001C88                          1066  
00001C88  4EB9 00002438           1067  MovemEASkip     JSR     SR_PrintCRLF
00001C8E                          1068                  
00001C8E  548A                    1069                  ADDA.L  #2,A2                      ;Skip over register list mask         
00001C90                          1070                  
00001C90  4E75                    1071                  RTS
00001C92                          1072                  
00001C92  1A39 00002894           1073  OpMovemPrint    MOVE.B  MOVEM_PRINTED,D5
00001C98  BA3C 0001               1074                  CMP.B   #1,D5
00001C9C  6D00 000E               1075                  BLT     OpMovemStart
00001CA0                          1076                  
00001CA0  43F9 0000284A           1077                  LEA     DISP_SLASH,A1              ;Print a slash before anything else if this is not the first chunk of registers from the list
00001CA6  103C 000E               1078                  MOVE.B  #14,D0
00001CAA  4E4F                    1079                  TRAP    #15
00001CAC                          1080  
00001CAC                          1081  OpMovemStart    
00001CAC  1039 0000287E           1082                  MOVE.B  DEST_MODE,D0
00001CB2  B03C 0004               1083                  CMP.B   #4,D0     
00001CB6  6700 0074               1084                  BEQ     OpMovemPrintPre           ;Printing will be different for pre decrement mode
00001CBA                          1085  
00001CBA  1A39 00002892           1086                  MOVE.B  MOVEM_FIRST,D5
00001CC0  BA3C 0007               1087                  CMP.B   #7,D5
00001CC4  6E00 000C               1088                  BGT     OpMovemA
00001CC8                          1089                  
00001CC8  4EB9 00001DA0           1090                  JSR     OpMovemPrintD
00001CCE  6000 0008               1091                  BRA     OpMovemNext
00001CD2                          1092                  
00001CD2  4EB9 00001DB0           1093  OpMovemA        JSR     OpMovemPrintA
00001CD8                          1094       
00001CD8  1039 00002893           1095  OpMovemNext     MOVE.B  MOVEM_LAST,D0
00001CDE  B039 00002892           1096                  CMP.B   MOVEM_FIRST,D0
00001CE4  6700 002C               1097                  BEQ     OpMovemPrintEnd
00001CE8                          1098                  
00001CE8  43F9 0000283E           1099                  LEA     DISP_MINUS,A1
00001CEE  103C 000E               1100                  MOVE.B  #14,D0
00001CF2  4E4F                    1101                  TRAP    #15
00001CF4                          1102                  
00001CF4  1A39 00002893           1103                  MOVE.B  MOVEM_LAST,D5
00001CFA  BA3C 0007               1104                  CMP.B   #7,D5
00001CFE  6E00 000C               1105                  BGT     OpMovemA2
00001D02                          1106                  
00001D02  4EB9 00001DA0           1107                  JSR     OpMovemPrintD
00001D08  6000 0008               1108                  BRA     OpMovemPrintEnd
00001D0C                          1109                  
00001D0C  4EB9 00001DB0           1110  OpMovemA2       JSR     OpMovemPrintA
00001D12                          1111  
00001D12  13FC 0011 00002892      1112  OpMovemPrintEnd MOVE.B  #17,MOVEM_FIRST
00001D1A  13FC 0011 00002893      1113                  MOVE.B  #17,MOVEM_LAST
00001D22  13FC 0001 00002894      1114                  MOVE.B  #1,MOVEM_PRINTED
00001D2A                          1115                  
00001D2A  4E75                    1116                  RTS
00001D2C                          1117  
00001D2C                          1118  OpMovemPrintPre 
00001D2C  1A39 00002892           1119                  MOVE.B  MOVEM_FIRST,D5
00001D32  BA3C 0007               1120                  CMP.B   #7,D5
00001D36  6E00 0012               1121                  BGT     OpMovemDPre
00001D3A                          1122                  
00001D3A  4EB9 00001DD4           1123                  JSR     MovemMirror
00001D40  4EB9 00001DB0           1124                  JSR     OpMovemPrintA
00001D46  6000 0010               1125                  BRA     OpMovemNextPre
00001D4A                          1126                  
00001D4A  5105                    1127  OpMovemDPre     SUB.B   #8,D5
00001D4C  4EB9 00001DD4           1128                  JSR     MovemMirror
00001D52  4EB9 00001DA0           1129                  JSR     OpMovemPrintD
00001D58                          1130       
00001D58  1039 00002893           1131  OpMovemNextPre  MOVE.B  MOVEM_LAST,D0
00001D5E  B039 00002892           1132                  CMP.B  MOVEM_FIRST,D0
00001D64  67AC                    1133                  BEQ     OpMovemPrintEnd
00001D66                          1134                  
00001D66  43F9 0000283E           1135                  LEA     DISP_MINUS,A1
00001D6C  103C 000E               1136                  MOVE.B  #14,D0
00001D70  4E4F                    1137                  TRAP    #15
00001D72                          1138                  
00001D72  1A39 00002893           1139                  MOVE.B  MOVEM_LAST,D5
00001D78  BA3C 0007               1140                  CMP.B   #7,D5
00001D7C  6E00 0010               1141                  BGT     OpMovemD2Pre
00001D80                          1142                  
00001D80  4EB9 00001DD4           1143                  JSR     MovemMirror
00001D86  4EB9 00001DB0           1144                  JSR     OpMovemPrintA
00001D8C  6084                    1145                  BRA     OpMovemPrintEnd
00001D8E                          1146                  
00001D8E  5105                    1147  OpMovemD2Pre    SUB.B   #8,D5
00001D90  4EB9 00001DD4           1148                  JSR     MovemMirror
00001D96  4EB9 00001DA0           1149                  JSR     OpMovemPrintD
00001D9C                          1150  
00001D9C  6000 FF74               1151                  BRA     OpMovemPrintEnd
00001DA0                          1152                  
00001DA0  701A                    1153  OpMovemPrintD   MOVE.L  #26,D0
00001DA2  43F4 0000               1154                  LEA.L   0(A4,D0),A1        ;Print D
00001DA6  103C 000E               1155                  MOVE.B  #14,D0
00001DAA  4E4F                    1156                  TRAP    #15
00001DAC                          1157                  
00001DAC  6000 0012               1158                  BRA     OpMovemPrintReg
00001DB0                          1159                  
00001DB0  7014                    1160  OpMovemPrintA   MOVE.L  #20,D0
00001DB2  43F4 0000               1161                  LEA.L   0(A4,D0),A1        ;Print A
00001DB6  103C 000E               1162                  MOVE.B  #14,D0
00001DBA  4E4F                    1163                  TRAP    #15
00001DBC                          1164                  
00001DBC  6000 0002               1165                  BRA     OpMovemPrintReg
00001DC0                          1166  
00001DC0                          1167                  
00001DC0  BA3C 0008               1168  OpMovemPrintReg CMP.B   #8,D5
00001DC4  6D00 0004               1169                  BLT     OpMovemSkip
00001DC8  5105                    1170                  SUB.B   #8,D5
00001DCA                          1171  
00001DCA  2205                    1172  OpMovemSkip     MOVE.L  D5,D1
00001DCC  103C 0003               1173                  MOVE.B  #3,D0
00001DD0  4E4F                    1174                  TRAP    #15
00001DD2                          1175                  
00001DD2  4E75                    1176                  RTS
00001DD4                          1177                  
00001DD4  BA3C 0000               1178  MovemMirror     CMP.B   #0,D5
00001DD8  6600 0008               1179                  BNE     Mirror1
00001DDC  1A3C 0007               1180                  MOVE.B  #7,D5
00001DE0  4E75                    1181                  RTS
00001DE2                          1182                  
00001DE2  BA3C 0001               1183  Mirror1         CMP.B   #1,D5
00001DE6  6600 0008               1184                  BNE     Mirror2
00001DEA  1A3C 0006               1185                  MOVE.B  #6,D5
00001DEE  4E75                    1186                  RTS
00001DF0                          1187                  
00001DF0  BA3C 0002               1188  Mirror2         CMP.B   #2,D5
00001DF4  6600 0008               1189                  BNE     Mirror3
00001DF8  1A3C 0005               1190                  MOVE.B  #5,D5
00001DFC  4E75                    1191                  RTS
00001DFE                          1192  
00001DFE  BA3C 0003               1193  Mirror3         CMP.B   #3,D5
00001E02  6600 0008               1194                  BNE     Mirror4
00001E06  1A3C 0004               1195                  MOVE.B  #4,D5
00001E0A  4E75                    1196                  RTS
00001E0C                          1197  
00001E0C  BA3C 0004               1198  Mirror4         CMP.B   #4,D5
00001E10  6600 0008               1199                  BNE     Mirror5
00001E14  1A3C 0003               1200                  MOVE.B  #3,D5
00001E18  4E75                    1201                  RTS
00001E1A                          1202  
00001E1A  BA3C 0005               1203  Mirror5         CMP.B   #5,D5
00001E1E  6600 0008               1204                  BNE     Mirror6
00001E22  1A3C 0002               1205                  MOVE.B  #2,D5
00001E26  4E75                    1206                  RTS
00001E28                          1207  
00001E28  BA3C 0006               1208  Mirror6         CMP.B   #6,D5
00001E2C  6600 0008               1209                  BNE     Mirror7
00001E30  1A3C 0001               1210                  MOVE.B  #1,D5
00001E34  4E75                    1211                  RTS
00001E36                          1212  
00001E36  1A3C 0000               1213  Mirror7         MOVE.B  #0,D5
00001E3A  4E75                    1214                  RTS
00001E3C                          1215  
00001E3C  43F9 000027FF           1216  OP_MOVEQ        LEA     DISP_MOVEQ,A1       ;Store the console message for output.
00001E42  103C 000E               1217                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E46  4E4F                    1218                  TRAP    #15                 ;Display to console.
00001E48                          1219  
00001E48  13FC 0005 00002877      1220                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001E50  4EB9 00002446           1221                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001E56                          1222                  
00001E56  43F9 0000283A           1223                  LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001E5C  103C 000E               1224                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E60  4E4F                    1225                  TRAP    #15                 ;Display to console.
00001E62                          1226                  
00001E62  43F9 0000283C           1227                  LEA     DISP_DOLLAR,A1      ;Store the console message for output.
00001E68  103C 000E               1228                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E6C  4E4F                    1229                  TRAP    #15                 ;Display to console.
00001E6E                          1230  
00001E6E  3A12                    1231                  MOVE.W  (A2),D5             ;Reload full opcode for evaluation
00001E70  4287                    1232                  CLR.L   D7
00001E72  1E05                    1233                  MOVE.B  D5,D7               ;Evaluate last byte only for SR_PrintHex
00001E74                          1234                  
00001E74  7C02                    1235                  MOVE.L  #2,D6               ;Number of characters to display.
00001E76  4EB9 00002382           1236                  JSR     SR_PrintHex         ;Reads D6 and D7, Returns console output.
00001E7C                          1237                  
00001E7C  43F9 00002848           1238                  LEA     DISP_COMMA,A1       ;Store the console message for output.
00001E82  103C 000E               1239                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001E86  4E4F                    1240                  TRAP    #15                 ;Display to console.
00001E88                          1241  
00001E88  343C 0000               1242                  MOVE.W  #0,D2               ;Force Dn dest mode
00001E8C                          1243                  
00001E8C  4EB9 0000231C           1244                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001E92  3607                    1245                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00001E94                          1246                  
00001E94  4EB9 0000248E           1247                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns console output.
00001E9A                          1248                  
00001E9A  4EB9 00002438           1249                  JSR     SR_PrintCRLF        ;Returns console output.
00001EA0  4E75                    1250                  RTS
00001EA2                          1251  
00001EA2  43F9 0000280A           1252  OP_MULS         LEA     DISP_MULS,A1        ;Store the console message for output.
00001EA8  103C 000E               1253                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001EAC  4E4F                    1254                  TRAP    #15                 ;Display to console.
00001EAE                          1255  
00001EAE  13FC 0001 00002882      1256                  MOVE.B  #1,OP_SIZE          ;Store the size of the EA as word.
00001EB6                          1257  
00001EB6  13FC 0006 00002877      1258                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001EBE  4EB9 00002446           1259                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001EC4                          1260  
00001EC4  4EB9 000022B0           1261                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001ECA  33C7 0000287A           1262                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001ED0                          1263                  
00001ED0  4EB9 00002298           1264                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001ED6  33C7 0000287C           1265                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001EDC                          1266                  
00001EDC  4EB9 0000231C           1267                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001EE2  33FC 0000 0000287E      1268                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001EEA  33C7 00002880           1269                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001EF0                          1270                  
00001EF0  4EB9 00002344           1271                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001EF6  4E75                    1272                  RTS
00001EF8                          1273  
00001EF8  43F9 00002805           1274  OP_MULU         LEA     DISP_MULU,A1        ;Store the console message for output.
00001EFE  103C 000E               1275                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001F02  4E4F                    1276                  TRAP    #15                 ;Display to console.
00001F04                          1277  
00001F04  13FC 0001 00002882      1278                  MOVE.B  #1,OP_SIZE          ;Store the size of the EA as word.
00001F0C                          1279  
00001F0C  13FC 0006 00002877      1280                  MOVE.B  #6,TAB_LENGTH       ;Print spaces between opcode name and EA
00001F14  4EB9 00002446           1281                  JSR     SR_PrintTab         ;Reads TAB_LENGTH, Returns console output.
00001F1A                          1282  
00001F1A  4EB9 000022B0           1283                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001F20  33C7 0000287A           1284                  MOVE.W  D7,SRC_MODE         ;Copy bits to src dest mode
00001F26                          1285                  
00001F26  4EB9 00002298           1286                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00001F2C  33C7 0000287C           1287                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to src dest register
00001F32                          1288                  
00001F32  4EB9 0000231C           1289                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001F38  33FC 0000 0000287E      1290                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00001F40  33C7 00002880           1291                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
00001F46                          1292                  
00001F46  4EB9 00002344           1293                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00001F4C  4E75                    1294                  RTS
00001F4E                          1295  
00001F4E  43F9 0000280F           1296  OP_NOP          LEA     DISP_NOP,A1         ;Store the console message for output.
00001F54  103C 000E               1297                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001F58  4E4F                    1298                  TRAP    #15                 ;Display to console.
00001F5A                          1299                  
00001F5A  4EB9 00002438           1300                  JSR     SR_PrintCRLF        ;Returns console output.
00001F60  4E75                    1301                  RTS
00001F62                          1302  
00001F62  43F9 00002813           1303  OP_ROL          LEA     DISP_ROL,A1         ;Store the console message for output.
00001F68  103C 000E               1304                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001F6C  4E4F                    1305                  TRAP    #15                 ;Display to console.
00001F6E                          1306                  
00001F6E  6000 0026               1307                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
00001F72                          1308  
00001F72  43F9 00002817           1309  OP_ROR          LEA     DISP_ROR,A1         ;Store the console message for output.
00001F78  103C 000E               1310                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001F7C  4E4F                    1311                  TRAP    #15                 ;Display to console.
00001F7E                          1312                  
00001F7E  6000 0016               1313                  BRA     OP_ShiftRot         ;Grouping for ASL/ASR/LSL/LSR/ROL/ROR
00001F82                          1314  
00001F82  43F9 0000281B           1315  OP_RTS          LEA     DISP_RTS,A1         ;Store the console message for output.
00001F88  103C 000E               1316                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001F8C  4E4F                    1317                  TRAP    #15                 ;Display to console.
00001F8E                          1318                  
00001F8E  4EB9 00002438           1319                  JSR     SR_PrintCRLF        ;Returns console output.
00001F94  4E75                    1320                  RTS
00001F96                          1321  
00001F96  4EB9 000022D4           1322  OP_ShiftRot     JSR     SR_Eval7to6         ;Reads A2, Returns D7
00001F9C                          1323  
00001F9C  BE3C 0003               1324                  CMP.B   #%11,D7
00001FA0  6700 001E               1325                  BEQ     opShRoMemory        ;%11
00001FA4                          1326                  
00001FA4  13FC 0005 00002877      1327                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001FAC  4EB9 000023B8           1328                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001FB2                          1329                  
00001FB2  3E12                    1330                  MOVE.W  (A2),D7  * not sure why I can't just bittest out of (A2) directly
00001FB4  0807 0005               1331                  BTST    #5,D7             
00001FB8  6700 0030               1332                  BEQ     opShRoCount         ;Bit 5 = 0
00001FBC                          1333                  
00001FBC  6000 0078               1334                  BRA     opShRoRegister      ;Bit 5 = 1
00001FC0                          1335  
00001FC0  7E01                    1336  opShRoMemory    MOVE.L  #1,D7               ;Force size = .W
00001FC2  13FC 0005 00002877      1337                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
00001FCA  4EB9 000023B8           1338                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00001FD0                          1339  
00001FD0  4EB9 000022B0           1340                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00001FD6  3407                    1341                  MOVE.W  D7,D2               ;Copy bits to decode EA mode
00001FD8                          1342                  
00001FD8  4EB9 00002298           1343                  JSR     SR_Eval2to0         ;Read A2, Return D7
00001FDE  3607                    1344                  MOVE.W  D7,D3               ;Copy bits to decode EA register
00001FE0                          1345                  
00001FE0  4EB9 0000248E           1346                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00001FE6                          1347  
00001FE6  6000 007E               1348                  BRA     opShRoDone
00001FEA                          1349  
00001FEA  43F9 0000283A           1350  opShRoCount     LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
00001FF0  103C 000E               1351                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00001FF4  4E4F                    1352                  TRAP    #15                 ;Display to console.
00001FF6                          1353                  
00001FF6  4EB9 0000231C           1354                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00001FFC                          1355                  
00001FFC  4281                    1356                  CLR.L   D1                  ;Ensure output register is clear
00001FFE                          1357                  
00001FFE  3207                    1358                  MOVE.W  D7,D1               ;Copy bits to D1 for console output.
00002000                          1359                  
00002000  B23C 0000               1360                  CMP.B   #0,D1
00002004  6700 002A               1361                  BEQ     opShRoIfZero
00002008                          1362                  
00002008  103C 0003               1363  opShRoDispCnt   MOVE.B  #3,D0               ;Will display signed number from D1
0000200C  4E4F                    1364                  TRAP    #15                 ;Display to console.
0000200E                          1365                  
0000200E  43F9 00002848           1366                  LEA     DISP_COMMA,A1       ;Store the console message for output.
00002014  103C 000E               1367                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002018  4E4F                    1368                  TRAP    #15                 ;Display to console.
0000201A                          1369                  
0000201A  4EB9 00002298           1370                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00002020                          1371                  
00002020  343C 0000               1372                  MOVE.W  #0,D2               ;Force Dn dest mode
00002024  3607                    1373                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00002026                          1374                  
00002026  4EB9 0000248E           1375                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
0000202C                          1376  
0000202C  6000 0038               1377                  BRA     opShRoDone
00002030                          1378                  
00002030  323C 0008               1379  opShRoIfZero    MOVE.W  #8,D1               ;#0 - value of zero represents a count of eight
00002034  60D2                    1380                  BRA     OpShRoDispCnt
00002036                          1381  
00002036  33FC 0000 0000287A      1382  opShRoRegister  MOVE.W  #0,SRC_MODE         ;Force Dn src mode
0000203E                          1383  
0000203E  4EB9 0000231C           1384                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00002044  33C7 0000287C           1385                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
0000204A                          1386  
0000204A  33FC 0000 0000287E      1387                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
00002052                          1388  
00002052  4EB9 00002298           1389                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00002058  33C7 00002880           1390                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000205E                          1391  
0000205E  4EB9 00002344           1392                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00002064  4E75                    1393                  RTS
00002066                          1394  
00002066  4EB9 00002438           1395  opShRoDone      JSR     SR_PrintCRLF        ;Returns console output.
0000206C  4E75                    1396                  RTS
0000206E                          1397  
0000206E  6000 F862               1398  OP_SIMHALT      BRA     OP_INVALID
00002072                          1399  
00002072  43F9 00002827           1400  OP_SUB          LEA     DISP_SUB,A1         ;Store the console message for output.
00002078  103C 000E               1401                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000207C  4E4F                    1402                  TRAP    #15                 ;Display to console.
0000207E                          1403                  
0000207E  4EB9 000022D4           1404                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00002084                          1405                  
00002084  13FC 0005 00002877      1406                  MOVE.B  #5,TAB_LENGTH       ;Print spaces between opcode name and EA
0000208C  4EB9 000023B8           1407                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00002092                          1408                  
00002092  0812 0008               1409                  BTST    #8,(A2)             
00002096  6700 0006               1410                  BEQ     opSubDnMode         ;Bit 8 = 0
0000209A                          1411                  
0000209A  6000 0032               1412                  BRA     opSubEAMode         ;Bit 8 = 1
0000209E                          1413                  
0000209E  4EB9 000022B0           1414  opSubDnMode     JSR     SR_Eval5to3         ;Reads A2, Returns D7
000020A4  33C7 0000287A           1415                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
000020AA                          1416                  
000020AA  4EB9 00002298           1417                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000020B0  33C7 0000287C           1418                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000020B6                          1419                  
000020B6  33FC 0000 0000287E      1420                  MOVE.W  #0,DEST_MODE        ;Force Dn dest mode
000020BE                          1421                  
000020BE  4EB9 0000231C           1422                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000020C4  33C7 00002880           1423                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000020CA                          1424                  
000020CA  6000 002E               1425                  BRA     opSubPrintEA
000020CE                          1426  
000020CE  33FC 0000 0000287A      1427  opSubEAMode     MOVE.W  #0,SRC_MODE         ;Force Dn src mode
000020D6                          1428                  
000020D6  4EB9 0000231C           1429                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000020DC  33C7 0000287C           1430                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
000020E2                          1431                  
000020E2  4EB9 000022B0           1432                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000020E8  33C7 0000287E           1433                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
000020EE                          1434                  
000020EE  4EB9 00002298           1435                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
000020F4  33C7 00002880           1436                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
000020FA                          1437  
000020FA  4EB9 00002344           1438  opSubPrintEA    JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void               
00002100  4E75                    1439                  RTS
00002102                          1440  
00002102  43F9 0000282B           1441  OP_SUBA         LEA     DISP_SUBA,A1        ;Store the console message for output.
00002108  103C 000E               1442                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000210C  4E4F                    1443                  TRAP    #15                 ;Display to console.
0000210E                          1444                  
0000210E  4EB9 000022F8           1445                  JSR     SR_Eval8to6         ;Reads A2, Returns D7
00002114                          1446  
00002114  13FC 0004 00002877      1447                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
0000211C  4EB9 000023D8           1448                  JSR     SR_PrntSize3bit     ;Reads D7, Returns void
00002122                          1449                  
00002122  4EB9 000022B0           1450                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
00002128  33C7 0000287A           1451                  MOVE.W  D7,SRC_MODE         ;Copy bits to decode src mode
0000212E                          1452                  
0000212E  4EB9 00002298           1453                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00002134  33C7 0000287C           1454                  MOVE.W  D7,SRC_REGISTER     ;Copy bits to decode src register
0000213A                          1455                  
0000213A  33FC 0001 0000287E      1456                  MOVE.W  #1,DEST_MODE        ;Force An dest mode
00002142                          1457                  
00002142  4EB9 0000231C           1458                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
00002148  33C7 00002880           1459                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000214E                          1460                  
0000214E  4EB9 00002344           1461                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
00002154  4E75                    1462                  RTS
00002156                          1463                  
00002156  43F9 00002830           1464  OP_SUBI         LEA     DISP_SUBI,A1        ;Store the console message for output.
0000215C  103C 000E               1465                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002160  4E4F                    1466                  TRAP    #15                 ;Display to console.
00002162                          1467                  
00002162  4EB9 000022D4           1468                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
00002168                          1469                  
00002168  13FC 0004 00002877      1470                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA              
00002170  4EB9 000023B8           1471                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
00002176                          1472                  
00002176  33FC 0007 0000287A      1473                  MOVE.W  #7,SRC_MODE         ;Force Absolute Short/Long/Immediate Data
0000217E  33FC 0004 0000287C      1474                  MOVE.W  #4,SRC_REGISTER     ;Force Immediate Data selection
00002186                          1475                  
00002186  4EB9 000022B0           1476                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
0000218C  33C7 0000287E           1477                  MOVE.W  D7,DEST_MODE        ;Copy bits to decode dest mode
00002192                          1478                  
00002192  4EB9 00002298           1479                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00002198  33C7 00002880           1480                  MOVE.W  D7,DEST_REGISTER    ;Copy bits to decode dest register
0000219E                          1481                  
0000219E  4EB9 00002344           1482                  JSR     SR_PrintEA          ;Reads SRC/DEST MODE/REGISTER storage, Returns void
000021A4  4E75                    1483                  RTS
000021A6                          1484                  
000021A6  43F9 00002835           1485  OP_SUBQ         LEA     DISP_SUBQ,A1        ;Store the console message for output.
000021AC  103C 000E               1486                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000021B0  4E4F                    1487                  TRAP    #15                 ;Display to console.
000021B2                          1488  
000021B2  4EB9 000022D4           1489                  JSR     SR_Eval7to6         ;Reads A2, Returns D7
000021B8                          1490                  
000021B8  13FC 0004 00002877      1491                  MOVE.B  #4,TAB_LENGTH       ;Print spaces between opcode name and EA
000021C0  4EB9 000023B8           1492                  JSR     SR_PrntSize2bit     ;Reads D7, Returns void
000021C6                          1493  
000021C6  43F9 0000283A           1494  opSqCount       LEA     DISP_OCTOTHORPE,A1  ;Store the console message for output.
000021CC  103C 000E               1495                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000021D0  4E4F                    1496                  TRAP    #15                 ;Display to console.
000021D2                          1497                  
000021D2  4EB9 0000231C           1498                  JSR     SR_Eval11to9        ;Reads A2, Returns D7
000021D8                          1499                  
000021D8  4281                    1500                  CLR.L   D1                  ;Ensure output register is clear
000021DA                          1501                  
000021DA  3207                    1502                  MOVE.W  D7,D1               ;Copy bits to D1 for console output.
000021DC                          1503                  
000021DC  B23C 0000               1504                  CMP.B   #0,D1
000021E0  6700 002E               1505                  BEQ     opSqIfZero          ;#0 - value of zero represents a count of eight
000021E4                          1506  
000021E4  103C 0003               1507  opSqDispCnt     MOVE.B  #3,D0               ;Will display signed number from D1
000021E8  4E4F                    1508                  TRAP    #15                 ;Display to console.
000021EA                          1509                  
000021EA  43F9 00002848           1510                  LEA     DISP_COMMA,A1       ;Store the console message for output.
000021F0  103C 000E               1511                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000021F4  4E4F                    1512                  TRAP    #15                 ;Display to console.
000021F6                          1513                  
000021F6  4EB9 000022B0           1514                  JSR     SR_Eval5to3         ;Reads A2, Returns D7
000021FC  3407                    1515                  MOVE.W  D7,D2               ;Copy bits to decode dest mode
000021FE                          1516                  
000021FE  4EB9 00002298           1517                  JSR     SR_Eval2to0         ;Reads A2, Returns D7
00002204  3607                    1518                  MOVE.W  D7,D3               ;Copy bits to decode dest register
00002206                          1519                  
00002206  4EB9 0000248E           1520                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
0000220C                          1521  
0000220C  6000 0008               1522                  BRA     opSqDone
00002210                          1523  
00002210  323C 0008               1524  opSqIfZero      MOVE.W  #8,D1               ;#0 - value of zero represents a count of eight
00002214  60CE                    1525                  BRA     OpSqDispCnt
00002216                          1526  
00002216  4EB9 00002438           1527  opSqDone        JSR     SR_PrintCRLF        ;Returns console output.
0000221C  4E75                    1528                  RTS
0000221E                          1529  
0000221E                          1530  
0000221E                          1531  
0000221E                          1532  
0000221E                          1533  
0000221E                          1534  
0000221E                          1535  
0000221E                          1536  
0000221E                          1537  
0000221E                          1538  
0000221E                          1539  
0000221E                          1540  
0000221E                          1541  
0000221E                          1542  
0000221E                          1543  
0000221E                          1544  
0000221E                          1545  
0000221E                          1546  
0000221E                          1547  
0000221E                          1548  
0000221E                          1549  
0000221E                          1550  
0000221E                          1551  
0000221E                          1552  -------------------- end include --------------------
0000221E                          1553                  INCLUDE 'EasyRiders_Subroutines.X68'
0000221E  1019                    1554  SR_AtoHLoop     MOVE.B  (A1)+,D0            ; Get the first byte
00002220  4EB9 00002468           1555                  JSR     SR_Strip_Ascii      ; Get rid of the ASCII code.
00002226  D280                    1556                  ADD.L   D0,D1               ; Load the char into D1
00002228  0C11 0000               1557                  CMPI.B  #$0,(A1)            ; Evaluate if there is more work to do.
0000222C  6700 0006               1558                  BEQ     athEndLoop          ; If not, exit the loop.
00002230  E989                    1559                  LSL.L   #$4,D1              ; Otherwise, shift the char left in D1 for the next char
00002232  60EA                    1560                  BRA     SR_AtoHLoop         ; Continue working
00002234                          1561    
00002234  2E01                    1562  athEndLoop      MOVE.L  D1,D7               ; Return hex number in D7
00002236  4E75                    1563                  RTS
00002238                          1564  
00002238  2039 00002886           1565  SR_CheckStart   MOVE.L  DATA_START_LOC,D0
0000223E                          1566  
0000223E  0800 0000               1567                  BTST    #0,D0               ;If the LSB is 1, the address is odd and invalid.
00002242  6600 0006               1568                  BNE     csFailAddrOdd
00002246                          1569  
00002246  7E00                    1570                  MOVE.L  #0,D7               ;D7 == 0 indicates the addr is valid.
00002248  4E75                    1571  csFinish        RTS
0000224A                          1572                  
0000224A  43F9 00002721           1573  csFailAddrOdd   LEA     MSG_ADDR_ODD,A1
00002250  103C 000E               1574                  MOVE.B  #14,D0
00002254  4E4F                    1575                  TRAP    #15
00002256                          1576                  
00002256  7E01                    1577                  MOVE.L  #1,D7               ;D7 == 1 indicates the addr is invalid.
00002258  60EE                    1578                  BRA     csFinish
0000225A                          1579  
0000225A  2039 00002886           1580  SR_CheckEnd     MOVE.L  DATA_START_LOC,D0
00002260  2239 0000288A           1581                  MOVE.L  DATA_END_LOC,D1
00002266                          1582                  
00002266  0801 0000               1583                  BTST    #0,D1               ;If the LSB is 1, the address is odd and invalid.
0000226A  6600 001C               1584                  BNE     ceFailAddrOdd
0000226E                          1585                  
0000226E  B280                    1586                  CMP.L   D0,D1               ;The ending addr must be greater than starting addr
00002270  6D00 0006               1587                  BLT     ceFailAddrOrder
00002274                          1588  
00002274  7E00                    1589                  MOVE.L  #0,D7               ;D7 == 0 indicates the addr is valid.
00002276  4E75                    1590  ceFinish        RTS
00002278                          1591  
00002278  43F9 0000274C           1592  ceFailAddrOrder LEA     MSG_ADDR_ORDER,A1
0000227E  103C 000E               1593                  MOVE.B  #14,D0
00002282  4E4F                    1594                  TRAP    #15
00002284                          1595                  
00002284  7E01                    1596                  MOVE.L  #1,D7
00002286  60EE                    1597                  BRA     ceFinish
00002288                          1598                  
00002288  43F9 00002721           1599  ceFailAddrOdd   LEA     MSG_ADDR_ODD,A1
0000228E  103C 000E               1600                  MOVE.B  #14,D0
00002292  4E4F                    1601                  TRAP    #15
00002294                          1602                  
00002294  7E01                    1603                  MOVE.L  #1,D7               ;D7 == 1 indicates the addr is invalid.
00002296  60DE                    1604                  BRA     ceFinish
00002298                          1605  
00002298  3E12                    1606  SR_Eval2to0     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
0000229A  103C 000D               1607                  MOVE.B  #13,D0              ;Prepare a shift of 12 bits
0000229E  E16F                    1608                  LSL.W   D0,D7               ;Truncate up to bit 2
000022A0  E06F                    1609                  LSR.W   D0,D7               ;Isolate remainder
000022A2  4E75                    1610                  RTS
000022A4                          1611  
000022A4  3E12                    1612  SR_Eval3to0     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022A6  103C 000C               1613                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
000022AA  E16F                    1614                  LSL.W   D0,D7               ;Truncate up to forth nibble
000022AC  E06F                    1615                  LSR.W   D0,D7               ;Isolate nibble
000022AE  4E75                    1616                  RTS
000022B0                          1617  
000022B0  3E12                    1618  SR_Eval5to3     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022B2  103C 000A               1619                  MOVE.B  #10,D0              ;Prepare a shift of 10 bits
000022B6  E16F                    1620                  LSL.W   D0,D7               ;Truncate up to bit 5
000022B8  103C 000D               1621                  MOVE.B  #13,D0              ;Prepare a shift of 13 bits
000022BC  E06F                    1622                  LSR.W   D0,D7               ;Isolate remainder
000022BE  4E75                    1623                  RTS
000022C0                          1624  
000022C0  3E12                    1625  SR_Eval7to0     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022C2  E14F                    1626                  LSL.W   #8,D7               ;Truncate up to bit 7
000022C4  E04F                    1627                  LSR.W   #8,D7               ;Isolate remainder
000022C6  4E75                    1628                  RTS
000022C8                          1629  
000022C8  3E12                    1630  SR_Eval7to4     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022CA  E14F                    1631                  LSL.W   #8,D7               ;Truncate up to third nibble
000022CC  103C 000C               1632                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
000022D0  E06F                    1633                  LSR.W   D0,D7               ;Isolate nibble
000022D2  4E75                    1634                  RTS
000022D4                          1635  
000022D4  3E12                    1636  SR_Eval7to6     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022D6  E14F                    1637                  LSL.W   #8,D7               ;Truncate up to bit 7
000022D8  103C 000E               1638                  MOVE.B  #14,D0              ;Prepare a shift of 12 bits
000022DC  E06F                    1639                  LSR.W   D0,D7               ;Isolate remainder
000022DE  4E75                    1640                  RTS
000022E0                          1641  
000022E0  3E12                    1642  SR_Eval8to3     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022E2  EF4F                    1643                  LSL.W   #7,D7               ;Truncate up to bit 8
000022E4  103C 000A               1644                  MOVE.B  #10,D0              ;Prepare a shift of 12 bits
000022E8  E06F                    1645                  LSR.W   D0,D7               ;Isolate remainder
000022EA  4E75                    1646                  RTS
000022EC                          1647  
000022EC  3E12                    1648  SR_Eval8to4     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022EE  EF4F                    1649                  LSL.W   #7,D7               ;Truncate up to bit 8
000022F0  103C 000B               1650                  MOVE.B  #11,D0              ;Prepare a shift of 11 bits
000022F4  E06F                    1651                  LSR.W   D0,D7               ;Isolate remainder
000022F6  4E75                    1652                  RTS
000022F8                          1653  
000022F8  3E12                    1654  SR_Eval8to6     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
000022FA  EF4F                    1655                  LSL.W   #7,D7               ;Truncate up to bit 8
000022FC  103C 000D               1656                  MOVE.B  #13,D0              ;Prepare a shift of 13 bits
00002300  E06F                    1657                  LSR.W   D0,D7               ;Isolate remainder
00002302  4E75                    1658                  RTS
00002304                          1659  
00002304  3E12                    1660  SR_Eval11to6    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00002306  E94F                    1661                  LSL.W   #4,D7               ;Truncate up to bit 11
00002308  103C 000A               1662                  MOVE.B  #10,D0              ;Prepare a shift of 10 bits
0000230C  E06F                    1663                  LSR.W   D0,D7               ;Isolate remainder
0000230E  4E75                    1664                  RTS
00002310                          1665  
00002310  3E12                    1666  SR_Eval11to8    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00002312  E94F                    1667                  LSL.W   #4,D7               ;Truncate up to second nibble
00002314  103C 000C               1668                  MOVE.B  #12,D0              ;Prepare a shift of 12 bits
00002318  E06F                    1669                  LSR.W   D0,D7               ;Isolate nibble
0000231A  4E75                    1670                  RTS
0000231C                          1671  
0000231C  3E12                    1672  SR_Eval11to9    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
0000231E  E94F                    1673                  LSL.W   #4,D7               ;Truncate up to bit 11
00002320  103C 000D               1674                  MOVE.B  #13,D0              ;Prepare a shift of 13 bits
00002324  E06F                    1675                  LSR.W   D0,D7               ;Isolate remainder
00002326  4E75                    1676                  RTS
00002328                          1677  
00002328  4287                    1678  SR_PrintAddr    CLR.L   D7
0000232A  3E0A                    1679                  MOVE.W  A2,D7
0000232C  7C08                    1680                  MOVE.L  #8,D6
0000232E  4EB9 00002382           1681                  JSR     SR_PrintHex
00002334                          1682                  
00002334  13FC 0003 00002877      1683                  MOVE.B  #3,TAB_LENGTH       ;Tab length = 3
0000233C  4EB9 00002446           1684                  JSR     SR_PrintTab
00002342  4E75                    1685                  RTS
00002344                          1686  
00002344  3439 0000287A           1687  SR_PrintEA      MOVE.W  SRC_MODE,D2
0000234A  3639 0000287C           1688                  MOVE.W  SRC_REGISTER,D3
00002350  4EB9 0000248E           1689                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00002356                          1690  
00002356  43F9 00002848           1691                  LEA     DISP_COMMA,A1       ;Store the console message for output.
0000235C  103C 000E               1692                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002360  4E4F                    1693                  TRAP    #15                 ;Display to console.
00002362                          1694                  
00002362  3439 0000287E           1695                  MOVE.W  DEST_MODE,D2
00002368  3639 00002880           1696                  MOVE.W  DEST_REGISTER,D3
0000236E  4EB9 0000248E           1697                  JSR     EA_Decode_EA        ;Reads D2 and D3, Returns void
00002374                          1698                  
00002374  43F9 0000278A           1699                  LEA     MSG_LINEBREAK,A1    ;Store the console message for output.
0000237A  103C 000E               1700                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000237E  4E4F                    1701                  TRAP    #15                 ;Display to console.
00002380                          1702                  
00002380  4E75                    1703                  RTS
00002382                          1704                                
00002382  48E7 1E00               1705  SR_PrintHex     MOVEM.L D3-D6,-(SP)         ;Store registers to stack
00002386                          1706                  
00002386  47F9 00002857           1707                  LEA     TABLE_HEXCHAR,A3
0000238C  CCFC 0004               1708                  MULU.W  #4,D6               ;Convert number of digits to total bits (4 bits per char)
00002390                          1709                  
00002390  7620                    1710                  MOVE.L  #32,D3              ;Set the total number of bits
00002392  9686                    1711                  SUB.L   D6,D3               ;Set the bit displacement for nibbles left to right
00002394  781C                    1712                  MOVE.L  #28,D4              ;Bit displacement to truncate all but one nibble
00002396                          1713                  
00002396  2A07                    1714  phLoop          MOVE.L  D7,D5               ;Load/reload hex output into D5 for work.
00002398                          1715  
00002398  E7AD                    1716                  LSL.L   D3,D5               ;For each loop, isolate the next nibble using displacement
0000239A  E8AD                    1717                  LSR.L   D4,D5               ;Truncate everything else except the nibble
0000239C                          1718                  
0000239C  CAFC 0002               1719                  MULU    #2,D5               ;Multiply nibble by two, find character in char_table
000023A0  43F3 5000               1720                  LEA     0(A3,D5),A1         ;Store the character for output
000023A4  103C 000E               1721                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000023A8  4E4F                    1722                  TRAP    #15                 ;Display to console.
000023AA                          1723                  
000023AA  5803                    1724                  ADD.B   #4,D3               ;Add another 4 bits to displacement to get next nibble
000023AC  B63C 0020               1725                  CMP.B   #32,D3              ;If displacement = 32, we're done.
000023B0  66E4                    1726                  BNE     phLoop
000023B2                          1727  
000023B2  4CDF 0078               1728                  MOVEM.L (SP)+,D3-D6         ;Replace registers from stack
000023B6  4E75                    1729                  RTS
000023B8                          1730  
000023B8  48E7 FEFE               1731  SR_PrntSize2bit MOVEM.L A0-A6/D0-D6,-(SP)   ;Store registers to stack
000023BC                          1732                  
000023BC  BE3C 0000               1733                  CMP.B   #%00,D7
000023C0  6700 002E               1734                  BEQ     psSizeB             ;%00
000023C4  BE3C 0001               1735                  CMP.B   #%01,D7
000023C8  6700 0038               1736                  BEQ     psSizeW             ;%01
000023CC  BE3C 0002               1737                  CMP.B   #%10,D7
000023D0  6700 0042               1738                  BEQ     psSizeL             ;%10
000023D4                          1739  
000023D4  6000 005C               1740                  BRA     psError             ;Return to parent if error exists
000023D8                          1741  
000023D8  48E7 FEFE               1742  SR_PrntSize3bit MOVEM.L A0-A6/D0-D6,-(SP)   ;Store registers to stack
000023DC                          1743  
000023DC  BE3C 0003               1744                  CMP.B   #%011,D7
000023E0  6700 0020               1745                  BEQ     psSizeW             ;%011
000023E4  BE3C 0007               1746                  CMP.B   #%111,D7
000023E8  6700 002A               1747                  BEQ     psSizeL             ;%111
000023EC                          1748                  
000023EC  6000 0044               1749                  BRA     psError             ;Return to parent if error exists
000023F0                          1750  
000023F0  43F9 0000284C           1751  psSizeB         LEA     DISP_SIZE_B,A1      ;Store the console message for output.
000023F6  13FC 0000 00002882      1752                  MOVE.B  #0,OP_SIZE          ;Store the size of the EA.
000023FE  6000 0026               1753                  BRA     psDone
00002402                          1754  
00002402  43F9 00002852           1755  psSizeW         LEA     DISP_SIZE_W,A1      ;Store the console message for output.
00002408  13FC 0001 00002882      1756                  MOVE.B  #1,OP_SIZE          ;Store the size of the EA.
00002410  6000 0014               1757                  BRA     psDone           
00002414                          1758  
00002414  43F9 0000284F           1759  psSizeL         LEA     DISP_SIZE_L,A1      ;Store the console message for output.
0000241A  13FC 0002 00002882      1760                  MOVE.B  #2,OP_SIZE          ;Store the size of the EA.
00002422  6000 0002               1761                  BRA     psDone
00002426                          1762  
00002426  103C 000E               1763  psDone          MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000242A  4E4F                    1764                  TRAP    #15                 ;Display to console.
0000242C  4EB9 00002446           1765                  JSR     SR_PrintTab         ;Reads none, Return void
00002432                          1766  
00002432  4CDF 7F7F               1767  psError         MOVEM.L (SP)+,A0-A6/D0-D6   ;Replace registers from stack
00002436  4E75                    1768                  RTS
00002438                          1769  
00002438  43F9 0000278A           1770  SR_PrintCRLF    LEA     MSG_LINEBREAK,A1
0000243E  103C 000E               1771                  MOVE.B  #14,D0
00002442  4E4F                    1772                  TRAP    #15             
00002444  4E75                    1773                  RTS
00002446                          1774                  
00002446  4287                    1775  SR_PrintTab     CLR.L   D7
00002448  1E39 00002877           1776                  MOVE.B  TAB_LENGTH,D7       ;Move data to D7 as a decreasing counter
0000244E                          1777                  
0000244E  BE3C 0000               1778  ptLoopStart     CMP.B   #0,D7               ;If the counter is zero, end the loop.
00002452  6700 0012               1779                  BEQ     ptLoopFinish        ;The loop is not finished, print a space.
00002456                          1780  
00002456  43F9 00002846           1781                  LEA     DISP_SPACE,A1       ;Print a single space on the console
0000245C  103C 000E               1782                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
00002460  4E4F                    1783                  TRAP    #15                 ;Display to console.
00002462                          1784                  
00002462  5307                    1785                  SUBQ.B  #1,D7               ;Decrease the loop counter by 1
00002464  60E8                    1786                  BRA     ptLoopStart
00002466                          1787                  
00002466  4E75                    1788  ptLoopFinish    RTS
00002468                          1789  
00002468  B03C 0039               1790  SR_Strip_Ascii  CMP.B   #$39,D0             ; Is it in range of 0-9?
0000246C  6F00 001A               1791                  BLE     saSub30             ; It's a number
00002470  B03C 0046               1792                  CMP.B   #$46,D0             ; Is is A...F?
00002474  6F00 000A               1793                  BLE     saSub37             ; It's A...F
00002478  0400 0057               1794                  SUB.B   #$57,D0             ; It's a...f
0000247C  6000 000E               1795                  BRA     saReturn            ; Go back
00002480  0400 0037               1796  saSub37         SUB.B   #$37,D0             ; Strip 37
00002484  6000 0006               1797                  BRA     saReturn            ; Go back
00002488  0400 0030               1798  saSub30         SUB.B   #$30,D0             ; Strip 30
0000248C  4E75                    1799  saReturn        RTS                         ; Go back
0000248E                          1800  
0000248E                          1801  
0000248E                          1802  
0000248E                          1803  
0000248E                          1804  
0000248E                          1805  
0000248E                          1806  
0000248E                          1807  
0000248E                          1808  
0000248E                          1809  
0000248E                          1810  
0000248E                          1811  
0000248E                          1812  
0000248E                          1813  
0000248E                          1814  
0000248E                          1815  
0000248E                          1816  
0000248E                          1817  
0000248E                          1818  
0000248E                          1819  
0000248E                          1820  
0000248E                          1821  
0000248E                          1822  
0000248E                          1823  
0000248E                          1824  
0000248E                          1825  
0000248E                          1826  
0000248E                          1827  
0000248E                          1828  
0000248E                          1829  
0000248E                          1830  
0000248E                          1831  
0000248E                          1832  
0000248E                          1833  
0000248E                          1834  
0000248E                          1835  
0000248E                          1836  
0000248E                          1837  
0000248E                          1838  
0000248E                          1839  
0000248E                          1840  
0000248E                          1841  
0000248E                          1842  
0000248E                          1843  
0000248E                          1844  
0000248E                          1845  
0000248E                          1846  
0000248E                          1847  
0000248E                          1848  
0000248E                          1849  
0000248E                          1850  
0000248E                          1851  
0000248E                          1852  -------------------- end include --------------------
0000248E                          1853                  INCLUDE 'EasyRiders_EAs.X68'
0000248E  47F9 000024A4           1854  EA_Decode_EA    LEA     EA_ModeTable,A3     ;Load jump table to A3
00002494  49F9 00002857           1855                  LEA     TABLE_HEXCHAR,A4    ;Load symbol table to A4 for output
0000249A  C4FC 0006               1856                  MULU    #6,D2
0000249E  4EB3 2000               1857                  JSR     0(A3,D2)
000024A2  4E75                    1858                  RTS
000024A4                          1859                  
000024A4  4EF9 000024D4           1860  EA_ModeTable    JMP     EA_Mode_000         ;0 - Register Direct Data
000024AA  4EF9 000024F0           1861                  JMP     EA_Mode_001         ;1 - Register Direct Address
000024B0  4EF9 0000250C           1862                  JMP     EA_Mode_010         ;2 - Register Indirect Address
000024B6  4EF9 00002526           1863                  JMP     EA_Mode_011         ;3 - Register Indirect Address Post Inc
000024BC  4EF9 00002538           1864                  JMP     EA_Mode_100         ;4 - Register Indirect Address Pre Dec
000024C2  4EF9 0000254A           1865                  JMP     EA_Mode_101         ;5 - Not Supported
000024C8  4EF9 0000254E           1866                  JMP     EA_Mode_110         ;6 - Not Supported
000024CE  4EF9 00002552           1867                  JMP     EA_Mode_111         ;7 - Absolute Data Short/Long/Immediate
000024D4                          1868                  
000024D4  7A1A                    1869  EA_Mode_000     MOVE.L  #26,D5
000024D6  43F4 5000               1870                  LEA     0(A4,D5),A1         ; comments for clever things
000024DA  103C 000E               1871                  MOVE.B  #14,D0
000024DE  4E4F                    1872                  TRAP    #15
000024E0                          1873  
000024E0  C6FC 0002               1874                  MULU    #2,D3
000024E4  43F4 3000               1875                  LEA     0(A4,D3),A1
000024E8  103C 000E               1876                  MOVE.B  #14,D0
000024EC  4E4F                    1877                  TRAP    #15
000024EE                          1878                  
000024EE  4E75                    1879                  RTS
000024F0                          1880  
000024F0  7A14                    1881  EA_Mode_001     MOVE.L  #20,D5
000024F2  43F4 5000               1882                  LEA     0(A4,D5),A1
000024F6  103C 000E               1883                  MOVE.B  #14,D0
000024FA  4E4F                    1884                  TRAP    #15
000024FC                          1885                  
000024FC  C6FC 0002               1886                  MULU    #2,D3
00002500  43F4 3000               1887                  LEA     0(A4,D3),A1
00002504  103C 000E               1888                  MOVE.B  #14,D0      *redundant (remove or keep for readability?)
00002508  4E4F                    1889                  TRAP    #15         * it's a good idea to refresh variables when the cost is low.
0000250A                          1890                                      * never know if this code will get moved or reused somewhere else.
0000250A                          1891  
0000250A  4E75                    1892                  RTS
0000250C                          1893  
0000250C  43F9 00002842           1894  EA_Mode_010     LEA     DISP_OPAREN,A1
00002512  103C 000E               1895                  MOVE.B  #14,D0
00002516  4E4F                    1896                  TRAP    #15
00002518                          1897                  
00002518  4EB8 24F0               1898                  JSR     EA_Mode_001
0000251C                          1899                  
0000251C  43F9 00002844           1900                  LEA     DISP_CPAREN,A1
00002522  4E4F                    1901                  TRAP    #15
00002524                          1902  
00002524  4E75                    1903                  RTS
00002526                          1904  
00002526  4EB8 250C               1905  EA_Mode_011     JSR     EA_Mode_010
0000252A                          1906                  
0000252A  43F9 00002840           1907                  LEA     DISP_PLUS,A1
00002530  103C 000E               1908                  MOVE.B  #14,D0
00002534  4E4F                    1909                  TRAP    #15
00002536                          1910                        
00002536  4E75                    1911                  RTS
00002538                          1912  
00002538  43F9 0000283E           1913  EA_Mode_100     LEA     DISP_MINUS,A1
0000253E  103C 000E               1914                  MOVE.B  #14,D0
00002542  4E4F                    1915                  TRAP    #15
00002544                          1916                  
00002544  4EB8 250C               1917                  JSR     EA_Mode_010
00002548                          1918  
00002548  4E75                    1919                  RTS
0000254A                          1920  
0000254A  6000 00A0               1921  EA_Mode_101     BRA     EA_INVALID
0000254E                          1922  
0000254E  6000 009C               1923  EA_Mode_110     BRA     EA_INVALID
00002552                          1924  
00002552  264A                    1925  EA_Mode_111     MOVEA.L A2,A3
00002554  B63C 0000               1926                  CMP.B   #%000,D3
00002558  6700 0016               1927                  BEQ     EA_AbsShort_000     ;%000
0000255C  B63C 0001               1928                  CMP.B   #%001,D3
00002560  6700 0028               1929                  BEQ     EA_AbsLong_001      ;%001
00002564  B63C 0004               1930                  CMP.B   #%100,D3
00002568  6700 003A               1931                  BEQ     EA_Immed_100        ;%100
0000256C                          1932                  
0000256C  6000 007E               1933                  BRA     EA_INVALID  * I decoupled this section and changed it to positive logic
00002570                          1934                  
00002570  43F9 0000283C           1935  EA_AbsShort_000 LEA     DISP_DOLLAR,A1
00002576  103C 000E               1936                  MOVE.B  #14,D0
0000257A  4E4F                    1937                  TRAP    #15    
0000257C                          1938                  
0000257C                          1939                  *read next word from memory, print in hex
0000257C  544B                    1940                  ADDA.W  #2,A3
0000257E                          1941                  
0000257E  3E13                    1942                  MOVE.W  (A3),D7
00002580  7C04                    1943                  MOVE.L  #4,D6               ;Number of characters to display
00002582  4EB8 2382               1944                  JSR     SR_PrintHex
00002586                          1945                  
00002586  544A                    1946                  ADDA.W  #2,A2
00002588                          1947                  
00002588  4E75                    1948                  RTS
0000258A                          1949  
0000258A  43F9 0000283C           1950  EA_AbsLong_001  LEA     DISP_DOLLAR,A1
00002590  103C 000E               1951                  MOVE.B  #14,D0
00002594  4E4F                    1952                  TRAP    #15    
00002596                          1953                  
00002596                          1954                  *read next two words from memory, print in hex
00002596  544B                    1955                  ADDA.W  #2,A3
00002598                          1956                  
00002598  2E13                    1957                  MOVE.L  (A3),D7
0000259A  7C08                    1958                  MOVE.L  #8,D6               ;Number of characters to display
0000259C  4EB8 2382               1959                  JSR     SR_PrintHex
000025A0                          1960                  
000025A0  584A                    1961                  ADDA.W  #4,A2
000025A2                          1962                  
000025A2  4E75                    1963                  RTS
000025A4                          1964  
000025A4                          1965  EA_Immed_100    *immediate data
000025A4                          1966                  
000025A4  43F9 0000283A           1967                  LEA     DISP_OCTOTHORPE,A1  *immediate data is signified by a pound sign
000025AA  103C 000E               1968                  MOVE.B  #14,D0
000025AE  4E4F                    1969                  TRAP    #15   
000025B0                          1970  
000025B0  43F9 0000283C           1971                  LEA     DISP_DOLLAR,A1      *All imediate data will be printed as hex
000025B6  103C 000E               1972                  MOVE.B  #14,D0
000025BA  4E4F                    1973                  TRAP    #15
000025BC                          1974  
000025BC                          1975  
000025BC                          1976                  *figure out how long the current commad is                
000025BC                          1977                  
000025BC  4284                    1978                  CLR.L   D4
000025BE  1839 00002882           1979                  MOVE.B  OP_SIZE,D4          
000025C4  B83C 0001               1980                  CMP.B   #1,D4  *For number in D4, 0 = .B, 1 = .W, 2 = .L
000025C8  6E00 0012               1981                  BGT     Immed_Long
000025CC                          1982                  
000025CC  544B                    1983                  ADDA.W  #2, A3
000025CE                          1984  
000025CE  4287                    1985                  CLR.L   D7
000025D0  3E13                    1986                  MOVE.W  (A3),D7
000025D2  7C04                    1987                  MOVE.L  #4,D6               ;Number of characters to display
000025D4  4EB8 2382               1988                  JSR     SR_PrintHex
000025D8                          1989  
000025D8  544A                    1990                  ADDA.W  #2,A2 *Advance over extension word
000025DA  4E75                    1991                  RTS
000025DC                          1992  
000025DC  544B                    1993  Immed_Long      ADDA.W  #2,A3
000025DE                          1994                  
000025DE  4287                    1995                  CLR.L   D7
000025E0  2E13                    1996                  MOVE.L  (A3),D7
000025E2  7C08                    1997                  MOVE.L  #8,D6               ;Number of characters to display
000025E4  4EB8 2382               1998                  JSR     SR_PrintHex
000025E8                          1999  
000025E8  584A                    2000                  ADDA.W  #4,A2 *Advance over extension words
000025EA  4E75                    2001                  RTS                
000025EC                          2002  
000025EC  43F9 000027DE           2003  EA_INVALID      LEA     DISP_INVALIDEA,A1   ;Store the console message for output.
000025F2  103C 000E               2004                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
000025F6  4E4F                    2005                  TRAP    #15                 ;Display to console.
000025F8                          2006                  
000025F8  544A                    2007                  ADDA.W  #2,A2               ;Advance opcode pointer
000025FA  4E75                    2008                  RTS                         ;This should throw an error with output
000025FC                          2009  
000025FC                          2010  
000025FC                          2011  
000025FC                          2012  
000025FC                          2013  
000025FC                          2014  
000025FC                          2015  -------------------- end include --------------------
000025FC                          2016                  INCLUDE 'EasyRiders_Definitions.X68'
000025FC  =0000000D               2017  CR              EQU     $0D                 ;Carriage Return
000025FC  =0000000A               2018  LF              EQU     $0A                 ;Line feed
000025FC                          2019  
000025FC= 36 38 4B 20 44 69 ...   2020  MSG_WELCOME     DC.B    '68K Disassember Final Project',CR,LF
0000261B= 57 72 69 74 74 65 ...   2021                  DC.B    'Written by Thomas Dye and Ross Holzworth',CR,LF
00002645= 43 53 53 20 34 32 ...   2022                  DC.B    'CSS 422 Final Project - University of Washington | Bothell',CR,LF,0
00002682= 54 65 73 74 20 64 ...   2023  MSG_LOC_START   DC.B    'Test data starts from location: ',0
000026A3= 54 65 73 74 20 64 ...   2024  MSG_LOC_END     DC.B    'Test data ends at location: ',0
000026C0= 50 72 65 73 73 20 ...   2025  MSG_PAUSE       DC.B    'Press enter to continue output.',CR,LF,0
000026E2= 45 6E 64 20 6F 66 ...   2026  MSG_RESTART     DC.B    'End of test data reached.',CR,LF,CR,LF
000026FF= 54 65 73 74 20 61 ...   2027                  DC.B    'Test another location? (yes/no): ',0
00002721= 54 68 65 20 61 64 ...   2028  MSG_ADDR_ODD    DC.B    'The address cannot end on an odd byte!',CR,LF,CR,LF,0
0000274C= 54 68 65 20 65 6E ...   2029  MSG_ADDR_ORDER  DC.B    'The ending address cannot be before the starting address!',CR,LF,CR,LF,0
0000278A= 0D 0A 00                2030  MSG_LINEBREAK   DC.B    CR,LF,0
0000278D                          2031  
0000278D= 41 44 44 00             2032  DISP_ADD        DC.B    'ADD',0
00002791= 41 44 44 41 00          2033  DISP_ADDA       DC.B    'ADDA',0
00002796= 41 44 44 49 00          2034  DISP_ADDI       DC.B    'ADDI',0
0000279B= 41 44 44 51 00          2035  DISP_ADDQ       DC.B    'ADDQ',0
000027A0= 41 4E 44 00             2036  DISP_AND        DC.B    'AND',0
000027A4= 41 4E 44 49 00          2037  DISP_ANDI       DC.B    'ANDI',0
000027A9= 41 53 4C 00             2038  DISP_ASL        DC.B    'ASL',0
000027AD= 41 53 52 00             2039  DISP_ASR        DC.B    'ASR',0
000027B1= 42 43 43 00             2040  DISP_BCC        DC.B    'BCC',0
000027B5= 42 43 48 47 00          2041  DISP_BCHG       DC.B    'BCHG',0
000027BA= 42 47 54 00             2042  DISP_BGT        DC.B    'BGT',0
000027BE= 42 4C 45 00             2043  DISP_BLE        DC.B    'BLE',0
000027C2= 43 4C 52 00             2044  DISP_CLR        DC.B    'CLR',0
000027C6= 43 4D 50 00             2045  DISP_CMP        DC.B    'CMP',0
000027CA= 43 4D 50 49 00          2046  DISP_CMPI       DC.B    'CMPI',0
000027CF= 44 49 56 53 00          2047  DISP_DIVS       DC.B    'DIVS',0
000027D4= 44 49 56 55 00          2048  DISP_DIVU       DC.B    'DIVU',0
000027D9= 44 41 54 41 00          2049  DISP_INVALID    DC.B    'DATA',0         *REMINDER: Label changed without changing name
000027DE= 42 61 64 45 41 00       2050  DISP_INVALIDEA  DC.B    'BadEA',0
000027E4= 4A 53 52 00             2051  DISP_JSR        DC.B    'JSR',0
000027E8= 4C 45 41 00             2052  DISP_LEA        DC.B    'LEA',0
000027EC= 4C 53 4C 00             2053  DISP_LSL        DC.B    'LSL',0
000027F0= 4C 53 52 00             2054  DISP_LSR        DC.B    'LSR',0
000027F4= 4D 4F 56 45 00          2055  DISP_MOVE       DC.B    'MOVE',0
000027F9= 4D 4F 56 45 4D 00       2056  DISP_MOVEM      DC.B    'MOVEM',0
000027FF= 4D 4F 56 45 51 00       2057  DISP_MOVEQ      DC.B    'MOVEQ',0
00002805= 4D 55 4C 55 00          2058  DISP_MULU       DC.B    'MULU',0
0000280A= 4D 55 4C 53 00          2059  DISP_MULS       DC.B    'MULS',0
0000280F= 4E 4F 50 00             2060  DISP_NOP        DC.B    'NOP',0
00002813= 52 4F 4C 00             2061  DISP_ROL        DC.B    'ROL',0
00002817= 52 4F 52 00             2062  DISP_ROR        DC.B    'ROR',0
0000281B= 52 54 53 00             2063  DISP_RTS        DC.B    'RTS',0
0000281F= 53 49 4D 48 41 4C ...   2064  DISP_SIMHALT    DC.B    'SIMHALT',0
00002827= 53 55 42 00             2065  DISP_SUB        DC.B    'SUB',0
0000282B= 53 55 42 41 00          2066  DISP_SUBA       DC.B    'SUBA',0
00002830= 53 55 42 49 00          2067  DISP_SUBI       DC.B    'SUBI',0
00002835= 53 55 42 51 00          2068  DISP_SUBQ       DC.B    'SUBQ',0
0000283A                          2069  
0000283A= 23 00                   2070  DISP_OCTOTHORPE DC.B    '#',0
0000283C= 24 00                   2071  DISP_DOLLAR     DC.B    '$',0
0000283E= 2D 00                   2072  DISP_MINUS      DC.B    '-',0
00002840= 2B 00                   2073  DISP_PLUS       DC.B    '+',0
00002842= 28 00                   2074  DISP_OPAREN     DC.B    '(',0
00002844= 29 00                   2075  DISP_CPAREN     DC.B    ')',0
00002846= 20 00                   2076  DISP_SPACE      DC.B    ' ',0
00002848= 2C 00                   2077  DISP_COMMA      DC.B    ',',0
0000284A= 2F 00                   2078  DISP_SLASH      DC.B    '/',0
0000284C= 2E 42 00                2079  DISP_SIZE_B     DC.B    '.B',0
0000284F= 2E 4C 00                2080  DISP_SIZE_L     DC.B    '.L',0
00002852= 2E 57 00                2081  DISP_SIZE_W     DC.B    '.W',0
00002855= 41 00                   2082  DISP_MOVE_A     DC.B    'A',0
00002857                          2083  
00002857= 30 00                   2084  TABLE_HEXCHAR   DC.B    '0',0
00002859= 31 00                   2085                  DC.B    '1',0
0000285B= 32 00                   2086                  DC.B    '2',0
0000285D= 33 00                   2087                  DC.B    '3',0
0000285F= 34 00                   2088                  DC.B    '4',0
00002861= 35 00                   2089                  DC.B    '5',0
00002863= 36 00                   2090                  DC.B    '6',0
00002865= 37 00                   2091                  DC.B    '7',0
00002867= 38 00                   2092                  DC.B    '8',0
00002869= 39 00                   2093                  DC.B    '9',0
0000286B= 41 00                   2094                  DC.B    'A',0 
0000286D= 42 00                   2095                  DC.B    'B',0
0000286F= 43 00                   2096                  DC.B    'C',0
00002871= 44 00                   2097                  DC.B    'D',0
00002873= 45 00                   2098                  DC.B    'E',0
00002875= 46 00                   2099                  DC.B    'F',0
00002877                          2100  
00002877                          2101  TAB_LENGTH      DS.B    1                   ;Number of spaces in a tab to print on console
00002878                          2102  LINECOUNT       DS.B    1                   ;Storage for number of lines on screen
0000287A                          2103  SRC_MODE        DS.W    1                   ;Storage for the source EA mode type
0000287C                          2104  SRC_REGISTER    DS.W    1                   ;Storage for the source EA register ID
0000287E                          2105  DEST_MODE       DS.W    1                   ;Storage for the destination EA mode type
00002880                          2106  DEST_REGISTER   DS.W    1                   ;Storage for the destination EA register ID
00002882                          2107  OP_SIZE         DS.B    1                   ;Storage for the size of the current opword (for EA decode)
00002884                          2108  CURRENT_OP      DS.W    1                   ;Safe storage for current op word being processed
00002886                          2109  DATA_START_LOC  DS.L    1                   ;Location to begin reading test data
0000288A                          2110  DATA_END_LOC    DS.L    1                   ;Location to end reading test data
0000288E                          2111  INPUT_BUFFER    DS.L    1                   ;Create an input buffer for ascii strings.
00002892                          2112  MOVEM_FIRST     DS.B    1                   ;Tracks the first register in a list for movem
00002893                          2113  MOVEM_LAST      DS.B    1                   ;Tracks the most recent register in a list for movem as a loop goes through the mask
00002894                          2114  MOVEM_PRINTED   DS.B    1                   ;Boolean that tracks whether or not the movemprint subroutine has been called
00002895                          2115  
00002895                          2116  -------------------- end include --------------------
00002895                          2117  
00002895                          2118                  END     START               ;Do not put anything below this line.

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ATHENDLOOP          2234
BG16BIT             16D8
BG32BIT             16FC
BGFINISH            16C4
BGRETURN            16BA
BGSUB8BIT           16CC
BRANCH_0            119E
BRANCH_4            11C8
BRANCH_4E           1384
BRANCH_4E7          13A4
BRANCH_5            1202
BRANCH_6            1218
BRANCH_8            123A
BRANCH_9            1254
BRANCH_B            1278
BRANCH_C            129A
BRANCH_D            12D8
BRANCH_E            12FC
BRANCH_F            1380
CEFAILADDRODD       2288
CEFAILADDRORDER     2278
CEFINISH            2276
CPLOOP              10AA
CPRETURN            10B6
CR                  D
CSFAILADDRODD       224A
CSFINISH            2248
CURRENT_OP          2884
DATA_END_LOC        288A
DATA_START_LOC      2886
DEST_MODE           287E
DEST_REGISTER       2880
DISP_ADD            278D
DISP_ADDA           2791
DISP_ADDI           2796
DISP_ADDQ           279B
DISP_AND            27A0
DISP_ANDI           27A4
DISP_ASL            27A9
DISP_ASR            27AD
DISP_BCC            27B1
DISP_BCHG           27B5
DISP_BGT            27BA
DISP_BLE            27BE
DISP_CLR            27C2
DISP_CMP            27C6
DISP_CMPI           27CA
DISP_COMMA          2848
DISP_CPAREN         2844
DISP_DIVS           27CF
DISP_DIVU           27D4
DISP_DOLLAR         283C
DISP_INVALID        27D9
DISP_INVALIDEA      27DE
DISP_JSR            27E4
DISP_LEA            27E8
DISP_LSL            27EC
DISP_LSR            27F0
DISP_MINUS          283E
DISP_MOVE           27F4
DISP_MOVEM          27F9
DISP_MOVEQ          27FF
DISP_MOVE_A         2855
DISP_MULS           280A
DISP_MULU           2805
DISP_NOP            280F
DISP_OCTOTHORPE     283A
DISP_OPAREN         2842
DISP_PLUS           2840
DISP_ROL            2813
DISP_ROR            2817
DISP_RTS            281B
DISP_SIMHALT        281F
DISP_SIZE_B         284C
DISP_SIZE_L         284F
DISP_SIZE_W         2852
DISP_SLASH          284A
DISP_SPACE          2846
DISP_SUB            2827
DISP_SUBA           282B
DISP_SUBI           2830
DISP_SUBQ           2835
EA_ABSLONG_001      258A
EA_ABSSHORT_000     2570
EA_DECODE_EA        248E
EA_IMMED_100        25A4
EA_INVALID          25EC
EA_MODETABLE        24A4
EA_MODE_000         24D4
EA_MODE_001         24F0
EA_MODE_010         250C
EA_MODE_011         2526
EA_MODE_100         2538
EA_MODE_101         254A
EA_MODE_110         254E
EA_MODE_111         2552
END_PROGRAM         113A
FN_CMD_PARSER       1098
FN_INPUTLOOP        1014
FN_PAUSEOUTPUT      10DE
FN_TERMINATE        10FA
GIENDADDRLOOP       1054
IMMED_LONG          25DC
INPUT_BUFFER        288E
LF                  A
LINECOUNT           2878
MIRROR1             1DE2
MIRROR2             1DF0
MIRROR3             1DFE
MIRROR4             1E0C
MIRROR5             1E1A
MIRROR6             1E28
MIRROR7             1E36
MLMOVEA             1A26
MLRETURN            1A08
MOVEMDIRCHECK       1B6C
MOVEMEASKIP         1C88
MOVEMLOOPSKIP2      1C16
MOVEMMIRROR         1DD4
MOVEMTABSKIP        1BBC
MOVEM_FIRST         2892
MOVEM_LAST          2893
MOVEM_PRINTED       2894
MOVE_BASIC          1A92
MSG_ADDR_ODD        2721
MSG_ADDR_ORDER      274C
MSG_LINEBREAK       278A
MSG_LOC_END         26A3
MSG_LOC_START       2682
MSG_PAUSE           26C0
MSG_RESTART         26E2
MSG_WELCOME         25FC
MWMOVEA             1A7C
MWRETURN            1A5A
OPADDDNMODE         13EA
OPADDEAMODE         141A
OPADDPRINTEA        1446
OPANDDNMODE         1596
OPANDEAMODE         15C6
OPANDPRINTEA        15F2
OPAQCOUNT           1512
OPAQDISPCNT         1530
OPAQDONE            1562
OPAQIFZERO          155C
OPMOVEMA            1CD2
OPMOVEMA2           1D0C
OPMOVEMD2PRE        1D8E
OPMOVEMDPRE         1D4A
OPMOVEMEA           1C4C
OPMOVEMLONG         1B40
OPMOVEMLOOP         1BE0
OPMOVEMLOOPEND      1C32
OPMOVEMLOOPSKIP     1BFC
OPMOVEMMASK         1BB2
OPMOVEMNEWLOOP      1BC4
OPMOVEMNEXT         1CD8
OPMOVEMNEXTPRE      1D58
OPMOVEMPRINT        1C92
OPMOVEMPRINTA       1DB0
OPMOVEMPRINTD       1DA0
OPMOVEMPRINTEND     1D12
OPMOVEMPRINTPRE     1D2C
OPMOVEMPRINTREG     1DC0
OPMOVEMSKIP         1DCA
OPMOVEMSTART        1CAC
OPMOVEMWORD         1B58
OPSHROCOUNT         1FEA
OPSHRODISPCNT       2008
OPSHRODONE          2066
OPSHROIFZERO        2030
OPSHROMEMORY        1FC0
OPSHROREGISTER      2036
OPSQCOUNT           21C6
OPSQDISPCNT         21E4
OPSQDONE            2216
OPSQIFZERO          2210
OPSUBDNMODE         209E
OPSUBEAMODE         20CE
OPSUBPRINTEA        20FA
OP_ADD              13BE
OP_ADDA             144E
OP_ADDI             14A2
OP_ADDQ             14F2
OP_AND              156A
OP_ANDI             15FA
OP_ASL              164A
OP_ASR              165A
OP_BCC              166A
OP_BCCGROUP         167A
OP_BGT              1720
OP_BLE              1730
OP_CLR              1740
OP_CMP              1780
OP_CMPI             17D6
OP_DIVS             1826
OP_DIVU             187C
OP_INVALID          18D2
OP_JSR              190A
OP_LEA              1946
OP_LSL              1994
OP_LSR              19A4
OP_MOVEM            1B04
OP_MOVEQ            1E3C
OP_MOVE_B           19B4
OP_MOVE_L           19E6
OP_MOVE_W           1A3C
OP_MULS             1EA2
OP_MULU             1EF8
OP_NOP              1F4E
OP_ROL              1F62
OP_ROR              1F72
OP_RTS              1F82
OP_SHIFTROT         1F96
OP_SIMHALT          206E
OP_SIZE             2882
OP_SUB              2072
OP_SUBA             2102
OP_SUBI             2156
OP_SUBQ             21A6
PHLOOP              2396
PSDONE              2426
PSERROR             2432
PSSIZEB             23F0
PSSIZEL             2414
PSSIZEW             2402
PTLOOPFINISH        2466
PTLOOPSTART         244E
ROOT_JMP_TABLE      113E
SARETURN            248C
SASUB30             2488
SASUB37             2480
SRC_MODE            287A
SRC_REGISTER        287C
SR_ATOHLOOP         221E
SR_CHECKEND         225A
SR_CHECKSTART       2238
SR_EVAL11TO6        2304
SR_EVAL11TO8        2310
SR_EVAL11TO9        231C
SR_EVAL2TO0         2298
SR_EVAL3TO0         22A4
SR_EVAL5TO3         22B0
SR_EVAL7TO0         22C0
SR_EVAL7TO4         22C8
SR_EVAL7TO6         22D4
SR_EVAL8TO3         22E0
SR_EVAL8TO4         22EC
SR_EVAL8TO6         22F8
SR_PRINTADDR        2328
SR_PRINTCRLF        2438
SR_PRINTEA          2344
SR_PRINTHEX         2382
SR_PRINTTAB         2446
SR_PRNTSIZE2BIT     23B8
SR_PRNTSIZE3BIT     23D8
SR_STRIP_ASCII      2468
START               1000
TABLE_HEXCHAR       2857
TAB_LENGTH          2877
