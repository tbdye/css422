00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2/27/2016 11:42:22 PM

00000000                             1  *------------------------------------------------------------------------------
00000000                             2  * Title      : 68K Disassember Final Project
00000000                             3  * Written by : Thomas Dye and Ross Holzworth
00000000                             4  * Date       : 2/27/16
00000000                             5  * Description: CSS 422 Final Project - University of Washington | Bothell
00000000                             6  * Instructor : Dr. Yang Peng
00000000                             7  *------------------------------------------------------------------------------
00000000                             8  * Main
00000000                             9  *---------------Opcode--Operands------------Comments---------------------------
00001000                            10  START           ORG     $1000               ;Load at this address
00001000                            11  
00001000                            12  * Display message prompt
00001000  43F9 00001409             13                  LEA     MSG_PROMPT,A1       ;Store the console message for output.
00001006  103C 000E                 14                  MOVE.B  #14,D0              ;Will display from A1 without CR,LF.
0000100A  4E4F                      15                  TRAP    #15                 ;Display to console.
0000100C                            16  * Get User Input
0000100C  43F9 00002000             17                  LEA     INPUT_BUFFER,A1     ;Raw input will store at INPUT_BUFFER
00001012  103C 0002                 18                  MOVE.B  #2,D0               ;Read string from keyboard to A1
00001016  4E4F                      19                  TRAP    #15                 ;Get the user input from console, length in D1
00001018                            20  
00001018                            21  * Convert ascii input to hex
00001018  4280                      22                  CLR.L   D0                  ;Use D0 and D1 to process ascii to hex conversion.
0000101A  4281                      23                  CLR.L   D1                  ;Ensure both are clear of data.
0000101C                            24                  
0000101C  4EB9 000012EE             25                  JSR     SR_AtoHLoop         ;Convert raw input ascii characters to hex
00001022  23C2 00001404             26                  MOVE.L  D2,INPUT_LOC        ;Store hex value user data location
00001028                            27  
00001028                            28  * Process Instructions
00001028  41F9 00001060             29                  LEA     ROOT_JMP_TABLE,A0   ;Index into the table
0000102E  2479 00001404             30                  MOVEA.L INPUT_LOC,A2        ;Point to the location of input machine code
00001034                            31  
00001034  4EB9 000013A2             32  piLoop          JSR     SR_PrintAddr
0000103A  4287                      33                  CLR.L   D7                  ;Clear existing opcode, if any exists
0000103C  3E12                      34                  MOVE.W  (A2),D7             ;Load next opcode
0000103E  123C 000C                 35                  MOVE.B  #12,D1              ;Prepare a shift of 12 bits to use in D1 
00001042  E26F                      36                  LSR.W   D1,D7               ;Use shift to isolate bits for root branch
00001044  CEFC 0006                 37                  MULU    #6,D7               ;Form offset to travel on jump table 
00001048  4EB0 7000                 38                  JSR     0(A0,D7)            ;Jump to appropriate opcode, then return
0000104C  0C39 0001 00001408        39                  CMP.B   #1,BOOL_FINISHED    ;Check if end of input machine code has been reached
00001054  6700 0006                 40                  BEQ     TERMINATE           ;Exit the loop.
00001058  544A                      41                  ADDA    #2,A2               ;Advance to next opcode
0000105A  60D8                      42                  BRA     piLoop 
0000105C                            43  
0000105C  FFFF FFFF                 44  TERMINATE       SIMHALT                     ;Halt the simulator
00001060                            45  
00001060                            46  *------------------------------------------------------------------------------
00001060                            47  * Root Branch - bits 15-12 ----------------------------------------------------
00001060                            48  *------------------------------------------------------------------------------
00001060                            49  * Root Level Jump Table
00001060                            50  *---------------Opcode--Operands------------Comments---------------------------
00001060  4EF9 000010C0             51  ROOT_JMP_TABLE  JMP     BRANCH_0            ;$0 - Bit Manipulation/MOVEP/Immediate
00001066  4EF9 00001238             52                  JMP     OP_MOVE_B           ;$1 - Move Byte
0000106C  4EF9 000012A8             53                  JMP     OP_MOVE_L           ;$2 - Move Long
00001072  4EF9 000012AA             54                  JMP     OP_MOVE_W           ;$3 - Move Word
00001078  4EF9 000010F4             55                  JMP     BRANCH_4            ;$4 - Miscellaneous
0000107E  4EF9 0000122E             56                  JMP     OP_INVALID          ;$5 - ADDQ/SUBQ/Scc/DBcc/TRAPc c
00001084  4EF9 0000111A             57                  JMP     BRANCH_6            ;$6 - Bcc/BSR/BRA
0000108A  4EF9 000012AE             58                  JMP     OP_MOVEQ            ;$7 - MOVEQ
00001090  4EF9 0000113C             59                  JMP     BRANCH_8            ;$8 - OR/DIV/SBCD
00001096  4EF9 0000114A             60                  JMP     BRANCH_9            ;$9 - SUB/SUBX
0000109C  4EF9 0000122E             61                  JMP     OP_INVALID          ;$A - Unassigned, Reserved
000010A2  4EF9 0000115C             62                  JMP     BRANCH_B            ;$B - CMP/EOR
000010A8  4EF9 00001172             63                  JMP     BRANCH_C            ;$C - AND/MUL/ABCD/EXG
000010AE  4EF9 00001184             64                  JMP     BRANCH_D            ;$D - ADD/ADDX
000010B4  4EF9 00001196             65                  JMP     BRANCH_E            ;$E - Shift/Rotate/Bit Field
000010BA  4EF9 000011B8             66                  JMP     BRANCH_F            ;$F - Coproccessor and CPU 32 Extensions
000010C0                            67  
000010C0                            68  *------------------------------------------------------------------------------
000010C0                            69  * First Level Branches - bits 11-8 --------------------------------------------
000010C0                            70  *------------------------------------------------------------------------------
000010C0                            71  * From Root to Branch 0
000010C0                            72  *---------------Opcode--Operands------------Comments---------------------------
000010C0  4EB9 00001396             73  BRANCH_0        JSR     SR_Eval11to8
000010C6                            74  
000010C6  BE7C 0000                 75                  CMP     #$0,D7
000010CA  6700 0136                 76                  BEQ     OP_ANDI             ;$0
000010CE  BE7C 0003                 77                  CMP     #$3,D7
000010D2  6700 0126                 78                  BEQ     OP_ADDI             ;$3
000010D6  BE7C 0008                 79                  CMP     #$8,D7
000010DA  6700 0136                 80                  BEQ     OP_BCHG             ;$8
000010DE  BE7C 000C                 81                  CMP     #$C,D7
000010E2  6700 0142                 82                  BEQ     OP_CMPI             ;$C
000010E6                            83  
000010E6  4EB9 0000138E             84                  JSR     SR_Eval7to6
000010EC  6700 0124                 85                  BEQ     OP_BCHG             ;%01
000010F0                            86  
000010F0  6000 013C                 87                  BRA     OP_INVALID          ;No matches found
000010F4                            88  
000010F4                            89  * From Root to Branch 4
000010F4                            90  *---------------Opcode--Operands------------Comments---------------------------
000010F4  4EB9 00001396             91  BRANCH_4        JSR     SR_Eval11to8
000010FA                            92                  
000010FA  BE7C 0002                 93                  CMP     #$2,D7
000010FE  6700 011E                 94                  BEQ     OP_CLR              ;$2
00001102  BE7C 000E                 95                  CMP     #$E,D7
00001106  6700 00B4                 96                  BEQ     BRANCH_4E           ;$E
0000110A                            97                  
0000110A  6700 0288                 98                  BEQ     SR_Eval11to6
0000110E  6700 019C                 99                  BEQ     OP_MOVEM            ;%1x001x
00001112  6700 011E                100                  BEQ     OP_LEA              ;%xxx111
00001116                           101                  
00001116  6000 0116                102                  BRA     OP_INVALID          ;No matches found
0000111A                           103  
0000111A                           104  * From Root to Branch 6
0000111A                           105  *---------------Opcode--Operands------------Comments---------------------------
0000111A  4EB9 00001396            106  BRANCH_6        JSR     SR_Eval11to8
00001120                           107                  
00001120  BE7C 0004                108                  CMP     #$4,D7
00001124  6700 00E8                109                  BEQ     OP_BCC              ;$4
00001128  BE7C 000E                110                  CMP     #$E,D7
0000112C  6700 00E8                111                  BEQ     OP_BGT              ;$E
00001130  BE7C 000F                112                  CMP     #$F,D7
00001134  6700 00E4                113                  BEQ     OP_BLE              ;$F
00001138                           114                  
00001138  6000 00F4                115                  BRA     OP_INVALID          ;No matches found
0000113C                           116  
0000113C                           117  * From Root to Branch 8
0000113C                           118  *---------------Opcode--Operands------------Comments---------------------------
0000113C  4EB9 00001392            119  BRANCH_8        JSR     SR_Eval8to6
00001142                           120                  
00001142  6700 00EA                121                  BEQ     OP_INVALID          ;%111 - Op not supported
00001146  6000 00E2                122                  BRA     OP_DIVS
0000114A                           123  
0000114A                           124  * From Root to Branch 8
0000114A                           125  *---------------Opcode--Operands------------Comments---------------------------
0000114A  4EB9 00001392            126  BRANCH_9        JSR     SR_Eval8to6
00001150                           127  
00001150  6700 0198                128                  BEQ     OP_SUBA             ;%011
00001154  6700 0194                129                  BEQ     OP_SUBA             ;%111
00001158  6000 018C                130                  BRA     OP_SUB
0000115C                           131  
0000115C                           132  * From Root to Branch B
0000115C                           133  *---------------Opcode--Operands------------Comments---------------------------
0000115C  4EB9 00001392            134  BRANCH_B        JSR     SR_Eval8to6
00001162                           135  
00001162  6700 00BE                136                  BEQ     OP_CMP              ;%000
00001166  6700 00BA                137                  BEQ     OP_CMP              ;%001
0000116A  6700 00B6                138                  BEQ     OP_CMP              ;%010
0000116E  6000 00BE                139                  BRA     OP_INVALID          ;No matches found
00001172                           140  
00001172                           141  * From Root to Branch C
00001172                           142  *---------------Opcode--Operands------------Comments---------------------------
00001172  4EB9 00001392            143  BRANCH_C        JSR     SR_Eval8to6
00001178                           144  
00001178  6700 00B4                145                  BEQ     OP_INVALID          ;%011 - Op not supported
0000117C  6700 0134                146                  BEQ     OP_MULS             ;%111
00001180  6000 007C                147                  BRA     OP_AND
00001184                           148  
00001184                           149  * From Root to Branch D
00001184                           150  *---------------Opcode--Operands------------Comments---------------------------
00001184  4EB9 00001392            151  BRANCH_D        JSR     SR_Eval8to6
0000118A                           152  
0000118A  6700 006A                153                  BEQ     OP_ADDA             ;%011
0000118E  6700 0066                154                  BEQ     OP_ADDA             ;%111
00001192  6000 005E                155                  BRA     OP_ADD
00001196                           156  
00001196                           157  * From Root to Branch E
00001196                           158  *---------------Opcode--Operands------------Comments---------------------------
00001196  4EB9 00001390            159  BRANCH_E        JSR     SR_Eval8to3
0000119C                           160  
0000119C  6700 006C                161                  BEQ     OP_ASR              ;%0xxx00
000011A0  6700 0094                162                  BEQ     OP_LSR              ;%0xxx01
000011A4  6700 0122                163                  BEQ     OP_ROR              ;%0xxx11
000011A8  6700 005C                164                  BEQ     OP_ASL              ;%1xxx00
000011AC  6700 0086                165                  BEQ     OP_LSL              ;%1xxx01
000011B0  6700 0112                166                  BEQ     OP_ROL              ;%1xxx11
000011B4  6000 0078                167                  BRA     OP_INVALID
000011B8                           168  
000011B8                           169  * From Root to Branch F
000011B8                           170  *---------------Opcode--Operands------------Comments---------------------------
000011B8  6000 0116                171  BRANCH_F        BRA     OP_SIMHALT
000011BC                           172  
000011BC                           173  *------------------------------------------------------------------------------
000011BC                           174  * Second Level Branches - bits 7-4 --------------------------------------------
000011BC                           175  *------------------------------------------------------------------------------
000011BC                           176  * From Branch 4 to Branch 4E
000011BC                           177  *---------------Opcode--Operands------------Comments---------------------------
000011BC  4EB9 00001382            178  BRANCH_4E       JSR     SR_Eval7to4
000011C2                           179                  
000011C2  BE7C 0007                180                  CMP     #$7,D7
000011C6  6700 0010                181                  BEQ     BRANCH_4E7          ;$7
000011CA                           182                  
000011CA  4EB9 0000138E            183                  JSR     SR_Eval7to6
000011D0                           184                  
000011D0  6700 005E                185                  BEQ     OP_JSR              ;%10
000011D4  6000 0058                186                  BRA     OP_INVALID          ;No matches found
000011D8                           187              
000011D8                           188  *------------------------------------------------------------------------------
000011D8                           189  * Third Level Branches - bits 3-0 ---------------------------------------------
000011D8                           190  *------------------------------------------------------------------------------
000011D8                           191  * From Branch 4E to Branch 4E7
000011D8                           192  *---------------Opcode--Operands------------Comments---------------------------
000011D8  4EB9 00001376            193  BRANCH_4E7      JSR     SR_Eval3to0
000011DE                           194  
000011DE  BE7C 0001                195                  CMP     #$1,D7
000011E2  6700 00D2                196                  BEQ     OP_NOP              ;$1
000011E6  BE7C 0005                197                  CMP     #$5,D7
000011EA  6700 00E0                198                  BEQ     OP_RTS              ;$5
000011EE  6000 003E                199                  BRA     OP_INVALID          ;No matches found
000011F2                           200  
000011F2                           201  *------------------------------------------------------------------------------
000011F2                           202  * Opcodes ---------------------------------------------------------------------
000011F2                           203  *------------------------------------------------------------------------------
000011F2                           204  * Add
000011F2                           205  *---------------Opcode--Operands------------Comments---------------------------
000011F2  6000 003A                206  OP_ADD          BRA     OP_INVALID
000011F6                           207  
000011F6                           208  * Add Address
000011F6                           209  *---------------Opcode--Operands------------Comments---------------------------
000011F6  6000 0036                210  OP_ADDA         BRA     OP_INVALID
000011FA                           211  
000011FA                           212  * Add Immediate
000011FA                           213  *---------------Opcode--Operands------------Comments---------------------------
000011FA  6000 0032                214  OP_ADDI         BRA     OP_INVALID
000011FE                           215  
000011FE                           216  * AND Logical
000011FE                           217  *---------------Opcode--Operands------------Comments---------------------------
000011FE  6000 002E                218  OP_AND          BRA     OP_INVALID
00001202                           219  
00001202                           220  * AND Immediate
00001202                           221  *---------------Opcode--Operands------------Comments---------------------------
00001202  6000 002A                222  OP_ANDI         BRA     OP_INVALID
00001206                           223  
00001206                           224  * Arithmetic Shift Left
00001206                           225  *---------------Opcode--Operands------------Comments---------------------------
00001206  6000 0026                226  OP_ASL          BRA     OP_INVALID
0000120A                           227  
0000120A                           228  * Arithmetic Shift Right
0000120A                           229  *---------------Opcode--Operands------------Comments---------------------------
0000120A  6000 0022                230  OP_ASR          BRA     OP_INVALID
0000120E                           231  
0000120E                           232  * Branch Conditionally - Carry Clear
0000120E                           233  *---------------Opcode--Operands------------Comments---------------------------
0000120E  6000 001E                234  OP_BCC          BRA     OP_INVALID
00001212                           235  
00001212                           236  * Test a Bit and Change
00001212                           237  *---------------Opcode--Operands------------Comments---------------------------
00001212  6000 001A                238  OP_BCHG         BRA     OP_INVALID
00001216                           239  
00001216                           240  * Branch Conditionally - Greater Than
00001216                           241  *---------------Opcode--Operands------------Comments---------------------------
00001216  6000 0016                242  OP_BGT          BRA     OP_INVALID
0000121A                           243  
0000121A                           244  * Branch Conditionally - Less or Equal
0000121A                           245  *---------------Opcode--Operands------------Comments---------------------------
0000121A  6000 0012                246  OP_BLE          BRA     OP_INVALID
0000121E                           247  
0000121E                           248  * Clear an Operand
0000121E                           249  *---------------Opcode--Operands------------Comments---------------------------
0000121E  6000 000E                250  OP_CLR          BRA     OP_INVALID
00001222                           251  
00001222                           252  * Compare
00001222                           253  *---------------Opcode--Operands------------Comments---------------------------
00001222  6000 000A                254  OP_CMP          BRA     OP_INVALID
00001226                           255  
00001226                           256  * Compare Immediate
00001226                           257  *---------------Opcode--Operands------------Comments---------------------------
00001226  6000 0006                258  OP_CMPI         BRA     OP_INVALID
0000122A                           259  
0000122A                           260  * Signed Divide
0000122A                           261  *---------------Opcode--Operands------------Comments---------------------------
0000122A  6000 0002                262  OP_DIVS         BRA     OP_INVALID
0000122E                           263  
0000122E                           264  * Disassembler does not support provided opcode
0000122E                           265  *---------------Opcode--Operands------------Comments---------------------------
0000122E  4E75                     266  OP_INVALID      RTS
00001230                           267  
00001230                           268  * Jump to Subroutine
00001230                           269  *---------------Opcode--Operands------------Comments---------------------------
00001230  60FC                     270  OP_JSR          BRA     OP_INVALID
00001232                           271  
00001232                           272  * Load Effective Address
00001232                           273  *---------------Opcode--Operands------------Comments---------------------------
00001232  60FA                     274  OP_LEA          BRA     OP_INVALID
00001234                           275  
00001234                           276  * Logical Shift Left
00001234                           277  *---------------Opcode--Operands------------Comments---------------------------
00001234  60F8                     278  OP_LSL          BRA     OP_INVALID
00001236                           279  
00001236                           280  * Logical Shift Right
00001236                           281  *---------------Opcode--Operands------------Comments---------------------------
00001236  60F6                     282  OP_LSR          BRA     OP_INVALID
00001238                           283  
00001238                           284  * Move Data from Source to Destination - Byte
00001238                           285  *---------------Opcode--Operands------------Comments---------------------------
00001238  43F9 0000142A            286  OP_MOVE_B       LEA     DISP_MOVE,A1           ;
0000123E  103C 000E                287                  MOVE.B  #14,D0              ;
00001242  4E4F                     288                  TRAP    #15
00001244                           289              
00001244  43F9 0000143D            290                  LEA     DISP_SIZE_B,A1
0000124A  103C 000E                291                  MOVE.B  #14,D0
0000124E  4E4F                     292                  TRAP    #15
00001250                           293              
00001250  4EB9 000013D0            294                  JSR     SR_PrintTab
00001256                           295              
00001256  183C 000D                296                  MOVE.B  #13,D4
0000125A                           297              
0000125A  3412                     298                  MOVE.W  (A2),D2
0000125C  1A3C 000A                299                  MOVE.B  #10,D5
00001260  EB6A                     300                  LSL.W   D5,D2
00001262  E86A                     301                  LSR.W   D4,D2
00001264                           302              
00001264  3612                     303                  MOVE.W  (A2),D3
00001266  1A3C 000D                304                  MOVE.B  #13,D5
0000126A  EB6B                     305                  LSL.W   D5,D3
0000126C  E86B                     306                  LSR.W   D4,D3
0000126E                           307              
0000126E  4EB9 00001308            308                  JSR     SR_Decode_EA
00001274                           309  
00001274  43F9 0000143B            310                  LEA     DISP_COMMA,A1
0000127A  103C 000E                311                  MOVE.B  #14,D0
0000127E  4E4F                     312                  TRAP    #15
00001280                           313              
00001280  3412                     314                  MOVE.W  (A2),D2
00001282  1A3C 0007                315                  MOVE.B  #7,D5
00001286  EB6A                     316                  LSL.W   D5,D2
00001288  E86A                     317                  LSR.W   D4,D2
0000128A                           318              
0000128A  3612                     319                  MOVE.W  (A2),D3
0000128C  1A3C 0004                320                  MOVE.B  #4,D5
00001290  EB6B                     321                  LSL.W   D5,D3
00001292  E86B                     322                  LSR.W   D4,D3
00001294                           323  
00001294  4EB9 00001308            324                  JSR     SR_Decode_EA
0000129A                           325              
0000129A  43F9 00001423            326                  LEA     MSG_LINEBREAK,A1
000012A0  103C 000E                327                  MOVE.B  #14,D0
000012A4  4E4F                     328                  TRAP    #15
000012A6                           329                         
000012A6  4E75                     330                  RTS
000012A8                           331  
000012A8                           332  * Move Data from Source to Destination - Long
000012A8                           333  *---------------Opcode--Operands------------Comments---------------------------
000012A8  6084                     334  OP_MOVE_L       BRA     OP_INVALID
000012AA                           335  
000012AA                           336  * Move Data from Source to Destination - Word
000012AA                           337  *---------------Opcode--Operands------------Comments---------------------------
000012AA  6082                     338  OP_MOVE_W       BRA     OP_INVALID
000012AC                           339  
000012AC                           340  * Move Multiple Registers
000012AC                           341  *---------------Opcode--Operands------------Comments---------------------------
000012AC  6080                     342  OP_MOVEM        BRA     OP_INVALID
000012AE                           343  
000012AE                           344  * Move Quick
000012AE                           345  *---------------Opcode--Operands------------Comments---------------------------
000012AE  6000 FF7E                346  OP_MOVEQ        BRA     OP_INVALID
000012B2                           347  
000012B2                           348  * Signed Multiply
000012B2                           349  *---------------Opcode--Operands------------Comments---------------------------
000012B2  6000 FF7A                350  OP_MULS         BRA     OP_INVALID
000012B6                           351  
000012B6                           352  * No Operation
000012B6                           353  *---------------Opcode--Operands------------Comments---------------------------
000012B6  43F9 00001426            354  OP_NOP          LEA     DISP_NOP,A1
000012BC  103C 000D                355                  MOVE.B  #13,D0
000012C0  4E4F                     356                  TRAP    #15
000012C2  4E75                     357                  RTS
000012C4                           358  
000012C4                           359  * Rotate (Without Extend) Left
000012C4                           360  *---------------Opcode--Operands------------Comments---------------------------
000012C4  6000 FF68                361  OP_ROL          BRA     OP_INVALID
000012C8                           362  
000012C8                           363  * Rotate (Without Extend) Right
000012C8                           364  *---------------Opcode--Operands------------Comments---------------------------
000012C8  6000 FF64                365  OP_ROR          BRA     OP_INVALID
000012CC                           366  
000012CC                           367  * Return from Subroutine
000012CC                           368  *---------------Opcode--Operands------------Comments---------------------------
000012CC  6000 FF60                369  OP_RTS          BRA     OP_INVALID
000012D0                           370  
000012D0                           371  * PseudoOp Simhalt
000012D0                           372  *---------------Opcode--Operands------------Comments---------------------------
000012D0  43F9 0000142F            373  OP_SIMHALT      LEA     DISP_SIMHALT,A1
000012D6  103C 000D                374                  MOVE.B  #13,D0
000012DA  4E4F                     375                  TRAP    #15
000012DC  13FC 0001 00001408       376                  MOVE.B  #1,BOOL_FINISHED    ;Mark that input machine code ended
000012E4  4E75                     377                  RTS
000012E6                           378  
000012E6                           379  * Subtract
000012E6                           380  *---------------Opcode--Operands------------Comments---------------------------
000012E6  6000 FF46                381  OP_SUB          BRA     OP_INVALID
000012EA                           382  
000012EA                           383  * Subtract Address
000012EA                           384  *---------------Opcode--Operands------------Comments---------------------------
000012EA  6000 FF42                385  OP_SUBA         BRA     OP_INVALID
000012EE                           386  
000012EE                           387  *------------------------------------------------------------------------------
000012EE                           388  * Subroutines -----------------------------------------------------------------
000012EE                           389  *------------------------------------------------------------------------------
000012EE                           390  * Ascii to Hex Loop
000012EE                           391  * Helper subroutine to process raw ascii and convert it to hex.
000012EE                           392  * Input Parameters: A1
000012EE                           393  * Return Parameters: D2.L contains the input number converted to hex
000012EE                           394  * Registers used internally: D0, D1
000012EE                           395  *---------------Opcode--Operands------------Comments---------------------------
000012EE  1019                     396  SR_AtoHLoop     MOVE.B  (A1)+,D0            ; Get the first byte
000012F0  4EB9 000013DE            397                  JSR     SR_Strip_Ascii      ; Get rid of the ASCII code.
000012F6  D280                     398                  ADD.L   D0,D1               ; Load the char into D1
000012F8  0C11 0000                399                  CMPI.B  #$0,(A1)            ; Evaluate if there is more work to do.
000012FC  6700 0006                400                  BEQ     athEndLoop          ; If not, exit the loop.
00001300  E989                     401                  LSL.L   #$4,D1              ; Otherwise, shift the char left in D1 for the next char
00001302  60EA                     402                  BRA     SR_AtoHLoop         ; Continue working
00001304                           403    
00001304  2401                     404  athEndLoop      MOVE.L  D1,D2               ; Return hex number in D2
00001306  4E75                     405                  RTS
00001308                           406  
00001308                           407  * SR_DecodeEA determines and prints the effective address mode and register of
00001308                           408  * six bits
00001308                           409  * Registers passed: D2(mode), D3(register)
00001308                           410  * Return: null
00001308                           411  *---------------Opcode--Operands------------Comments---------------------------
00001308  47F9 0000131A            412  SR_Decode_EA    LEA     deModeTable,A3
0000130E  49F9 00001446            413                  LEA     TABLE_HEXCHAR,A4
00001314  4EB3 2000                414                  JSR     0(A3,D2)
00001318  4E75                     415                  RTS
0000131A                           416                  
0000131A                           417  *   EA Mode Table
0000131A  4EF9 0000134A            418  deModeTable     JMP     deMode_000          ;0 - Register Direct Data
00001320  4EF9 00001368            419                  JMP     deMode_001          ;1 - Register Direct Address
00001326  4EF9 0000136A            420                  JMP     deMode_010          ;2 - Register Indirect Address
0000132C  4EF9 0000136C            421                  JMP     deMode_011          ;3 - Register Indirect Address Post Inc
00001332  4EF9 0000136E            422                  JMP     deMode_100          ;4 - Register Indirect Address Post Dec
00001338  4EF9 00001370            423                  JMP     deMode_101          ;5 - Not Supported
0000133E  4EF9 00001372            424                  JMP     deMode_110          ;6 - Not Supported
00001344  4EF9 00001374            425                  JMP     deMode_111          ;7 - Absolute Data Short/Long/Immediate
0000134A                           426                  
0000134A                           427  *   0 - Register Direct Data
0000134A  1A3C 001A                428  deMode_000      MOVE.B  #26,D5
0000134E  43F4 5000                429                  LEA     0(A4,D5),A1
00001352  103C 000E                430                  MOVE.B  #14,D0
00001356  4E4F                     431                  TRAP    #15
00001358                           432  
00001358  C7FC 0002                433                  MULS    #2,D3
0000135C  43F4 3000                434                  LEA 0(A4,D3),A1
00001360  103C 000E                435                  MOVE.B  #14,D0
00001364  4E4F                     436                  TRAP    #15
00001366  4E75                     437                  RTS
00001368                           438  
00001368                           439  *   1 - Register Direct Address
00001368  4E75                     440  deMode_001      RTS
0000136A                           441  
0000136A                           442  *   2 - Register Indirect Address
0000136A  4E75                     443  deMode_010      RTS
0000136C                           444  
0000136C                           445  *   3 - Register Indirect Address Post Inc
0000136C  4E75                     446  deMode_011      RTS
0000136E                           447  
0000136E                           448  *   4 - Register Indirect Address Post Dec
0000136E  4E75                     449  deMode_100      RTS
00001370                           450  
00001370                           451  *   5 - Not Supported
00001370  4E75                     452  deMode_101      RTS
00001372                           453  
00001372                           454  *   6 - Not Supported
00001372  4E75                     455  deMode_110      RTS
00001374                           456  
00001374                           457  *   7 - Absolute Data Short/Long/Immediate
00001374  4E75                     458  deMode_111      RTS
00001376                           459  
00001376                           460  * Evaluate Bits 3 to 0
00001376                           461  *---------------Opcode--Operands------------Comments---------------------------
00001376  3E12                     462  SR_Eval3to0     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001378  123C 000C                463                  MOVE.B  #12,D1              ;Prepare a shift of 12 bits to use in D1
0000137C  E36F                     464                  LSL.W   D1,D7               ;Truncate up to forth nibble
0000137E  E26F                     465                  LSR.W   D1,D7               ;Isolate nibble
00001380  4E75                     466                  RTS
00001382                           467  
00001382                           468  * Evaluate Bits 7 to 4
00001382                           469  *---------------Opcode--Operands------------Comments---------------------------
00001382  3E12                     470  SR_Eval7to4     MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001384  123C 000C                471                  MOVE.B  #12,D1              ;Prepare a shift of 12 bits to use in D1
00001388  E14F                     472                  LSL.W   #8,D7               ;Truncate up to third nibble
0000138A  E26F                     473                  LSR.W   D1,D7               ;Isolate nibble
0000138C  4E75                     474                  RTS
0000138E                           475  
0000138E                           476  * Evaluate Bits 7 to 6
0000138E                           477  *---------------Opcode--Operands------------Comments---------------------------
0000138E  4E75                     478  SR_Eval7to6     RTS
00001390                           479  
00001390                           480  * Evaluate Bits 8 to 3
00001390                           481  *---------------Opcode--Operands------------Comments---------------------------
00001390  4E75                     482  SR_Eval8to3     RTS
00001392                           483  
00001392                           484  * Evaluate Bits 8 to 6
00001392                           485  *---------------Opcode--Operands------------Comments---------------------------
00001392  4E75                     486  SR_Eval8to6     RTS
00001394                           487  
00001394                           488  * Evaluate Bits 11 to 6
00001394                           489  *---------------Opcode--Operands------------Comments---------------------------
00001394  4E75                     490  SR_Eval11to6    RTS
00001396                           491  
00001396                           492  * Evaluate Bits 11 to 8
00001396                           493  *---------------Opcode--Operands------------Comments---------------------------
00001396  3E12                     494  SR_Eval11to8    MOVE.W  (A2),D7             ;Reload full opcode for evaluation
00001398  123C 000C                495                  MOVE.B  #12,D1              ;Prepare a shift of 12 bits to use in D1
0000139C  E94F                     496                  LSL.W   #4,D7               ;Truncate up to second nibble
0000139E  E26F                     497                  LSR.W   D1,D7               ;Isolate nibble
000013A0  4E75                     498                  RTS
000013A2                           499  
000013A2                           500  * Prints the hex address in A2 when called
000013A2                           501  * Registers passed: A2
000013A2                           502  * Return: Null
000013A2                           503  *---------------Opcode--Operands------------Comments---------------------------
000013A2  47F9 00001446            504  SR_PrintAddr    LEA     TABLE_HEXCHAR,A3    ;load constants and table into registers
000013A8  1A3C 0000                505                  MOVE.B  #0,D5        
000013AC  183C 001C                506                  MOVE.B  #28,D4              ;char shift
000013B0                           507  
000013B0                           508  *   Load the address to be printed into D6
000013B0  3C0A                     509  paLoop          MOVE.W  A2,D6
000013B2                           510          
000013B2                           511  *   Isolate nibble in D6 to be printed as a hex character
000013B2  EBAE                     512                  LSL.L   D5,D6        
000013B4  E8AE                     513                  LSR.L   D4,D6
000013B6                           514  
000013B6                           515  *   Multiply nibble by two, find character in char_table
000013B6  CCFC 0002                516                  MULU    #2,D6
000013BA  43F3 6000                517                  LEA     0(A3,D6),A1
000013BE                           518  
000013BE                           519  *   Print char
000013BE  103C 000E                520                  MOVE.B  #14,D0
000013C2  4E4F                     521                  TRAP    #15
000013C4                           522              
000013C4                           523  *   Increment loop counter by four, check if loop is done
000013C4  5805                     524                  ADD.B   #4,D5
000013C6  BA3C 0020                525                  CMP.B   #32,D5
000013CA  6700 0004                526                  BEQ     SR_PrintTab         ;Exits loop
000013CE  60E0                     527                  BRA     paLoop
000013D0                           528                  
000013D0                           529  * Add a tab to the end of a printed string, leave subroutine
000013D0                           530  *---------------Opcode--Operands------------Comments---------------------------
000013D0  43F9 00001437            531  SR_PrintTab     LEA     DISP_TAB,A1
000013D6  103C 000E                532                  MOVE.B  #14,D0
000013DA  4E4F                     533                  TRAP    #15
000013DC  4E75                     534                  RTS
000013DE                           535  
000013DE                           536  * Strip Ascii
000013DE                           537  * Remove the ascii code from the digits 0-9,a-f, or A-F
000013DE                           538  * Input Parameters: <D0> = ascii code
000013DE                           539  * Return Parameters: D0.B = number 0...F, returned as 00...0F
000013DE                           540  * Registers used internally: D0
000013DE                           541  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
000013DE                           542  *---------------Opcode--Operands------------Comments---------------------------
000013DE  B03C 0039                543  SR_Strip_Ascii  CMP.B   #$39,D0             ; Is it in range of 0-9?
000013E2  6F00 001A                544                  BLE     saSub30             ; It's a number
000013E6  B03C 0046                545                  CMP.B   #$46,D0             ; Is is A...F?
000013EA  6F00 000A                546                  BLE     saSub37             ; It's A...F
000013EE  0400 0057                547                  SUB.B   #$57,D0             ; It's a...f
000013F2  6000 000E                548                  BRA     saReturn            ; Go back
000013F6  0400 0037                549  saSub37         SUB.B   #$37,D0             ; Strip 37
000013FA  6000 0006                550                  BRA     saReturn            ; Go back
000013FE  0400 0030                551  saSub30         SUB.B   #$30,D0             ; Strip 30
00001402  4E75                     552  saReturn        RTS                         ; Go back
00001404                           553  
00001404                           554  *------------------------------------------------------------------------------
00001404                           555  * Variables and Constants -----------------------------------------------------
00001404                           556  *------------------------------------------------------------------------------
00001404                           557  *
00001404                           558  *---------------Opcode--Operands------------Comments---------------------------
00001404  =0000000D                559  CR              EQU     $0D                 ;Carriage Return
00001404  =0000000A                560  LF              EQU     $0A                 ;Line feed
00001404                           561  
00001404  =00002000                562  INPUT_BUFFER    EQU     $2000               ;Create an input buffer for ascii strings.
00001404                           563  INPUT_LOC       DS.L    1                   ;Location to read input data
00001408                           564  BOOL_FINISHED   DS.B    1                   ;Finished reading data
00001409                           565  
00001409= 4C 6F 61 64 20 64 ...    566  MSG_PROMPT      DC.B    'Load data from location: ',0
00001423= 0D 0A 00                 567  MSG_LINEBREAK   DC.B    CR,LF,0
00001426                           568  
00001426= 4E 4F 50 00              569  DISP_NOP        DC.B    'NOP',0
0000142A= 4D 4F 56 45 00           570  DISP_MOVE       DC.B    'MOVE',0
0000142F= 53 49 4D 48 41 4C ...    571  DISP_SIMHALT    DC.B    'SIMHALT',0
00001437                           572  
00001437= 20 20 20 00              573  DISP_TAB        DC.B    '   ',0
0000143B= 2C 00                    574  DISP_COMMA      DC.B    ',',0
0000143D= 2E 42 00                 575  DISP_SIZE_B     DC.B    '.B',0
00001440= 2E 57 00                 576  DISP_SIZE_W     DC.B    '.W',0
00001443= 2E 57 00                 577  DISP_SIZE_L     DC.B    '.W',0
00001446                           578  
00001446= 30 00                    579  TABLE_HEXCHAR   DC.B    '0',0
00001448= 31 00                    580                  DC.B    '1',0
0000144A= 32 00                    581                  DC.B    '2',0
0000144C= 33 00                    582                  DC.B    '3',0
0000144E= 34 00                    583                  DC.B    '4',0
00001450= 35 00                    584                  DC.B    '5',0
00001452= 36 00                    585                  DC.B    '6',0
00001454= 37 00                    586                  DC.B    '7',0
00001456= 38 00                    587                  DC.B    '8',0
00001458= 39 00                    588                  DC.B    '9',0
0000145A= 41 00                    589                  DC.B    'A',0 
0000145C= 42 00                    590                  DC.B    'B',0
0000145E= 43 00                    591                  DC.B    'C',0
00001460= 44 00                    592                  DC.B    'D',0
00001462= 45 00                    593                  DC.B    'E',0
00001464= 46 00                    594                  DC.B    'F',0
00001466                           595  
00001466                           596                  END     START               ;Do not put anything below this line.

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ATHENDLOOP          1304
BOOL_FINISHED       1408
BRANCH_0            10C0
BRANCH_4            10F4
BRANCH_4E           11BC
BRANCH_4E7          11D8
BRANCH_6            111A
BRANCH_8            113C
BRANCH_9            114A
BRANCH_B            115C
BRANCH_C            1172
BRANCH_D            1184
BRANCH_E            1196
BRANCH_F            11B8
CR                  D
DEMODETABLE         131A
DEMODE_000          134A
DEMODE_001          1368
DEMODE_010          136A
DEMODE_011          136C
DEMODE_100          136E
DEMODE_101          1370
DEMODE_110          1372
DEMODE_111          1374
DISP_COMMA          143B
DISP_MOVE           142A
DISP_NOP            1426
DISP_SIMHALT        142F
DISP_SIZE_B         143D
DISP_SIZE_L         1443
DISP_SIZE_W         1440
DISP_TAB            1437
INPUT_BUFFER        2000
INPUT_LOC           1404
LF                  A
MSG_LINEBREAK       1423
MSG_PROMPT          1409
OP_ADD              11F2
OP_ADDA             11F6
OP_ADDI             11FA
OP_AND              11FE
OP_ANDI             1202
OP_ASL              1206
OP_ASR              120A
OP_BCC              120E
OP_BCHG             1212
OP_BGT              1216
OP_BLE              121A
OP_CLR              121E
OP_CMP              1222
OP_CMPI             1226
OP_DIVS             122A
OP_INVALID          122E
OP_JSR              1230
OP_LEA              1232
OP_LSL              1234
OP_LSR              1236
OP_MOVEM            12AC
OP_MOVEQ            12AE
OP_MOVE_B           1238
OP_MOVE_L           12A8
OP_MOVE_W           12AA
OP_MULS             12B2
OP_NOP              12B6
OP_ROL              12C4
OP_ROR              12C8
OP_RTS              12CC
OP_SIMHALT          12D0
OP_SUB              12E6
OP_SUBA             12EA
PALOOP              13B0
PILOOP              1034
ROOT_JMP_TABLE      1060
SARETURN            1402
SASUB30             13FE
SASUB37             13F6
SR_ATOHLOOP         12EE
SR_DECODE_EA        1308
SR_EVAL11TO6        1394
SR_EVAL11TO8        1396
SR_EVAL3TO0         1376
SR_EVAL7TO4         1382
SR_EVAL7TO6         138E
SR_EVAL8TO3         1390
SR_EVAL8TO6         1392
SR_PRINTADDR        13A2
SR_PRINTTAB         13D0
SR_STRIP_ASCII      13DE
START               1000
TABLE_HEXCHAR       1446
TERMINATE           105C
